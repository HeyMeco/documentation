{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Linux for ARM development boards</p>"},{"location":"#welcome-to-the-armbian-documentation","title":"Welcome to the Armbian Documentation!","text":""},{"location":"#what-is-armbian","title":"What is Armbian?","text":"<p>Armbian is highly optimized base operating system specialized for single board computers.</p> <p>It embodies extremely lightweight hardware features focused Debian-based distribution, extensive build framework and is suitable for industrial or home use.</p> <pre><code>graph LR\n  A[Hardware] --&gt; B{50 x Armbian kernel};\n  B --&gt; X[\"point release\"];\n  X ----&gt;|minimal| E[Debian or Ubuntu];\n  X ----&gt;|server| F[Debian or Ubuntu];\n  X --&gt;|desktop| H[Debian or Ubuntu];\n  H --&gt;Q[XFCE];\n  H --&gt;W[Gnome];\n  H --&gt;R[KDE];\n  H --&gt;T[Cinnamon];\n</code></pre>"},{"location":"#key-advantages","title":"Key Advantages","text":"<ul> <li>extremly lean and standardised Debian-based user space</li> <li>extensive build framework with endless capabilities</li> <li>fast hybrid assembly of whole operating system</li> <li>independent long term support</li> <li>advanced hardware and OS config (armbian-config)</li> <li>in-house kernel development, improvement and maintenance</li> <li>daily automated stress and upgrade testing on key hardware targets</li> <li>exlusive support of exotic hardware</li> <li>installation is optional and simplified</li> <li>provides point releases and daily rolling distribution</li> <li>world wide download infrastructure with perfect coverage in China mainland</li> <li>1000+ build runners to assist CI automation</li> <li>CI supports customised build list per each build target</li> </ul> Other features and performance tweaks <ul> <li>Images are reduced to actual data size and automatically expand across boot media at first boot    </li> <li>BASH or ZSH shell, preinstalled standard system utilities</li> <li>login is possible via serial, HDMI/VGA or SSH</li> <li>highly compressed distributed images</li> <li>Upgrades are done via standard <code>apt upgrade</code> method</li> <li>Login script shows: board name with large text, distribution base, kernel version, system load, uptime, memory usage, IP(v6) address, CPU and drive temperature, ZFS, rootfs usage, battery conditions and number of updates to install</li> <li><code>/var/log</code> is mounted as compressed device (zram, lzo), log2ram service saves logs to disk daily and on shutdown</li> <li>Half of memory is allocated/extended for/with compressed swap</li> <li><code>/tmp</code> is mounted as <code>tmpfs</code> (optionally compressed)</li> <li>Browser profile memory caching is enabled on desktop images</li> <li>Optimized IO scheduler (check <code>/etc/init.d/armhwinfo</code>)</li> <li>Journal data writeback enabled. (<code>/etc/fstab</code>)</li> <li>ethernet interrupts are using dedicated core    </li> </ul>"},{"location":"#what-is-supported","title":"What is supported?","text":"<p>Armbian distributes stable images for maintained hardware through its own mirror network. Supported / maintained is not a guarantee. It implies a particular SBC is at a high level of software maturity and has a named maintainer. Due to the complexity and lack of cooperation in the ecosystem it is unlikely that all specialized functionalities (like 3D, VE, I\u00b2C\u2026) are always available.</p>"},{"location":"#support-status","title":"Support status","text":"<p>Platinum Support</p> <p>At least one person providing maintainance and support.</p> <p>Standard Support</p> <p>Support is not secured but still good anything from this list.</p> <p>Community maintained</p> <p>Most of those will also work, but no warranty as Armbian does not monitor their status.</p> <p>For more information is see the Board Support Guide</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>If you are new to Armbian, the Getting Started section provides a tutorial for everything you need to know to get Armbian running. It then continues on to more advanced topics.</p> <p>If you need help and have read through Getting Started check out Troubleshooting.</p> <p>If you still cannot find what you need here visit the Armbian forum where your input can help to improve this documentation.</p>"},{"location":"#software-titles","title":"Software titles","text":"<p>You can quickly and easily install popular software! They are ready to run and optimized for Armbian. Here are few highlights:</p> <ul> <li>Desktops - install desktop environments</li> <li>Netconfig - network tools</li> <li>DevTools - development</li> <li>Benchy - system benchmaking and diagnostics</li> <li>Containers - containerization and virtual machines</li> <li>Media - media servers and editors</li> <li>Management - remote management tools</li> </ul> Unit testing <p>All software targets and functions are automatically tested to catch as many problems as possible.</p> <p></p>"},{"location":"Board_Maintainers_Procedures_and_Guidelines/","title":"Maintainers_Procedures_and_Guidelines","text":"Board Maintainers Procedures and Guidelines <p>     This topic should give you as new board maintainers a brief overview about what you should do, must do, and can do. What you as maintainer can expect from Armbian and what we expect from you. </p> <p> Requirements: </p> <p>     Even though you became a maintainer already just to make sure everything is set. </p> <ul> <li>         You must have access to the hardware you applied to maintain     </li> <li>         You must have a Github ID which should be listed in the documentation </li> <li>         You must have a forums account (you already have obviously) which should be listed in the documentation. If not let me know.     </li> <li>You must  have an Jira account and keep track of issues filed for your board</li> <li> You must  make sure Armbian Management has been informed of all of the above IDs for our documentation</li> <li>         You should know Armbian basics like how to get an Armbian image run on your hardware and do basic debugging, ideally via serial console     </li> <li>         Knowledge in development, writing code and so on is optional (but of course welcome ;-))     </li> </ul> <p>If you are a new maintainer, please make sure you have submitted your IDs and information using our maintainer registry form: Here</p> <p> Maintaining: </p> <p> So all requirements are met and you are a maintainer now. Now what? </p> <p>     Maintainers must not necessarily be persons with development experience. They act as a intersection between end-users and the development team and serve the developers in best-effort manner. They are encouraged to answer basic/simple user questions (if possible, also best effort) without having to bother the development team. They are allowed to record bugs but are not allowed to escalate bugs. Team leaders do. </p> <p>     Take note that it is still up to development team's discretion what gets attention since Armbian has to plan carefully how to spend its very limited resources. </p> <ul> <li>         You must participate in release process:         Ideally you attend to the release meetings that usually happen four times a year about a month before release date (end of February, May, August, November). On that occasion you are given the chance to point out critical issues with your board. A typical agenda looks like this:  https://docs.armbian.com/Process_Release-Model/#agenda          However, while the meeting participation is optional you \"must sign-off that device has been tested, is stable, and ready for release during release process\".         This basically means you take the RC-images we provide and test them as best as you can for their functionality hardware-wise:         <ul> <li>Does the board boot to both CLI and Desktop?</li> <li>Is the desktop usable?</li> <li>Does USB work? (at all or partially)</li> <li>Other common use cases</li> </ul>         If something does not work, this is fine also and totally normal. The important part is that it is documented and we get notified about the issues.  During each release you will be expected to fill out  the following form: Release Testing Form </li> </ul> <ul> <li>         You should follow the commit history on Github. For once you may learn something about how things work both development-wise and behind the scenes in general and also may notice changes that affect the hardware/board you are dealing with.      </li> <li>         While not required, you should have a build environment setup so you can build images with the most recent images and test them right away. Your feedback, either positive or negative, is very welcome. You are free to add comments to every commit and pull request.                   Ideally you have multiple microSD cards laying around to test regular updates on current releases and nightly without having to re-flash the same card every time to switch between branches.         Alternatively you can grab auto-built images from the build train once available: https://github.com/armbian/build/releases         Take note that the building process takes quite a while so you might be faster using your own build environment.     </li> </ul> <ul> <li>         You must provide \"best effort\" support in the forum:         Do not let that wording intimidate you. This is not a complicated task. Regarding forums this can include things like         <ul> <li>                 answering obvious questions (for example by pointing to our documentation, ideally directly to the solution page),             </li> <li>                 let the questioner know that additional information is needed for further debugging (e.g. request \"armbianmonitor -u\" output) or             </li> <li>                 for upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/ </li> <li> If you need additional direction on dealing with an issue contact Werner on the forums or Discord.</li> </ul> </li> </ul> <ul> <li>         You must provide \"best effort\" support in Jira: <ul> <li>                 Review submitted issues for you board made by Armbian's contributors             </li> <li>                 For upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/ </li> <li> If you have questions, concerns or are not sure about something, you can tag the issue for @Tenkawa or @TheLinuxBug to review</li> </ul> </li> </ul> <p> Jira and Forum expectations: </p> <p>Low priority issues are usually attended to and patched by the community. If the issue has existed for more than a release, you can create a Jira ticket for it. However the expectation is the issue will be low priority and may not be processed for some time. Issues such as, but not limited to, should be considered low priority:</p> <ul> <li>Wifi (this includes missing modules, AP mode, etc)</li> <li>Bluetooth</li> <li>GPIO</li> <li>i2c</li> <li>Hardware accelerators, including crypto or VPU (video acceleration)</li> <li>DTB overlays (required for i2c devices, LCD displays, etc)</li> </ul> <p>For high priority items you can create a Jira ticket so that when developers are able, they can process it. If you are going to create a Jira ticket, please be sure to collect as much information about the issue as possible first. If more information will be needed to process the issue, you should reply to the user asking for that additional information and make sure it is included in the ticket. Issues like these should be considered a higher priority:</p> <ul> <li>Image does not boot</li> <li>Image is corrupt</li> <li>Packages in the image are corrupt</li> <li>SDcard or eMMc support is not functioning as expected</li> </ul> <p> What should you do if you run into an issue on the forum?</p> <ul> <li> If the issues is affecting a lot of people, you can create a Jira ticket for the issue to make sure it is reported and seen by developers.</li> <li> If you report an issue and you feel it is important, after 8 weeks you can tag (@Tenkawa) in an reply to the ticket and ask for him to review. </li> <li> If the issue is important it will be directed to management. If it is deemed not important, you will get a reply stating that we do not have a timeline for the fix and that it will be handled by volunteers when/if possible.</li> </ul> <p>What should you do if there is a long standing Jira ticket?</p> <ul> <li>If you see an issue and you feel it is important, after 8 weeks you can tag (@Tenkawa) in an reply to the ticket and ask for him to review. </li> <li> If the issue is important it will be directed to management, if it is deemed not important, you will get a reply stating that we don't have a timeline for the fix and that it will be handled by volunteers when possible.</li> </ul> <p> Losing support status: </p> <p>     As mentioned in the board support rules the support status of a board will be revoked for at least the current and upcoming release cycle(s) if a \"must\" of the Maintaining section above is not fulfilled. </p> <p> As an example: August 30th is release date for 22.08 release, sign-off dead line is 21th. If maintainer misses the RC sign-off window the board is demoted to CSC for both 22.08 and 22.11 releases. </p> <p>     The development team may grant exceptions on their discretion. </p> <p> Armbian's assistance: </p> <p>If you have questions about maintainer-ship or want to learn more deeper insights about the build framework and such Armbian will provide you with all information in best-effort. If time allows we can explain and teach you personally various aspects about the project. Otherwise, if  you want to learn more about the build framework, dive in, play with it and read the documenenation. Also if you have other concerns please do not hesitate to reach out via forums, IRC or Discord. Armbian cares about the people who care about Armbian\u00a0 </p>"},{"location":"Community_Forums/","title":"Forums","text":"<p>https://forum.armbian.com/</p> <p></p>"},{"location":"Community_Github/","title":"Main project repositories","text":""},{"location":"Community_Github/#armbian-build","title":"Armbian Build","text":"<p>armbian/build</p> <p>Framework can build generic Armbian or custom Linux image.</p>"},{"location":"Community_Github/#armbian-config","title":"Armbian Config","text":"<p>armbian/configng</p> <p>Utility for configuring:</p> <ul> <li>hardware, </li> <li>adjusting services,</li> <li>installing applications.</li> </ul>"},{"location":"Community_Github/#armbian-os","title":"Armbian OS","text":"<p>armbian/os</p> <p>Armbian OS assembly line:</p> <ul> <li>daily rolling releases for supported build targets</li> <li>point releases for supported build targets</li> </ul>"},{"location":"Community_Github/#armbian-community","title":"Armbian Community","text":"<p>armbian/community</p> <p>Armbian OS community assembly line:</p> <ul> <li>weekly rolling releases for build targets without a dedicated mainteiner.</li> </ul>"},{"location":"Community_Github/#armbian-distribution","title":"Armbian Distribution","text":"<p>armbian/distribution</p> <p>Armbian OS with pre-installed applications:</p> <ul> <li>HomeAssistant,</li> <li>OpenHab,</li> <li>Kali Linux, </li> <li>OpenMediaVault</li> </ul>"},{"location":"Community_IRC/","title":"Social media","text":""},{"location":"Community_IRC/#armbian-on-x-and-mastodon","title":"Armbian on X and Mastodon","text":"<p>Armbian short announcements are done via \ud835\udd4f (formerly known as Twitter): https://twitter.com/armbian and https://fosstodon.org/@armbian</p>"},{"location":"Community_IRC/#irc-channel-discord-matrix","title":"IRC Channel / Discord / Matrix","text":""},{"location":"Community_IRC/#overview","title":"\ud83d\udc4f Overview","text":"<p>As announced in the forums everyone interested can communicate in realtime using the internet relay chat (or IRC for short). Well known IRC clients for CLI are Weechat or Irssi and for GUI Hexchat or Konversation. Mature clients for Matrix: Element or FluffyChat.  </p> <p>Besides that communication is also possible via Discord or Matrix (closed beta).</p>"},{"location":"Community_IRC/#how-to-connect","title":"\ud83d\udd0c How to connect","text":""},{"location":"Community_IRC/#irc","title":"IRC","text":"<p>Libera network:</p> <ul> <li>Server: <code>irc.libera.chat</code> </li> <li>Ports: <code>6697</code> / non-encrypted: <code>6667</code> </li> <li>Channels: as listed below</li> </ul> <p>OFTC network:</p> <ul> <li>Server: <code>irc.oftc.net</code> </li> <li>Ports: <code>6697</code> / non-encrypted: <code>6667</code> </li> <li>Channels: <code>#armbian</code> and <code>#armbian-announcements</code> are available only</li> </ul> <p>In order to enter main <code>#armbian</code> channels registration with Nickserv is mandatory on Libera. Check Libera Chat documentation for further information.</p>"},{"location":"Community_IRC/#discord","title":"Discord","text":"<p>Simply click here: https://discord.com/invite/armbian </p> <p>Channels starting with <code>#armbian-</code> are relayed between Discord and Libera IRC so it does not matter if you join IRC or Discord as both ends receive your messages. Check <code>#welcome-and-rules</code> for more information. The main <code>#armbian</code> channel and <code>#armbian-announcements</code> are relayed between Discord, Libera, OFTC and Matrix.</p>"},{"location":"Community_IRC/#matrix-closed-beta","title":"Matrix (closed beta)","text":"<ul> <li>Server: <code>matrix.armbian.com</code></li> <li>Channels: <code>#armbian:matrix.armbian.com</code> and <code>#armbian-announcements:matrix.armbian.com</code> are available only</li> <li>To receive an invitation for former please ping either Lanefu or Werner with your Matrix handle in any known ways to communicate like the chat options above or forums. Once in feel free to invite others by yourself.</li> </ul>"},{"location":"Community_IRC/#rules","title":"\ud83d\uded1 Rules","text":"<p>Forums registration terms and rules apply for our chats: https://forum.armbian.com/terms</p>"},{"location":"Community_IRC/#channels-depending-on-platform-only-a-limited-selection-might-be-available","title":"\ud83d\udcac Channels (depending on platform only a limited selection might be available)","text":"<ul> <li><code>#armbian</code> is the project\u2019s main channel. Issue tracking, peer-to-peer user support or upcoming release planning talks.</li> <li><code>#armbian-announcements</code> : important messages from the Armbian team. You definitely want to idle here. Moderated channel</li> <li><code>#armbian-devel</code> : build engine development topics</li> <li><code>#armbian-desktop</code> : desktop environment development</li> <li><code>#armbian-csc</code> unsupported/stating board talk</li> <li><code>#armbian-allwinner</code> Allwinner-related SoC talk</li> <li><code>#armbian-amlogic</code> Amlogic-related SoC talk</li> <li><code>#armbian-broadcom</code> Broadcom-related SoC talk</li> <li><code>#armbian-rockchip</code> Rockchip-related SoC talk</li> <li><code>#armbian-offtopic</code> General chit chat, whatever that does not fit other channels</li> <li><code>#armbian-commits</code> Whenever a new interaction with a repository on Github happens it will be announced. Moderated channel</li> </ul>"},{"location":"Community_IRC/#services","title":"\ud83d\udc6e Services","text":"<p>Besides the services offered by IRC (like Nickserv or Chanserv) Armbian has set up some own services (on Libera only).  </p> <p><code>ArmbianGithub</code></p> <ul> <li>Has the purpose to fill #armbian-commits channel</li> </ul> <p><code>DC-IRC</code></p> <ul> <li>Has the purpose to relay messages between the IRC networks and Discord. Applies for all channels beginning with <code>#armbian-</code> as well as <code>#armbian</code>.</li> </ul> <p><code>ArmbianHelper</code></p> <ul> <li>Allows searching forums via Google API (not very precise though)<ul> <li>Example: <code>,g Allwinner H6 panfrost</code></li> </ul> </li> <li>A few more minor commands, mostly used by staff or do not need introduction<ul> <li><code>.nonprofit</code>, <code>.sed</code>, <code>.contribute</code>, <code>.rtfm</code>, <code>.fortune</code>, <code>.sunxi</code>, <code>.meson</code>, <code>help</code>, <code>help irc</code>, <code>.tvboxes</code></li> </ul> </li> <li>Translation for non-native English speakers<ul> <li>Simply start your sentence with <code>--</code> at the beginning and the bot will translate your message regardless of the source language into English. Note: This services will be activated manually on demand (like planned meetings for example) since its backend generates cost.</li> </ul> </li> </ul>"},{"location":"Community_IRC/#faq","title":"\u2754 FAQ","text":"<ul> <li>Why are there so many people in the channel and nobody is talking?  <ul> <li>It is pretty common for community IRC channels for people to simply idle there. Many also using so called IRC bouncers https://en.wikipedia.org/wiki/BNC_(software) that keeps their connection to the channel alive to act like an answering machine.</li> </ul> </li> </ul> <ul> <li>I wrote \u2018Hi\u2019 but nobody answered. How do I get support there?<ul> <li>Probably there is nobody around at the time. Keep in mind that all users are spread around the globe and therefore living in many different time zones. It is a common habit to simply state your question or issue and then wait patiently for an answer. Depending how complex this may take up to a few hours because most Armbian contributors have detailed knowledge in a specific board family only.</li> </ul> </li> <li>Is the chat history public as well?<ul> <li>Yes. All conversation is logged. These logs are open to the public. You can find them here: http://irc.armbian.com</li> </ul> </li> <li>Why do some people have odd hostnames like <code>@armbian/staff/lanefu</code> or <code>@user/username</code>?<ul> <li>These hostnames are so called project affiliation cloaks. These are meant to show a users affiliation to a specific project and their role there.</li> </ul> </li> <li>Can I have that too?<ul> <li>Yes. An Armbian affiliation cloak can be requested from Werner either via forums or IRC. They usually will be granted if you are a well known member in forums, a contributor via Github or donated to the project. Make sure you identified yourself to Nickserv beforehand.  </li> </ul> </li> <li>How can I protect my nickname so nobody can spoof me?  <ul> <li>Register your nick with Libera\u2019s Nickserv service. Check https://libera.chat/guides/registration   Even though it is not mandatory you should register and identify with the services as other channels for example may not allow unregistered users to chat or join at all as anti-spam measure.</li> </ul> </li> <li>Why do some users have voice (+v) in channel?<ul> <li>As mentioned in forums \u201call contributors to the project, regardless if forums staff, contributor on Github or well known and longtime active user\u201d may get voice on request.</li> </ul> </li> </ul> <ul> <li>Should I add away to my nick if I am AFK? Like Werner|away<ul> <li>No. Please use the <code>/away [reason]</code> command as intended. For an explanation please have a look at the ZNC Wiki.</li> </ul> </li> </ul>"},{"location":"Community_IRC/#bottom-line","title":"\ud83d\udc49 Bottom line","text":"<p>If you have any questions, comments regarding the IRC channels and/or services or found an issue in this documentation for think you can enhance it get in touch with Werner either via forums, IRC or Discord.</p>"},{"location":"Developer-Guide_Adding-Board-Family/","title":"Adding a new board or board family","text":"<p>There are no detailed instructions on how to add a new board or even a whole new board family to the build script yet. However there are a few commits / pull requests that give clues how to achieve that like</p> <ul> <li>https://github.com/armbian/build/pull/3176/files</li> <li>https://github.com/armbian/build/pull/3138/files</li> </ul>"},{"location":"Developer-Guide_Build-Options/","title":"Build commands","text":""},{"location":"Developer-Guide_Build-Options/#kernel","title":"kernel","text":"<p>Builds kernel and device tree (where applicable) and places it to the <code>output/debs</code></p> <p>Usage: Bash<pre><code>./compile.sh kernel BOARD=nanopi-r5c BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#dts-check","title":"dts-check","text":"<p>Validate dts files and improve board &amp; patch development overall.</p> <p>This option validates the dts/dtb file for the selected board against the device tree bindings and outputs the validation logs to the user. It can be used when adding a new board, developing or improving a dts file.</p> <p>Usage: Bash<pre><code>./compile.sh dts-check BOARD=nanopi-r5c BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#inventory-boards","title":"inventory-boards","text":"<p>Outputs a one-board-per-line CSV inventory of boards.</p> <p>Sets <code>TARGETS_FILE</code> to something that doesn\u2019t exist, so the <code>default-targets.yaml</code> is used (so same list for everyone, save for userpatched-boards)</p> <p>Usage: Bash<pre><code>./compile.sh inventory-boards\n</code></pre> Outputs /info/boards-inventory.csv</p>"},{"location":"Developer-Guide_Build-Options/#kernel-dtb","title":"kernel-dtb","text":"<p>Builds only DTB and outputs full preprocessed dts source</p> <p>Outputs preprocessed DTS source for the board in question to <code>output/</code> also outputs the same preprocessed DTS source, ran through <code>dtc</code> with input and output DTS formats for \u201cnormalized\u201d comparisons</p> <p>Usage: Bash<pre><code>./compile.sh kernel-dtb BOARD=xxxxx BRANCH=edge\n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#rewrite-uboot-patches","title":"rewrite-uboot-patches","text":"<p>Prepares git, applies patches to git, and rewrites them back from git same as kernel, it does git archeology for mbox-less patches, etc.</p> <ul> <li>uboot-patches-to-git alias is also added, but my guess is that the rewrite is more useful.</li> <li>refactor a common config function for both kernel and uboot.</li> </ul> <p>Usage: Bash<pre><code>./compile.sh rewrite-uboot-patches BOARD=xxxx BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#targets","title":"targets","text":"<p>Generates output/info/git_sources.json file containing URL, branch, and commit hash combo.</p> <p>The easiest way to generate file for all devices is to run <code>./compile.sh targets</code>. Then, at the time of release, we will copy the output/info/git_sources.json file to config/sources/git_sources.json. Once the file is copied, the hash information from the file will be used to fetch resources for git repositories where branches are specified instead of tags or commits.</p> <p>Usage: Bash<pre><code>./compile.sh targets\n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#build-options","title":"Build options","text":"<p>These parameters are meant to be applied to the <code>./compile.sh</code> command. They are all optional.  They can also be added to your build configuration file to save time. Default values are marked bold if applicable. </p>"},{"location":"Developer-Guide_Build-Options/#main-options","title":"Main options","text":"<ul> <li>NETWORKING_STACK ( string )     - network-manager     - systemd-networkd     - none (to not-add any networking extensions)</li> </ul> <p>Installs desired networking stack. If the parameter is undefined, it sets <code>systemd-networkd</code> for minimal images (MINIMAL=yes) and <code>network-manager</code> for the rest. Time synchronization is also changed; chrony is installed with network-manager, while systemd-timesyncd is used with systemd-networkd. In both cases, we control network settings using Netplan.</p> <ul> <li>DOCKER_ARMBIAN_BASE_IMAGE ( string )     - ubuntu:jammy     - ubuntu:noble     - debian:bookworm</li> </ul> <p>Defines the build host when using a Docker container (default). Here, you can see which other options are available.</p> <ul> <li>CI ( string )<ul> <li>true</li> <li>false</li> </ul> </li> </ul> <p>If enabled (<code>true</code>), the Docker build container will receive Docker credentials from the host  (<code>${HOME}/.docker/config.json</code>) and the <code>OCI_TARGET_BASE</code> environment variable.</p> <ul> <li>OCI_TARGET_BASE ( string )<ul> <li>url/to/container_registry/path</li> <li>${GHCR_SOURCE}/armbian/* (GHCR_SOURCE is defined in <code>lib/functions/configuration/main-config.sh</code>)</li> </ul> </li> </ul> <p>Select the target for pull/push OCI cached images. If not set, default is used.</p> <ul> <li>GHCR_MIRROR_ADDRESS (string)</li> </ul> <p>The default mirror address for ghcr.io, set by <code>GHCR_MIRROR=dockerproxy</code>, is ghcr.dockerproxy.com. When this address is unavailable, an alternative address can be set with <code>GHCR_MIRROR_ADDRESS</code>.</p> <p>Example: Text Only<pre><code>./compile.sh GHCR_MIRROR=dockerproxy GHCR_MIRROR_ADDRESS=ghcr.libcuda.so\n</code></pre></p> <ul> <li>KERNEL_COMPILER (string)</li> </ul> <p>The compiler used to compile the kernel. Usually, this option is set by the board config, but it can be set to <code>clang</code> to use LLVM to compile the kernel.</p> <p>Example: Text Only<pre><code>./compile.sh KERNEL_COMPILER=clang\n</code></pre></p> <ul> <li>OPENSSHD_REGENERATE_HOST_KEYS (boolean)     - false (skip armbian-firstrun\u2019s OpenSSH host keys deletion and regeneration (eg: to let cloud-init set the SSH host keys)     - true (execute armbian-firstrun\u2019s OpenSSH host keys deletion + regeneration)</li> </ul> <p>Manage OpenSSH host key regeneration at armbian-firstrun service. </p> <p>Example: Text Only<pre><code>./compile.sh OPENSSHD_REGENERATE_HOST_KEYS=false\n</code></pre></p>"},{"location":"Developer-Guide_Build-Options/#build-options-below-need-to-be-retested-and-added-above-could-be-deprecated","title":"Build options below need to be retested and added above (COULD BE DEPRECATED)","text":"<p> DO NOT USE! Obsolete documentation, new documentation in progress. </p> <ul> <li>BUILD_ONLY (comma-separated list): defines what artifacts should be built. The default value is an empty string - it will build all artifacts. Changing this option can be useful to build partial artifacts only.     - u-boot: build U-Boot     - kernel: build kernel     - armbian-config: build Armbian config     - armbian-zsh: build Armbian zsh     - plymouth-theme-armbian: build Armbian Plymouth theme     - armbian-firmware: build Armbian firmware     - armbian-bsp: build Armbian board support package     - chroot: build additional packages     - bootstrap: build bootstrap package     - default: build full OS image for flashing</li> <li>KERNEL_CONFIGURE ( string or boolean ):     - prebuilt: use precompiled packages (only for maintained hardware)     - yes: automatically call kernel\u2019s <code>make menuconfig</code> (add or remove modules or features)     - no: use provided kernel configuration provided by Armbian     - leave empty to display the selection dialog each time</li> <li>CLEAN_LEVEL (comma-separated list): defines what should be cleaned. Default value is <code>\"make,debs\"</code> - clean sources and remove all packages. Changing this option can be useful when rebuilding images or building more than one image     - make-atf = make clean for ATF, if it is built.     - make-uboot = make clean for uboot, if it is built.     - make-kernel = make clean for the kernel if it is built. very slow. important: \u201cmake\u201d by itself has been disabled since Armbian now knows how to handle Make timestamping.         - debs, alldebs = delete all packages in \u201c./output/debs\u201d     - images = delete \u201c./output/images\u201d     - cache = delete \u201c./output/cache\u201d     - sources: delete <code>cache/sources</code> (all downloaded sources)     - oldcache = remove old cached rootfs except for the newest 8 files     - extras: delete additional packages for the current release in <code>output/debs/extra</code></li> <li>REPOSITORY_INSTALL (comma-separated list): list of core packages that will be installed from the repository     - Available options: <code>u-boot</code>, <code>kernel</code>, <code>bsp</code>, <code>armbian-bsp-cli</code>,<code>armbian-bsp-desktop</code>,<code>armbian-desktop</code>,<code>armbian-config</code>, <code>armbian-firmware</code>     - Set to \u201c\u201d to use packages one from local output or build if not available</li> <li>KERNEL_KEEP_CONFIG ( yes | no ):     - yes: use kernel config file from previous compilation for the same branch, device family, and version     - no: use default or user-provided config file  </li> <li>BUILD_MINIMAL ( yes | no ):     - yes: build a bare CLI image suitable for application deployment. This option is not compatible with <code>BUILD_DESKTOP=\"yes\"</code> and <code>BUILD_EXTERNAL=\"yes\"</code>     - no: default CLI package selection</li> <li>BUILD_DESKTOP ( yes | no ):     - yes: build an image with a minimal desktop environment     - no: build image with console interface only  </li> <li>EXTERNAL ( yes | no ):     - yes: compile and install extra applications and firmware  </li> <li>BSPFREEZE ( yes | no ):      - yes: freeze (from update) armbian packages when building images (U-Boot, kernel, DTB)  </li> <li>INSTALL_HEADERS ( no | yes ):     - yes: install kernel headers  </li> <li>EXTERNAL_NEW ( no | prebuilt | compile ):     - prebuilt: install extra applications from the repository     - compile: compile extra applications in chroot  </li> <li>CREATE_PATCHES ( yes | no )  Warning: This option is deprecated and may be removed in future releases - use the new <code>kernel-patch</code> / <code>uboot-patch</code> / <code>atf-patch</code> CLI commands instead.     - yes: prompt right before the compilation starts to make changes to the source code for both U-Boot and kernel. From these changes, patch files will be created and placed in the <code>output</code> directory. If you want these patches included in a normal run (without CREATE_PATCHES to say), these files must be copied to the appropriate directories. Also, see user-provided patches.</li> <li>BUILD_ALL ( yes | no | demo ): cycle through all available board and kernel configurations and make images for all combinations  </li> <li>CARD_DEVICE ( /dev/sdX ): set to the device of your SD card. The image will be burned and verified using Etcher for CLI.</li> <li>EXT=rkdevflash to flash Rockchip images to eMMC either during image build or separately with flash CLI command (only works bare Linux, not Docker)</li> <li>CRYPTROOT_ENABLE ( yes | no ): enable LUKS encrypted rootfs     - <code>CRYPTROOT_PASSPHRASE=\"MYSECRECTPASS\"</code> mandatory     - <code>CRYPTROOT_SSH_UNLOCK=yes</code> Default: <code>yes</code>     - <code>CRYPTROOT_SSH_UNLOCK_PORT=2222</code> Default: <code>2022</code>     - <code>CRYPTROOT_PARAMETERS=\"custom cryptsetup options\"</code> Default: <code>--pbkdf pbkdf2</code> (May not contain <code>=</code>; separate with spaces)     - Note: This function might not work well with all distributions. Debian Buster and Stretch were tested. For building under Docker, you have to use privileged mode, which can be enabled in <code>userpatches/config-docker</code>.     - Warning: This feature was added as a community contribution and is mostly functional. Under some circumstances, though, the prompt will not be shown. Therefore, it should be considered experimental. Check here and here     - Hint: If you want to do the encryption part from scratch, check out this forum post.  </li> </ul>"},{"location":"Developer-Guide_Build-Options/#hidden-options-to-minimize-user-input-for-build-automation","title":"Hidden options to minimize user input for build automation","text":"<ul> <li>BOARD ( <code>string</code> ): set the name of the board manually to skip the dialog prompt</li> <li>BRANCH ( <code>legacy</code> | <code>current</code> | <code>edge</code> ): set kernel and U-Boot branch manually to skip dialog prompt; some options may not be available for all devices</li> <li>RELEASE ( <code>bullseye</code> | <code>bookworm</code> | <code>jammy</code> ): set OS release manually to skip dialog prompt; use this option with <code>KERNEL_ONLY=yes</code> to create board support package</li> <li>ARMBIAN_CACHE_ROOTFS_PATH ( <code>string</code> ): bind mount cache/rootfs to defined folder</li> <li>ARMBIAN_CACHE_TOOLCHAIN_PATH ( <code>string</code> ): bind mount cache/toolchain path to defined folder</li> </ul>"},{"location":"Developer-Guide_Build-Options/#hidden-options-for-advanced-users-default-values-are-marked-bold","title":"Hidden options for advanced users (default values are marked bold)","text":"<ul> <li>EXPERT ( yes | no ): show development features and boards regardless of their status in interactive mode</li> <li>USERPATCHES_PATH ( userpatches/ ): set alternate path for the location of the <code>userpatches</code> folder</li> <li>USE_CCACHE ( yes | no ): use a C compiler cache to speed up the build process</li> <li>PRIVATE_CCACHE ( yes | no ): use <code>$DEST/ccache</code> as ccache home directory</li> <li>SKIP_EXTERNAL_TOOLCHAINS ( yes | no ): don\u2019t download and use Linaro toolchains, by default placed in cache/toolchain (and configurable with ARMBIAN_CACHE_TOOLCHAIN_PATH)</li> <li>PROGRESS_DISPLAY ( none | plain | dialog ): way to display output of verbose processes - compilation, packaging, debootstrap</li> <li>PROGRESS_LOG_TO_FILE ( yes | no ): duplicate output, affected by the previous option, to log files <code>output/debug/*.log</code></li> <li>NO_APT_CACHER ( yes | no ): disable usage of APT cache. Default <code>yes</code> in containers, but can be overridden</li> <li>DISABLE_IPV6 ( true | false ): The distant future, the year Two-Thousand.  Set false to allow Aria2c to use a modern ip protocol.</li> <li>NO_HOST_RELEASE_CHECK ( yes | no ): overrides the check for a supported host system</li> <li>USE_MAINLINE_GOOGLE_MIRROR ( yes | no ): use the <code>googlesource.com</code> mirror for downloading mainline kernel sources, which may be faster than <code>git.kernel.org</code> depending on your location</li> <li>USE_GITHUB_UBOOT_MIRROR ( yes | no ): use an unofficial GitHub mirror for downloading mainline U-Boot sources, may be faster than <code>git.denx.de</code> depending on your location</li> <li>SYNC_CLOCK ( yes | no ): sync system clock on builder before start image creation process</li> <li>OFFLINE_WORK ( yes | no ): skip downloading and updating sources and time and host check. Set to \u201cyes,\u201d and you can collect packages without accessing the internet</li> <li>FORCE_USE_RAMDISK ( yes | no ): overrides autodetect for using tmpfs in new debootstrap and image creation process</li> <li>FIXED_IMAGE_SIZE ( <code>integer</code> ): create an image file of this size (in megabytes) instead of minimal</li> <li>BOOTSIZE ( <code>integer</code> 96 ): set size (in megabytes) for separate /boot filesystem. Used if ROOTFS_TYPE set to non-ext4</li> <li>COMPRESS_OUTPUTIMAGE (comma-separated list): create a compressed archive with an image file and GPG signature for redistribution     - sha: generate SHA256 hash for image     - gpg: sign image using gpg     - 7z: compress image, hash, and signature to 7z archive     - gz: compress image only using gz format     - xz: compress image only using xz format     - yes: compatibility shortcut for <code>sha,gpg,7z</code></li> <li>IMAGE_XZ_COMPRESSION_RATIO ( 1 - 9 ) images compression levels when using xz compressor. Beware of memory consumption when going higher</li> <li>SEVENZIP ( yes | no ): create .7z archive with extreme compression ratio instead of .zip</li> <li>BUILD_KSRC ( yes | no ): create kernel source packages while building\u2026</li> <li>INSTALL_KSRC ( yes | no ): \u2026 and pre-install these kernel sources on the image </li> <li>ROOTFS_TYPE ( ext4 | f2fs | btrfs | nilfs2 | xfs | nfs ): create image with different root filesystems instead of default <code>ext4</code>. Requires setting <code>FIXED_IMAGE_SIZE</code> to something smaller than the size of your SD card for <code>F2FS</code></li> <li>BTRFS_COMPRESSION ( lzo | none | zlib | zstd ): when choosing <code>ROOTFS_TYPE=btrfs</code>, select <code>btrfs</code> filesystem compression method and compression level. By default, the compression is <code>zlib</code>. When selecting <code>zstd</code> or setting zlib compression level(<code>zlib:[1-9]</code>) user must ensure kernel version is &gt;=4.14.x. When selecting the zstd compression level (<code>zstd:[1-15]</code>), both the host and the target kernel version must be &gt;=5.1.x since the kernel started supporting the zstd compression ratio only from 5.1 on. Note: The script does not check the legality of the input variable (compression ratio). Input like <code>zlib:1234</code> is legal to the script but illegal to the kernel. Beware that setting this option does affect image creation only (shrinking disk size) and will not adjust <code>/etc/fstab</code>, so it is up to the user to later edit <code>/etc/fstab</code> if compression in daily operation is also wanted (beware of severe performance penalties with random IO patterns and heavy compression algorithms!).</li> <li>FORCE_BOOTSCRIPT_UPDATE ( yes | no ):      - yes: force bootscript to get updated during bsp package upgrade</li> <li>NAMESERVER ( <code>IPv4 address</code> ): the DNS resolver used inside the build chroot. Does not affect the final image. Default: <code>1.0.0.1</code></li> <li>DOWNLOAD_MIRROR ( <code>china</code> | <code>bfsu</code> ): select download mirror for <code>toolchain</code> and <code>debian/ubuntu packages</code>     - <code>china</code>: use <code>mirrors.tuna.tsinghua.edu.cn</code>; it will be very fast thanks to Tsinghua University     - <code>bfsu</code>: use <code>mirrors.bfsu.edu.cn</code>, the mirror of Beijing Foreign Studies University     - leave empty to use official source</li> <li>ARMBIAN_MIRROR (auto): override automated mirror selection, example \u2018ARMBIAN_MIRROR=\u201dhttps://yourlocalmirror.com\u201d\u2018</li> <li>MAINLINE_MIRROR ( <code>google</code> | <code>tuna</code> | <code>bfsu</code> ): select mainline mirror of <code>linux-stable.git</code>     - <code>google</code>: use the mirror provided by Google, the same as <code>USE_MAINLINE_GOOGLE_MIRROR=yes</code>     - <code>tuna</code>: use the mirror provided by Tsinghua University     - <code>bfsu</code>: use the mirror provided by Beijing Foreign Studies University, which is similar to <code>tuna</code>     - leave empty to use the official <code>git.kernel.org</code>, which may be very slow for mainland China users</li> <li>UBOOT_MIRROR \uff08 <code>github</code> | <code>gitee</code> : select mainline mirror of <code>u-boot.git</code>     - <code>github</code>: use the mirror provided by github, the same as <code>USE_GITHUB_UBOOT_MIRROR=yes</code>     - <code>gitee</code>: use the mirror provided by Gitee, a Chinese git services     - leave empty to use the official <code>source.denx.de</code>, which may be very slow for mainland China users</li> <li>GITHUB_MIRROR ( <code>fastgit</code> | <code>gitclone</code> | <code>cnpmjs</code> ): select download mirror for GitHub hosted repository     - <code>fastgit</code>: use the mirror provided by fastgit.org     - <code>gitclone</code>: use the mirror provided by gitclone.com     - <code>cnpmjs</code>: use the mirror provided by cnpmjs.org     - leave empty to connect directly to GitHub, which may be very slow for mainland China users</li> <li>REGIONAL_MIRROR ( <code>china</code> ): select mirrors based on regional setting, will not overwrite explicitly specified mirror option     - <code>china</code>: MAINLINE_MIRROR=<code>tuna</code>, UBOOT_MIRROR=<code>gitee</code>, GITHUB_MIRROR=<code>fastgit</code>, DOWNLOAD_MIRROR=<code>china</code>     - leave empty to use default settings</li> <li>USE_TORRENT ( yes | no ): use torrent to download toolchains and rootfs</li> <li>ROOT_FS_CREATE_ONLY ( yes | no ): set to yes to force local cache creation</li> <li>EXTRAWIFI ( yes | no ): include several drivers for WiFi adapters</li> <li>WIREGUARD ( yes | no ): include Wireguard for kernels before it got upstreamed to mainline. Will lose functionality soon.</li> <li>AUFS ( yes | no ): include support for AUFS</li> <li>SKIP_BOOTSPLASH ( yes | no ): use kernel bootsplash. Disable in case of troubles</li> <li>CONSOLE_AUTOLOGIN ( yes | no ): automatically login as root for local consoles. Disable if your security threat model requires.</li> <li>EXT (<code>fake-vcgencmd</code>): execute extension during the build     - <code>fake-vcgencmd</code>: include fake vcgencmd to monitor and control boards from Android</li> <li>INCLUDE_HOME_DIR ( yes | no ): include directories created inside /home in final image.</li> </ul>"},{"location":"Developer-Guide_Build-Preparation/","title":"Building Armbian","text":""},{"location":"Developer-Guide_Build-Preparation/#what-do-i-need","title":"What do I need?","text":"<ul> <li>x86/x64/aarch64 machine running any OS; at least 4G RAM, SSD, quad core (recommended),</li> <li>VirtualBox or similar virtualization software (highly recommended with a minimum of 25GB hard disk space for the virtual disk image)</li> <li>The officially supported compilation environment is Ubuntu Jammy 22.04.x amd64 only!</li> <li><code>binfmt_misc</code> kernel module (some ubuntu-cloud images do not have this module.  Switch to a generic kernel if that is the case.)</li> <li>installed basic system, OpenSSH and Samba (optional)</li> <li>no spaces in full path to the build script location allowed</li> <li>superuser rights (configured <code>sudo</code> or root shell).</li> </ul> <p>Not officially supported build environments from community contributions:</p> <ul> <li>Docker environment is also supported for building kernels and full OS images,</li> <li>Multipass</li> </ul> <p>Please note that system requirements (both hardware and OS/software) may differ depending on the build environment (Docker, Virtualbox, native).</p>"},{"location":"Developer-Guide_Build-Preparation/#how-to-start","title":"How to start?","text":""},{"location":"Developer-Guide_Build-Preparation/#native-and-virtualbox-environments","title":"Native and VirtualBox environments:","text":"<p>Login as root and run:</p> Bash<pre><code>apt-get -y -qq install git  \ngit clone --depth=1 --branch=main https://github.com/armbian/build  \ncd build  \n</code></pre> <p>Run the script</p> Text Only<pre><code>./compile.sh\n</code></pre> <p>Make sure that full path to the build script does not contain spaces.</p>"},{"location":"Developer-Guide_Build-Preparation/#providing-build-configuration","title":"Providing build configuration","text":"<p>After the first run of <code>compile.sh</code> a new configuration file <code>config-example.conf</code> and symlink <code>config-default.conf</code> will be created. You may edit it to your needs or create different configuration files using it as a template.</p> <p>Alternatively you can supply options as command line parameters to compile.sh. Example:</p> Text Only<pre><code>./compile.sh BOARD=cubietruck BRANCH=current RELEASE=jammy\n</code></pre> <p>Note: Option <code>BUILD_ALL</code> cannot be set to \u201cyes\u201d via command line parameter. Note: Names for <code>BOARD</code> can be found here by looking at file names. Example: OrangePi 4 = orangepi4.conf = <code>BOARD=orangepi4</code></p>"},{"location":"Developer-Guide_Build-Preparation/#base-and-descendant-configuration","title":"Base and descendant configuration","text":"<p>You can create one base configuration (<code>config-base.conf</code>) and use this in descendant config (<code>config-edge.conf</code>). Three parameters (BRANCH, RELEASE, COMPRESS_OUTPUTIMAGE) will be overwritten.</p> Text Only<pre><code>. ./config-base.conf  \n\nBRANCH=\"edge\"  \nRELEASE=\"bullseye\"  \nCOMPRESS_OUTPUTIMAGE=\"sha,gz\"  \n</code></pre>"},{"location":"Developer-Guide_Build-Preparation/#using-github-actions","title":"Using GitHub actions","text":"<p>If you do not own the proper equipment to build images on your own, you can try to use our official GitHub action.</p>"},{"location":"Developer-Guide_Build-Preparation/#using-alternate-armbian-builder-repos-and-branches","title":"Using alternate armbian builder repos and branches","text":"<p>By default, armbian-builder assumes working from <code>main</code> of <code>https://github.com/armbian/build.git</code>.  If you are working from your own repo / branch, <code>touch .ignore_changes</code> will cause armbian-builder to not attempt a repo checkout.</p>"},{"location":"Developer-Guide_Build-Preparation/#executing-any-bash-statement","title":"Executing any bash statement","text":"<p>Currently, invoking compile.sh will run a monotonous task of building all the components into a final image.</p> <p>In some situation, especially when developing with Kernel or U-Boot, it is handy to run a portion of that great task like:</p> Text Only<pre><code>        # using default profile  \n        ./compile.sh 'fetch_from_repo \"$BOOTSOURCE\" \"$BOOTDIR\" \"$BOOTBRANCH\" \"yes\"'  \n        ./compile.sh 'compile_uboot'  \n</code></pre> <p>You can also dump the variable:</p> Text Only<pre><code>        # using profile of `userpatches/config-my.conf`  \n        ./compile.sh my 'echo $SRC/cache/sources/$BOOTSOURCEDIR'  \n</code></pre> <p>NOTE: please use single quotes to keep the <code>$VAR</code> from early expansion in the command line shell.</p>"},{"location":"Developer-Guide_Building-with-Docker/","title":"Building with Docker","text":""},{"location":"Developer-Guide_Building-with-Docker/#officially-supported-and-tested-method-for-building-with-docker","title":"Officially supported and tested method for building with Docker","text":"<p>This method works for building u-boot and kernel packages as well as building full OS images. Note!  To write fresh-builded image directly to sdcard or other block device you have to enable  Docker run in <code>privileged</code> mode. Uncomment line <code>DOCKER_FLAGS+=(--privileged)</code> in file <code>userpatches\\config-docker.conf</code> or your own docker-config file.</p> <p>Building additional packages (<code>EXTERNAL_NEW</code>) is not supported.</p>"},{"location":"Developer-Guide_Building-with-Docker/#requirements","title":"Requirements","text":"<ul> <li>x86/x64/aarch64/armhf Linux host that supports running a recent Docker daemon. Refer to Docker documentation for details.</li> <li>Docker version 17.06 CE or newer. </li> <li>Enough free disk space on the storage used for Docker containers and named volumes. Named volumes path can be changed using standard Docker utilites,   refer to Docker documentation for details.</li> </ul> <p>Installation (https://docs.docker.com/engine/install/)</p>"},{"location":"Developer-Guide_Building-with-Docker/#details","title":"Details","text":"<p>There are 3 options to start build process:</p> <p>1. By passing configuration file name (<code>config-&lt;conf_name&gt;.conf</code>), stored in <code>userpatches</code> directory, as an argument: Text Only<pre><code>./compile.sh docker &lt;conf_name&gt;\n</code></pre> 2. By passing addtional line arguments to <code>compile.sh</code> after <code>docker</code>: Text Only<pre><code>./compile.sh docker KERNEL_ONLY=yes BOARD=cubietruck BRANCH=current KERNEL_CONFIGURE=yes\n</code></pre> 3. Interactively run inside docker container Text Only<pre><code>./compile.sh docker-shell BOARD=rockpi-4a BRANCH=edge RELEASE=jammy\n</code></pre></p> <p>The process creates and runs a named Docker container <code>armbian</code> with two named volumes <code>armbian-cache</code> and <code>armbian-ccache</code>, and mounts local directories <code>output</code> and <code>userpatches</code>.</p> <p>Options 1 and 2 compile the same as without Docker but in separate environment to prevent changes to the base system.</p> <p>The dockerfile of the created container is placed in <code>userpatches</code> directory, and all container-related options can be changed in <code>userpatches/config-docker.conf</code> file. Templates of both files are located in the <code>config/templates</code> directory.</p>"},{"location":"Developer-Guide_Building-with-Docker/#docker-shell-interactive-mode","title":"docker-shell interactive mode","text":"<p>The docker-shell interactive mode is useful for when you need to do more than just \u201cmake an image.\u201d This mode allows you to edit U-Boot and kernel sources before and after applying patches, investigate compilation errors, and so on.</p> <p>This mode also allows you to manually run individual steps of the build process.</p> <p>First, start docker-shell on the host build system: Text Only<pre><code>@droid:~/armbian$ ./compile.sh docker-shell RELEASE=bullseye BOARD=rockpi-4a BRANCH=edge\n</code></pre> From there, <code>RELEASE=bullseye BOARD=rockpi-4a BRANCH=edge</code> are passed into shell and will be set into envirounment variables. </p> <p>Next, we can simply start building an image: Text Only<pre><code>root@75ec76203b65:~/armbian# ./compile.sh\n</code></pre> Alternatively, you can run any function defined in the compile.sh script.</p> <p>For example, to compile U-Boot, prepare the environment with: Text Only<pre><code>./compile.sh default prepare_host compile_sunxi_tools install_rkbin_tools\n</code></pre> Then, build U-Boot: Text Only<pre><code>./compile.sh default compile_uboot\n</code></pre> To compile only the source code as it is without patching or modifications, run: Text Only<pre><code>./compile.sh default COMPILE_ONLY=yes compile_uboot\n</code></pre> Note that you must enter docker-shell after a docker build, as you must download all of the required toolchains and sourcecodes beforehand.</p>"},{"location":"Developer-Guide_Building-with-Multipass/","title":"Building with Multipass","text":"<p>In order to build an Armbian image from scratch, whether for development purposes or to apply user customizations on top of a base image, a build environment is required. Per the Armbian documentation, Ubuntu 22.04 is the officially supported build platform. </p> <p>Multipass that is designed for quick and painless provisioning of Ubuntu VMs.</p>"},{"location":"Developer-Guide_Building-with-Multipass/#creating-a-vm-and-preparing-for-build","title":"Creating a VM and preparing for build","text":"<p>Multipass is available for macOS, Windows and Linux platforms.</p> <p>Once you have multipass installed, a Jammy (22.04) instance with 4 CPUs, 4GB of RAM and 25GB of space available can be provisioned with a single command:</p> Bash<pre><code>multipass launch --cpus 4 --disk 25G --mem 4G --name jammy\n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#clone-the-build-repo","title":"Clone the build repo","text":"<p>You can run commands direct on the instance to clone the build repo:</p> Bash<pre><code>multipass exec jammy -- bash -c \"git clone --depth 1 https://github.com/armbian/build\" \n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#use-an-instance","title":"Use an instance","text":"<p>Then you can get a shell to the instance and run the build as needed:</p> Bash<pre><code>C:\\&gt; multipass shell armbian\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.4.0-48-generic x86_64)\nLast login: Tue Jan 30 12:23:08 2024 from 172.22.111.1\n# Let's get building!  \nubuntu@armbian:~$ cd build\nubuntu@armbian:~/build$ ./compile.sh BOARD=orangepizero ... etc\n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#share-data-with-an-instance","title":"Share data with an instance","text":"<p>The recommended way to share data between your host and an instance with Multipass is the command:mount Bash<pre><code>multipass mount /my/dir jammy\nmultipass info jammy\n</code></pre></p> <p>Mounts:         /my/dir =&gt; /my/dir</p> <p>From this point on will be available inside the instance./my/dir</p>"},{"location":"Developer-Guide_Extensions-Hooks/","title":"Extension Hooks","text":"<ul> <li>This file is autogenerated by the armbian/build repository.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#hooks","title":"Hooks","text":"<ul> <li>Hooks are listed in the order they are called.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_family_config","title":"<code>post_family_config</code>","text":"<p>give the config a chance to override the family/arch defaults</p> <p>This hook is called after the family configuration (<code>sources/families/xxx.conf</code>) is sourced. Since the family can override values from the user configuration and the board configuration, it is often used to in turn override those.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_tweaks_post_family_config</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#user_config","title":"<code>user_config</code>","text":"<p>Invoke function with user override</p> <p>Allows for overriding configuration values set anywhere else. It is called after sourcing the <code>lib.config</code> file if it exists, but before assembling any package lists.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#extension_prepare_config","title":"<code>extension_prepare_config</code>","text":"<p>allow extensions to prepare their own config, after user config is done</p> <p>Implementors should preserve variable values pre-set, but can default values an/or validate them. This runs after user_config. Don\u2019t change anything not coming from other variables or meant to be configured by the user.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_aggregate_packages","title":"<code>post_aggregate_packages</code>","text":"<p>For final user override, using a function, after all aggregations are done</p> <p>Called after aggregating all package lists, before the end of <code>compilation.sh</code>. Packages will still be installed after this is called, so it is the last chance to confirm or change any packages.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>user_config_post_aggregate_packages</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_determine_cthreads","title":"<code>post_determine_cthreads</code>","text":"<p>give config a chance modify CTHREADS programatically. A build server may work better with hyperthreads-1 for example.</p> <p>Called early, before any compilation work starts.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_determine_cthreads</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#add_host_dependencies","title":"<code>add_host_dependencies</code>","text":"<p>run before installing host dependencies</p> <p>you can add packages to install, space separated, to ${EXTRA_BUILD_DEPS} here.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#fetch_sources_tools","title":"<code>fetch_sources_tools</code>","text":"<p>fetch host-side sources needed for tools and build</p> <p>Run early to fetch_from_repo or otherwise obtain sources for needed tools.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#build_host_tools","title":"<code>build_host_tools</code>","text":"<p>build needed tools for the build, host-side</p> <p>After sources are fetched, build host-side tools needed for the build.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_install_distribution_specific","title":"<code>pre_install_distribution_specific</code>","text":"<p>give config a chance to act before install_distribution_specific</p> <p>Called after <code>create_rootfs_cache</code> (prepare basic rootfs: unpack cache or create from scratch) but before <code>install_distribution_specific</code> (install distribution and board specific applications).</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_install_distribution_specific</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_install_kernel_debs","title":"<code>pre_install_kernel_debs</code>","text":"<p>called before installing the Armbian-built kernel deb packages</p> <p>It is not too late to <code>unset KERNELSOURCE</code> here and avoid kernel install.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_install_kernel_debs","title":"<code>post_install_kernel_debs</code>","text":"<p>allow config to do more with the installed kernel/headers</p> <p>Called after packages, u-boot, kernel and headers installed in the chroot, but before the BSP is installed. If <code>KERNELSOURCE</code> is (still?) unset after this, Armbian-built firmware will not be installed.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_family_tweaks","title":"<code>post_family_tweaks</code>","text":"<p>customize the tweaks made by $LINUXFAMILY-specific family_tweaks</p> <p>It is run after packages are installed in the rootfs, but before enabling additional services. It allows implementors access to the rootfs (<code>${SDCARD}</code>) in its pristine state after packages are installed.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_customize_image","title":"<code>pre_customize_image</code>","text":"<p>run before customize-image.sh</p> <p>This hook is called before <code>customize-image.sh</code> is executed and before the overlay is mounted. It thus can be used for the same purposes as <code>customize-image.sh</code> without the overlay.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>image_tweaks_pre_customize</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_customize_image","title":"<code>post_customize_image</code>","text":"<p>post customize-image.sh hook</p> <p>Run after the customize-image.sh script is run, and the overlay is unmounted.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>image_tweaks_post_customize</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_post_debootstrap_tweaks","title":"<code>post_post_debootstrap_tweaks</code>","text":"<p>run after removing diversions and qemu with chroot unmounted</p> <p>Last chance to touch the <code>${SDCARD}</code> filesystem before it is copied to the final media. It is too late to run any chrooted commands, since the supporting filesystems are already unmounted.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_debootstrap_tweaks</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_prepare_partitions","title":"<code>pre_prepare_partitions</code>","text":"<p>allow custom options for mkfs</p> <p>Good time to change stuff like mkfs opts, types etc.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>prepare_partitions_custom</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#prepare_image_size","title":"<code>prepare_image_size</code>","text":"<p>allow dynamically determining the size based on the $rootfs_size</p> <p>Called after <code>${rootfs_size}</code> is known, but before <code>${FIXED_IMAGE_SIZE}</code> is taken into account. A good spot to determine <code>FIXED_IMAGE_SIZE</code> based on <code>rootfs_size</code>. UEFISIZE can be set to 0 for no UEFI partition, or to a size in MiB to include one. Last chance to set <code>USE_HOOK_FOR_PARTITION</code>=yes and then implement create_partition_table hook_point.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_prepare_image_size</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_create_partitions","title":"<code>post_create_partitions</code>","text":"<p>called after all partitions are created, but not yet formatted</p>"},{"location":"Developer-Guide_Extensions-Hooks/#format_partitions","title":"<code>format_partitions</code>","text":"<p>if you created your own partitions, this would be a good time to format them</p> <p>The loop device is mounted, so ${LOOP}p1 is it\u2019s first partition etc.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_update_initramfs","title":"<code>pre_update_initramfs</code>","text":"<p>allow config to hack into the initramfs create process</p> <p>Called after rsync has synced both <code>/root</code> and <code>/root</code> on the target, but before calling <code>update_initramfs</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_update_initramfs</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_umount_final_image","title":"<code>pre_umount_final_image</code>","text":"<p>allow config to hack into the image before the unmount</p> <p>Called before unmounting both <code>/root</code> and <code>/boot</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_umount_final_image</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_umount_final_image","title":"<code>post_umount_final_image</code>","text":"<p>allow config to hack into the image after the unmount</p> <p>Called after unmounting both <code>/root</code> and <code>/boot</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_umount_final_image</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_build_image","title":"<code>post_build_image</code>","text":"<p>custom post build hook</p> <p>Called after the final .img file is built, before it is (possibly) written to an SD writer.</p> <ul> <li>NOTE: this hook used to take an argument ($1) for the final image produced.     - Now it is passed as an environment variable <code>${FINAL_IMAGE_FILE}</code>       It is the last possible chance to modify <code>$CARD_DEVICE</code>.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#run_after_build","title":"<code>run_after_build</code>","text":"<p>hook for function to run after build, i.e. to change owner of <code>$SRC</code></p> <p>Really one of the last hooks ever called. The build has ended. Congratulations.</p> <ul> <li>NOTE: this will run only if there were no errors during build process.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#extension_metadata_ready","title":"<code>extension_metadata_ready</code>","text":"<p>meta-Meta time!</p> <p>Implement this hook to work with/on the meta-data made available by the extension manager. Interesting stuff to process:</p> <ul> <li><code>\"${EXTENSION_MANAGER_TMP_DIR}/hook_point_calls.txt\"</code> contains a list of all hook points called, in order.</li> <li>For each hook_point in the list, more files will have metadata about that hook point.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.orig.md</code> contains the hook documentation at the call site (inline docs),       hopefully in Markdown format.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.compat</code> contains the compatibility names for the hooks.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.exports</code> contains exported environment variables.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.vars</code> contains all environment variables.</li> <li><code>${defined_hook_point_functions}</code> is a map of all the defined hook point functions and their extension information.</li> <li><code>${hook_point_function_trace_sources}</code> is a map of all the hook point functions that were really called during the   build and their BASH_SOURCE information.</li> <li><code>${hook_point_function_trace_lines}</code> is the same, but BASH_LINENO info. After this hook is done,   the <code>${EXTENSION_MANAGER_TMP_DIR}</code> will be removed.</li> </ul>"},{"location":"Developer-Guide_Extensions/","title":"Extensions","text":"<p>\u201cI\u2019m gonna create a <code>prepare_bootloader</code> hook [in core] so we can refactor <code>u-boot</code> [into an extension]\u201d</p> <p>The extensions framework allows the board/family developers, extension authors, and users to extend the Armbian build system without overloading the core with specific functionality.</p> <p>It\u2019s a simple framework, written in Bash, that works based on function naming conventions. It provides the core and the extensions with tracing and debugging, (error control,?) inline documentation and very simple dependency resolution.</p>"},{"location":"Developer-Guide_Extensions/#terminology","title":"Terminology","text":"<ul> <li>The \u201ccore\u201d is everything that\u2019s in <code>lib/</code> directory plus <code>compile.sh</code> and some others. It\u2019s the spine of the build system.</li> <li>An \u201cextension\u201d is a separate Bash source file that contains exclusively functions. Extensions live in <code>extensions/</code> or <code>userpatches/extensions/</code> directory, but could one day be in a separate repository too.</li> <li>An \u201cextension method\u201d (a.k.a \u201chook\u201d) is used by the core to call extensions, via <code>call_extension_method()</code>. This will discover all enabled extension methods implementations, order them, and call them one by one.     - The Armbian core already has quite a few of these in strategic spots.     - More are coming as they\u2019re identified.</li> <li>An \u201cextension method implementation\u201d is a function that will be called when it\u2019s extension method is called. It can be defined in extensions, but also in board config, family config, user config, etc.</li> </ul>"},{"location":"Developer-Guide_Extensions/#example","title":"Example","text":""},{"location":"Developer-Guide_Extensions/#core-calls-extensions","title":"Core calls extensions","text":"<p>The Armbian core build system has an extension method called <code>run_after_build</code>, also known as the \u201c<code>run_after_build</code> hook\u201d. You can find it in <code>lib/main.sh</code> around line 546.</p> Bash<pre><code># in lib/main.sh:546\ncall_extension_method \"run_after_build\" [...]\n</code></pre>"},{"location":"Developer-Guide_Extensions/#extension-method-implementation","title":"Extension method implementation","text":"<p>Consider the following function:</p> Bash<pre><code>function run_after_build__say_congratulations() { \n  echo \"Congrats, the build is finished!\"\n}\n</code></pre> <p>Such a function is an \u201cextension method implementation\u201d called <code>say_congratulations</code> for the extension method <code>run_after_build</code>.</p>"},{"location":"Developer-Guide_Extensions/#extension-file","title":"Extension file","text":"<p>A file <code>userpatches/extensions/be-festive.sh</code> containing the above function is an \u201cextension\u201d called <code>be-festive</code>.</p>"},{"location":"Developer-Guide_Extensions/#using-it","title":"Using it","text":"<p>An user of the build system can enable that extension by adding a call to <code>enable_extension \"be-festive\"</code> on his configuration file, or by passing <code>ENABLE_EXTENSIONS=be-festive</code> as a parameter to the build.</p>"},{"location":"Developer-Guide_Extensions/#naming-conventions-and-ordering","title":"Naming conventions and ordering","text":"<p>An extension method implementation is just a Bash function that follows the pattern <code>run_after_build__say_congratulations</code> where</p> <ul> <li><code>run_after_build</code> is the name of the extension method.</li> <li><code>__</code> is a marker/separator \u2013 very important \u2013 two underscores, not one, not three.</li> <li><code>say_congratulations</code> is the name of the extension method implementation, and should be unique.</li> </ul> <p>The system will \u201cmagically\u201d compose a single <code>run_after_build()</code> function, based on all the hook functions that begin with <code>run_after_build__</code>.</p> <p>Hook functions will be sorted by their numerical value; hook functions that do not begin with a number will receive <code>500_</code> prefix automatically.</p> <p>So the examples <code>run_after_build__do_this</code> and <code>run_after_build__500_do_this</code> are equivalent, and will run</p> <ul> <li>sooner than <code>run_after_build__900_do_smth_else</code></li> <li>later than <code>run_after_build__300_do_even_another_thing</code></li> </ul>"},{"location":"Developer-Guide_Extensions/#what-is-an-extension","title":"What is an extension?","text":"<p>A extension is Bash source file that contains exclusively:</p> <ul> <li>function definitions:     - extension method implementation definitions (with <code>__</code> separator)     - other internal functions (for structure and clarity if needed)</li> <li>calls to <code>enable_extension \"another-extension\"</code> at the top of the file.     - that\u2019s a very simple dependency system, one extension can enable another.</li> </ul> <p>Specifically, extension files should not contain any code outside of functions \u2013 they should do nothing when sourced.</p> <p>Extensions can be official Armbian fragments and live in <code>/extensions</code>, or can be user-specific in <code>/userpatches/extensions</code>.</p> <p>An extension could be implemented in any of the following file/dir structures:</p> <ul> <li><code>/extensions/our-ext.sh</code> - an official, single-file extension.</li> <li><code>/userpatches/extensions/my-ext.sh</code> - a user-specific, single-file extension.</li> <li><code>/extensions/our-dir-ext/our-dir-ext.sh</code> - an official, directory-based extension.</li> <li><code>/userpatches/extensions/my-dir-ext/my-dir-ext.sh</code> - a user-specific, directory-based extensions.</li> </ul> <p>The official extensions can be used by boards, family includes, etc, while the user-specific extensions can only be used by userpatches code or via <code>ENABLE_EXTENSIONS=my-ext,my-dir-ext</code> build parameter.</p>"},{"location":"Developer-Guide_Extensions/#single-file-vs-directory-based","title":"Single-file vs Directory-based","text":"<p>They\u2019re the same, except:</p> <ul> <li>Directory-based extensions will be passed a <code>${EXTENSION_DIR}</code> environment variable.</li> <li>That is useful if there are other files/assets that belong together with that extension. An example would be a template file, some configuration file, or other static asset that is directly related to the extension.</li> <li>Using directory-based extensions and <code>${EXTENSION_DIR}</code> allows for easy moving and PR\u2019ing of user extensions.</li> </ul>"},{"location":"Developer-Guide_User-Configurations/","title":"User Configuration","text":""},{"location":"Developer-Guide_User-Configurations/#user-provided-patches","title":"User provided patches","text":"<p>You can add your own patches outside build script. Place your patches inside appropriate directory, for kernel or u-boot. There are no limitations except all patches must have file name extension <code>.patch</code>. User patches directory structure mirrors directory structure of <code>patch</code>. Look for the hint at the beginning of patching process to select proper directory for patches. Example:</p> Text Only<pre><code>[ o.k. ] Started patching process for [ kernel sunxi-edge 4.4.0-rc6 ]\n[ o.k. ] Looking for user patches in [ userpatches/kernel/sunxi-edge ]\n</code></pre> <p>Patch with same file name in <code>userpatches</code> directory tree substitutes one in <code>patch</code>. To replace a patch provided by Armbian maintainers, copy it from <code>patch</code> to corresponding directory in <code>userpatches</code> and edit it to your needs. To disable a patch, create empty file in corresponding directory in <code>userpatches</code>.</p>"},{"location":"Developer-Guide_User-Configurations/#user-provided-configuration","title":"User provided configuration","text":"<p>If file <code>userpatches/lib.config</code> exists, it will be called and can override the particular kernel and u-boot versions. It can also add additional packages to be installed, by adding to <code>PACKAGE_LIST_ADDITIONAL</code>. For a comprehensive list of available variables, look through  <code>lib/configuration.sh</code>. Some examples of what you can change:</p> Text Only<pre><code>PACKAGE_LIST_ADDITIONAL=\"$PACKAGE_LIST_ADDITIONAL python-serial python\" # additional packages\n[[ $LINUXFAMILY == sunxi64 &amp;&amp; $BRANCH == edge ]] &amp;&amp; BOOTBRANCH='tag:v2017.09' # conditionally change u-boot git branch/tag\nKERNELBRANCH=\"tag:v5.4.28\" #always change to this kernel tag\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-kernel-config","title":"User provided kernel config","text":"<p>If file <code>userpatches/linux-$LINUXFAMILY-$BRANCH.config</code> exists, it will be used instead of default one from <code>config</code>. Look for the hint at the beginning of kernel compilation process to select proper config file name. Example:</p> Text Only<pre><code>[ o.k. ] Compiling current kernel [ 5.10.47 ]\n[ o.k. ] Using kernel config provided by user [ userpatches/linux-rockchip64-current.config ]\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-sources-config-overrides","title":"User provided sources config overrides","text":"<p>If file <code>userpatches/sources/$LINUXFAMILY.conf</code> exists, it will be used in addition to the default one from <code>config/sources</code>. Look for the hint at the beginning of compilation process to select proper config file name. Please note that there are some exceptions for LINUXFAMILY like <code>sunxi</code> (32-bit mainline sunxi) and <code>sunxi64</code> (64-bit mainline sunxi)</p> <p>Example:</p> Text Only<pre><code>[ o.k. ] Adding user provided sunxi64 overrides\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-image-customization-script","title":"User provided image customization script","text":"<p>You can run additional commands to customize created image. Edit file:</p> Text Only<pre><code>userpatches/customize-image.sh\n</code></pre> <p>and place your code here. You may test values of variables noted in the file to use different commands for different configurations. Those commands will be executed in a chroot environment just before closing image.</p> <p>To add files to image easily, put them in <code>userpatches/overlay</code> and access them in <code>/tmp/overlay</code> from <code>customize-image.sh</code></p> <p>Be advised that even though you are compiling an image on an amd64 machine, any additional apt packages you configure or commands you run in customize-image.sh will be automatically installed/executed/virtualized for the architecture of the build target SBC. </p>"},{"location":"Developer-Guide_User-Configurations/#partitioning-of-the-sd-card","title":"Partitioning of the SD card","text":"<p>In case you define <code>$FIXED_IMAGE_SIZE</code> at build time the partition containing the rootfs will be made of this size. Default behaviour when this is not defined is to shrink the partition to minimum size at build time and expand it to the card\u2019s maximum capacity at boot time (leaving an unpartitioned spare area of ~5% when the size is 4GB or less to help the SD card\u2019s controller with wear leveling and garbage collection on old/slow cards).</p> <p>You can prevent the partition expansion from within <code>customize-image.sh</code> by a <code>touch /root/.no_rootfs_resize</code> or configure the resize operation by either a percentage or a sector count using <code>/root/.rootfs_resize</code> (<code>50%</code> will use only half of the card\u2019s size if the image size doesn\u2019t exceed this or <code>3887103s</code> for example will use sector 3887103 as partition end. Values without either <code>%</code> or <code>s</code> will be ignored)</p>"},{"location":"Developer-Guide_Welcome/","title":"Welcome to the Armbian build framework documentation!","text":"<p>Overview:</p>"},{"location":"Developer-Guide_Welcome/#ansi-logging","title":"(ANSI) Logging","text":"<p>Log output is stored in <code>output/logs</code> and provided in a few different formats. ANSI coloring is applied to both the screen and the log files themselves. Please add <code>SHARE_LOG=yes</code> to automatically upload logs to our paste service and provide us with the given url when reporting issues. That will allows us to check the logs on a web browser and keep to correct formatting.</p>"},{"location":"Developer-Guide_Welcome/#command-line-syntax-has-changed","title":"Command line syntax has changed","text":"<p>General CLI syntax: <code>./compile.sh PARAM=value OTHER_PARAM=other_value [&lt;configfile&gt; &lt;configfile&gt; ...] [&lt;command&gt;]</code></p> <ul> <li>where <code>command</code> defaults to <code>build</code> if not specified; could also be <code>kernel-config</code> or <code>u-boot</code> etc\u2026</li> <li>config file names must not have the same name as a possible <code>&lt;command&gt;</code> (system will check &amp; bomb if so)</li> <li>also: there is no more <code>default</code> config \u2013 you have to be explicit</li> <li>also: there is no more <code>docker</code> config \u2013 Docker is fully auto-managed now. The system will complain if you have one.</li> <li>parameters like <code>PARAM=value</code>, <code>&lt;configfile&gt;</code> or <code>&lt;command&gt;</code> can be applied in any order.</li> </ul>"},{"location":"Developer-Guide_Welcome/#no-more-config-defaultconf-config-file-name-needs-to-be-specified-in-the-command-line","title":"No more <code>config-default.conf</code>, config file name needs to be specified in the command line","text":"<ul> <li>No \u201cdefault\u201d config is auto-loaded anymore. Default config lead to unreproducible failing builds and was a source of   confusion.</li> <li>The configs still go to the same place, <code>userpatches/config-xyz.conf</code> \u2013 but the name has to be provided to the build system to,   like <code>./compile.sh BOARD=xxx xyz</code>; otherwise works the same.</li> </ul>"},{"location":"Developer-Guide_Welcome/#artifacts-cache-what-the","title":"Artifacts, cache, what the \u2026?","text":"<p>The <code>armbian/build</code> system is currently undergoing refactoring to improve its structure. Previously, the build system was a single, very complex bash script that mixed the building of <code>.deb</code> packages with the creation of images.</p> <p>This was reworked into a <code>1-to-N</code> image-to-artifact dependency tree; a certain image build will depend on N possible \u201cartifacts\u201d. Artifacts are either <code>.deb</code> packages, a <code>.tar</code> of multiple <code>.deb</code> packages, or a <code>rootfs.tar.zstd</code>. Each artifact can be individually built, and has a specific name and a version.</p> <p>Each artifact is also now cached by default using OCI storage at ghcr.io (GitHub Container Registry). To achieve consistent caching, each artifact produces a version that includes hashes of its composing files, variables, patches, hooks, external git SHA1 references, etc. That way we can consistently check the remote OCI cache for previously-built artifacts, and possibly save image builders from having to build heavy packages just to produce an image.</p>"},{"location":"Developer-Guide_Welcome/#tldr-about-artifacts-and-caching","title":"TL;DR about artifacts and caching:","text":"<ul> <li><code>KERNEL_ONLY=yes</code> and <code>KERNEL_ONLY=no</code> are deprecated. Use the <code>kernel</code> CLI command instead.</li> <li><code>ARTIFACT_IGNORE_CACHE=yes</code> can help with false positives. Please also report the problem, with a complete logfile.</li> </ul>"},{"location":"Developer-Guide_Welcome/#automatic-dockersudo-launcher","title":"Automatic Docker/sudo launcher","text":"<ul> <li><code>compile.sh</code> will prefer to use Docker if it detects Docker is installed and working.     - This handles Docker Desktop and Rancher Desktop (in Docker emulation mode) under macOS/Darwin, including Apple       M1/M2.     - You don\u2019t need and actually can\u2019t have the old docker config file.</li> <li>If Docker is not installed, it will try to use <code>sudo</code> to run the build as root.</li> <li>If you run directly as root, it will give a warning and asks to run without <code>sudo</code>.</li> </ul>"},{"location":"Developer-Guide_Welcome/#kernel-git-trees-shallow-vs-full","title":"Kernel Git Trees: shallow vs full","text":"<p>During the build, depending on which local or remote caches are hit, it might be necessary to build the Linux Kernel from scratch.</p> <p>The kernel\u2019s git repo is huge. Most build systems resort to fetching \u201cshallow\u201d trees directly from upstream git servers, to save bandwidth. Unfortunately that creates immense extra CPU load on the git servers. To avoid this problem, Armbian produces daily automated git tree exports cached in ghcr.io OCI repositories, and only uses <code>git fetch</code> to update the relatively small new changes from the upstream git server.</p> <p>There are two types of cached Kernel git trees:</p> <ul> <li><code>full</code> is a complete git tree, including all of Torvald\u2019s <code>master</code> and all of the currently-supported <code>stable</code>   branches.     - <code>full</code> is very large download and requires a lot of disk space.     - <code>full</code> is more useful over time and when building multiple different kernels on the same machine, like for CI       servers or developer workstations.</li> <li><code>shallow</code> is a shallow tree for a specific <code>stable</code> branch     - <code>shallow</code> is a much smaller download and requires less disk space     - <code>shallow</code> is appropriate for restricted devices like SBCs which will build a single kernel</li> </ul> <p>**TL;DR: ** <code>KERNEL_GIT=full</code> or <code>KERNEL_GIT=shallow</code> or let the system decide for you.</p>"},{"location":"Developer-Guide_Welcome/#consider-forking-before-cloning-the-repo","title":"Consider forking before cloning the repo","text":"<p>Before cloning the repo, consider forking it first. This will allow you to make changes and submit pull requests. You will need a GitHub account to do this; see GitHub\u2019s documentation for more information. If you fork, make sure to keep your fork up-to-date with the main repo, by rebasing your fork.</p>"},{"location":"Developer-Guide_Welcome/#some-really-confusing-stuff-still-remains","title":"Some really confusing stuff still remains","text":"<p>This is (by far) not a complete list:</p> <ul> <li>wifi/other kernel drivers are still using pre-armbian-next code, and are very hard to work with. it is not only the   contents are a mess, the way the whole thing works leads to more and more compounding work. To make it worse, family   patches sometimes need to patch driver code, leading to a cycle of sadness for developers. We are still coming up with   a plan to completely replace this lest most of us go insane.</li> <li>although \u201caggregation\u201d has been rewritten in Python, it still mostly works using the legacy principle, by scanning   directories and files in a very complex and error-prone way. This is a source of many bugs and confusion. We plan to   replace this with pure extensions eventually.</li> <li>we have mostly working kernel headers (linux-headers pkg) for 5.10+ including some vendor kernels</li> </ul>"},{"location":"Developer-Guide_Welcome/#multiple-u-boots-for-same-board","title":"Multiple u-boot\u2019s for same board","text":"<p>We can build u-boot twice, using <code>UBOOT_TARGET_MAP</code>. Some example I did in https://github.com/armbian/build/blob/main/config/boards/odroidhc4.conf#L15-L20 may help.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/","title":"Review_Procedures_and_Guidelines","text":""},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Development-Code-Review-Procedures-and-Guidelines","title":"Development Code Review Procedures and Guidelines","text":"<p>     This topic should give you as a developer a brief overview about what you should do, must do, aswell as can and can not do. What you as devepoler can expect from Armbian and what we expect from you. </p><p> </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Requirements","title":"Requirements:","text":"<p>     Even though you may already be a developer, just to make sure, here is an outline of the expectations for this process: </p> Review Approve Merge Github ID Armbian Github Organisation Collaborator Armbian Github Organisation Member <p>Armbian Organization Members are required to have:</p><ul> <li>An account on Armbian Community Forums</li> <li>An account on Armbian Jira</li> <ol> <li>Register Atlassian account</li> <li>Request R/W access to Armbian Jira</li> </ol> <li>Enabled 2FA for their GitHub account</li> </ul><p>You should know development basics like how to get an Armbian image running on your hardware, do basic debugging, building a kernel and how to use the Armbian build system.</p><p> </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Code-Review","title":"Code Review:","text":"<p> Some helpful guidelines for pull requests and code reviews </p><p>     It has often been said that programming is part art, part science - that is because lots of times there is no single, simple solution to a problem. Or if there is, we might not know about it. There is also an infamous joke that if there are n developers in the room, then there are n+1 opinions on how things should be done. That being said, here are some guidelines that should prevent friction when submitting or reviewing code. </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#The-most-important-thing","title":"The most important thing","text":"The code has to work.<p>Unless you open a PR (\u201cpull request\u201d) as a work in progress, the code should be built and tested on a device or emulator. Do not rely on CI test automation!</p><p>If you have touched the build files and changed build setup, it is useful to test the whole build from scratch (clean build) and all of the types and flavours. If you updated external libraries, test the pertaining features. If you changed the build version, make a build and test that the version is correct.</p><p>Having people review your code is one thing, but you should not expect them to also test the code for you when not explicitly asked for.</p><p></p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Context","title":"Context","text":"<p>One important thing that lots of guidelines forget to mention is the context of the pull request: Sometimes it is a big refactor, sometimes it is a new feature, sometimes it is a bugfix. Some of those might be more urgent than others, and sometimes you might be under pressure to ship ASAP so the code might not be perfect or there will not be any tests or code might not be extendable. That is ok.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Everyone","title":"Everyone","text":"<li>There is no perfect code: good enough is usually good enough. That being said, try to keep the number of WTFs per minute to a minimum.</li><li>Accept that many programming decisions are opinions. Discuss trade-offs, which you prefer, and reach a resolution quickly.</li><li>Ask for clarification. (\"I didn't understand. Can you clarify?\")</li><li>Offer clarification, explain the decisions you made to reach a solution in question.     Avoid using terms that could be seen as referring to personal traits. (\"dumb\", \"stupid\"). Assume everyone is intelligent and well-meaning.</li><li>Be humble. (\"I'm not sure - let's look it up.\")</li><li>Do not use hyperbole (\"always\", \"never\", \"endlessly\", \"nothing\"). Avoid sarcasm.</li><li>Remember that you are both on the same side - the goal is to make the code better. Understand that sometimes your ideas will be overruled. Even if you do turn out to be right, do not take revenge or say, \"I told you so\".</li><li>Talk synchronously (e.g. chat, screensharing, in person) if there are too many \"I didn't understand\" or \"Alternative solution:\" comments. Pull requests should not be the place for long discussions, architectural or otherwise. </li><li>Put notes on what is missing or could be improved in the PR description or comments. You can also make a Jira ticket with discussions points and possible problems or things to do and discuss it offline.</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#As-a-Code-Submitter","title":"As a Code Submitter","text":"<li>PRs should be about one thing. If you do multiple things in one PR, it is hard to review. If you are fixing stuff as you go, you might want to make atomic commits and then cherry-pick those commits into separate branches, leaving the PR clean.</li><li>Try to keep the PRs small. </li><li>Having a PR description is useful. Additionally, you can also link to the Jira ticket. </li><li>Ideally, the PR should be finished when submitted. If the PR is work in progress, add (WIP) or [WIP] to the title.</li><li>You should have tests that at least cover the logic, and ideally also cover the input/output parameters and methods. (depends on context)</li><li>Make sure to add a documentation PR when needed https://github.com/armbian/documentation</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#As-a-Reviewer","title":"As a Reviewer","text":"<li>Reviewing code is part of a normal workday. You should check for open/updated PRs / Jira ticket as often as you can.</li><li>Ask, do not tell. (\u201cWhat do you think about trying\u2026?\u201d rather than \u201cDon\u2019t do\u2026\u201d)</li><li>Offer ways to simplify or improve code.</li><li>Code beautification and refactoring ought to be tasks in the next sprint, except for obvious and easy-to-fix things.</li><li>Communicate which ideas you feel strongly about and those you do not. Explain your reasons why code should be changed. (Not in line with the style guide? A personal preference?)</li><li>If you disagree strongly, consider giving it a few minutes before responding; think before you react.</li><li>Offer alternative implementations, but assume the author already considered them. (\"What do you think about using a custom validator here?\")</li><li>If discussions turn too theoretical or touch big architectural questions, move the discussion offline. In the meantime, let the author make the final decision on alternative implementations.</li><li>Do not keep the code hostage. Keep in mind the context and the most important thing - does it work?</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Merging-a-merge-request","title":"Merging a merge request","text":""},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Before-making-the-decision-to-merge","title":"Before making the decision to merge:","text":"<li>Set a milestone.</li><li>Consider warnings and errors from Github CI bots, code quality bots, and other reports. Unless a strong case can be made for the violation, these should be resolved before merging. A comment must be posted if the PR is merged with any failed job.</li><li>If the PR contains both quality and non-quality-related changes, the PR should be merged by the relevant maintainer or senior software engineer after the quality related changes are approved by more then one software engineer.</li><p>If a pull request is fundamentally ready, but needs only trivial fixes (such as typos), consider demonstrating a bias for action by making those changes directly without going back to the author. You can do this by using the suggest changes feature to apply your own suggestions to the pull request.</p><p>Note that:</p><li>merging is limited to Armbian Github Organization members, you can  apply here to become one, if you have not already been invited.</li><li>If the changes are not straightforward, please prefer allowing the author to make the change.</li><li>Before applying suggestions, edit the pull request to make sure squash and merge is enabled</li><p>Authors are not authorized to merge their own pull requests and need to seek approval from another maintainer / developer to merge.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Armbians-Assistance","title":"Armbian's Assistance","text":"<p>If you have questions about being a developer or want to learn more and deeper insights about the build framework, Armbian will try to guide you to the appropriate documentation or information in a best-effort fashion. If time allows, at our descrection, we will try our best to explain and teach you personally various aspects about our processes. If best effort guidance is not enough, contact us for professional assistance.</p><p>If you have any concerns please do not hesitate to reach out via forums, IRC or Discord. Armbian cares about the people who care about Armbian </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#References--Sources","title":"References / Sources:","text":"<ul> <li>https://github.com/thoughtbot/guides/tree/master/code-review</li> <li>https://github.com/blog/1943-how-to-write-the-perfect-pull-request</li> <li>https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</li> <li>https://hackernoon.com/tagged/code-review</li> <li>https://hackernoon.com/the-art-of-pull-requests-6f0f099850f9</li> <li>https://gist.github.com/mrsasha/8d511770ad9b282f3a5d0f5c8acdd10e</li> <li>https://docs.gitlab.com/ee/development/code_review.html#everyone</li> </ul>"},{"location":"Process_Armbian-Task-Tracking/","title":"Armbian Task Management","text":""},{"location":"Process_Armbian-Task-Tracking/#overview","title":"Overview","text":"<p>TLDR; Keep task discussions in the forum. GitHub Issues are just for task metadata.</p> <p>Tasks associated with code will have an issue created in GitHub, but all dialog regarding tasks will reside on the forum in a topic containing the github Issue ID of the task.</p>"},{"location":"Process_Armbian-Task-Tracking/#what-is-a-task","title":"What is a task?","text":"<p>A task is something actionable that results in some sort of tangible output. ex: code, documentation, QA findings.</p> <p>Example sources of tasks include: feature requests, bugs, QA, general following of development roadmap.</p> <p>Not all support issues are tasks, but a support issue can generate a task.</p>"},{"location":"Process_Armbian-Task-Tracking/#task-creation-procedure","title":"Task Creation Procedure","text":"<ol> <li>Create issue in Armbian GitHub Repo under appropriate milestone     - </li> <li>Copy the numeric ID of issue created</li> <li>Create new topic under the Tasks subforum on the Armbian Forums     - Use the the naming convention of <code>[ISSUE_ID] - Issue Name</code>     - </li> <li>Copy the URL of task subforum topic just created</li> <li> <p>Create comment on GitHub Issue with the following Content: </p> Text Only<pre><code>  Please keep all discussion for this issue on the forum topic available below:\n\n  [URL](URL)\n</code></pre> <p>- </p> </li> <li> <p>Lock comments on GitHub Issue</p> </li> </ol>"},{"location":"Process_Armbian-Task-Tracking/#task-tracking-with-github-issues","title":"Task tracking with GitHub Issues","text":"<p>GitHub Issues provide an easy method to track and filter tasks by using tags and milestones.  Issues also make it easy to easily associate commits and merge requests with a task.  Effectively we just use GitHub issues for the metadata for reporting.</p>"},{"location":"Process_Armbian-Task-Tracking/#labels","title":"Labels","text":"<p>Use labels identify the purpose of a task.</p> <ul> <li><code>bug</code> is used to tag tasks that address Armbian-level bugs</li> <li><code>not-our-bug</code> is used to identify tasks that are bugs in upstream code.  They are not Armbian bugs, but may impact Armbian.</li> <li><code>enhancement</code> is used to identify tasks that are new features for Armbian.</li> </ul>"},{"location":"Process_Armbian-Task-Tracking/#milestones","title":"Milestones","text":"<p>Use milestones to divide tasks into claimed and unclaimed work.</p> <ul> <li><code>claimed tasks</code> milestone contains tasks which have been assigned.</li> <li><code>unclaimed tasks</code> milestone contains tasks that need an owner.</li> </ul>"},{"location":"Process_Armbian-Task-Tracking/#forum-tasks","title":"Forum Tasks","text":""},{"location":"Process_Armbian-Task-Tracking/#converting-a-topic-to-a-task","title":"Converting a topic to a task","text":"<p>Sometimes support discussions can become tasks.   A forum admin can assist in moving the topic to Tasks forum group.  A cooresponding issue will need to be created.</p>"},{"location":"Process_Armbian-Task-Tracking/#future-process-improvements","title":"Future Process Improvements","text":"<p>Enhancements desired for this process (This should be a task!)</p>"},{"location":"Process_Armbian-Task-Tracking/#issue-hook","title":"Issue Hook","text":"<p>Ideally we can have a forum topic created upon issue creation.  This will save some time.</p>"},{"location":"Process_CI/","title":"Build actions for developers and maintainers","text":"<p>Note: Add ideas for process improvements as comments to the Jira ticket.</p> <p>Manual executing permissions are tied to release manager role within Armbian organization. Do you want to help and take this role?</p>"},{"location":"Process_CI/#prepare-build-lists-anyone","title":"Prepare build lists (anyone)","text":"<p>armbian/os</p>"},{"location":"Process_CI/#recommended-images","title":"Recommended images","text":"<p>Recommended images on download pages </p> <p>are defined via regular expression mapping file <code>exposed.map</code> :</p> <p>Example:</p> Text Only<pre><code>bananapim7/archive/Armbian_[0-9].*Bananapim7_noble_vendor_[0-9]*.[0-9]*.[0-9]*_gnome-kisak_desktop.img.xz\nbananapim7/archive/Armbian_[0-9].*Bananapim7_bookworm_vendor_[0-9]*.[0-9]*.[0-9]*_minimal.img.xz\n</code></pre>"},{"location":"Process_CI/#build-templates","title":"Build templates","text":"<p>They have definitions on what kind of images we want to build - for section or for one specific board:</p> Text Only<pre><code>userpatches/targets-release-apps.template\nuserpatches/targets-release-community-maintained.template\nuserpatches/targets-release-nightly.template\nuserpatches/targets-release-standard-support.template\n</code></pre> <p>From those templates we are autogenerating YAML files, which are passed to build matrix as input. Make sure to review generated YAML files if they have wanted build targets with correct exensions enabled.</p>"},{"location":"Process_CI/#blacklisting","title":"Blacklisting","text":"<p>Autogeneration is excluded for boards that are on blacklists:</p> Text Only<pre><code>userpatches/targets-automation.blacklist\nuserpatches/targets-automation-nightly.blacklist\n</code></pre> <p>We do this if we are not happy with the automation outcomes and want to define build targets in the template.</p>"},{"location":"Process_CI/#extensions","title":"Extensions","text":"<p>Each board variant can have additional extensions and they are defined in this file:</p> Text Only<pre><code>userpatches/targets-extensions.map\n</code></pre> <p>Example:</p> Text Only<pre><code>khadas-edge2,legacy:vendor:,ENABLE_EXTENSIONS=\"image-output-oowow,v4l2loopback-dkms,mesa-vpu\"\n</code></pre>"},{"location":"Process_CI/#prepare-standard-support-images-for-release-release-manager","title":"Prepare Standard Support images for release (release manager)","text":"<p>This build workflow is executed manually when making:</p> <ul> <li>a set of images for specific device</li> <li>a set of images for specific maintainer</li> <li>a full set of stable release images (default)</li> </ul> <p>Notes:</p> <ul> <li>this process prepares images for release without pushing them to the download pages</li> <li>you can only generate images that are defined in targets-release-standard-support.yaml build lists!</li> <li>images generation workflows are compiled and are pretty much the same, just with different defaults</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click","title":"1. Open workflow and click","text":""},{"location":"Process_CI/#2-select-board","title":"2. Select board","text":"<p>Bump version: Select if you want to trigger system wide version bump. Version override: Set version under which you want to release images.</p> <p>Images versions are stored in JSON files: - https://github.com/armbian/os/blob/main/stable.json - https://github.com/armbian/os/blob/main/nightly.json</p>"},{"location":"Process_CI/#3-run-workflow","title":"3. Run workflow","text":"<p>(Workflow takes around 15 minutes to complete. In case of network issues it can also take hours)</p> <p>Generated images are uploaded to incoming folder https://rsync.armbian.com/incoming/ under your GitHub username and once they are confirmed working, please notify @igorpecovnik to move them to official download pages. Once images are moved to main download section, automation refreshes download pages index within 15-30 minutes.</p>"},{"location":"Process_CI/#aditional-options","title":"Aditional options","text":"<p>Generates stable images defined in targets-release-standard-support.yaml. </p> <p>We are generating several images for each download / hardware target. They are automatically sorted by sections:</p> <ul> <li>Desktop releases</li> <li>Server and IOT releases</li> <li>Dedicated applications</li> </ul> <p>Images generation can be customized:</p> <ul> <li>Framework build branch<ul> <li>main (make images from trunk)</li> <li>vXX.X (previous stable release)</li> </ul> </li> <li>Bump Version (system wide version bump)</li> <li>Version override (in case you don\u2019t want to use latest)</li> <li>Board (make images for one board only)</li> <li>Maintainer (make images for selected maintainer)</li> </ul>"},{"location":"Process_CI/#prepare-application-images-for-release-release-manager","title":"Prepare application images for release (release manager)","text":"<p>This build workflow is executed manually when making:</p> <ul> <li>a set of application images for specific device</li> <li>a set of application images for specific maintainer</li> <li>a full set of application images (default)</li> </ul> <p>Notes:</p> <ul> <li>application images are released 10-15 minutes after build finishes succesfully</li> <li>you can only generate images for applications that are defined in targets-release-apps.yaml build lists!</li> <li>images generation workflows are compiled and are pretty much the same, just with different defaults</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click_1","title":"1. Open workflow and click","text":""},{"location":"Process_CI/#2-select-board_1","title":"2. Select board","text":"<p>Version override: Use this feature if you want to keep them under the same version, but not lower then last released.</p>"},{"location":"Process_CI/#3-run-workflow_1","title":"3. Run workflow","text":"<p>(Workflow takes around 15 minutes to complete. In case of network issues it can also take hours)</p> <p>Generated images are hosted at GitHub https://github.com/armbian/distribution/releases and released at once. Automation refreshes download pages within 15-30 minutes after/if workflow finished succesfully.</p> <p></p>"},{"location":"Process_CI/#aditional-options_1","title":"Aditional options","text":"<p>Generates dedicated application images defined in targets-release-apps.yaml. This file is autogenerated from targets-release-apps.template. (You always edit template)</p> <p>Images generation can be customized:</p> <ul> <li>framework build branch<ul> <li>main (make images from trunk)</li> <li>vXX.X (previous stable release)</li> </ul> </li> <li>Bump Version (system wide version bump)</li> <li>Version override (in case you don\u2019t want to use latest)</li> <li>board (make images only for one board)</li> <li>maintainer (make images for selected maintainer)</li> </ul>"},{"location":"Process_CI/#repository-update-cronjobrelease-manager","title":"Repository update (cronjob/release manager)","text":"<p>This pulls packages from build framework OCI cache located at GitHub and from various 3rd party repositories such as Chrome, Chromium, Code, Discord, (latest) ZFS, Thunderbird, Zoom, \u2026 and pushes them to:</p> <ul> <li><code>apt.armbian.com</code> (only new packages are added)</li> <li><code>beta.armbian.com</code> (whole repository is recreated from scratch)</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click_2","title":"1. Open workflow and click","text":"<p>Action is executed automatically when artifact generations completes. Or manually.</p>"},{"location":"Process_CI/#2-include-artifacts-from-generated-images","title":"2. Include artifacts from generated image(s)","text":"<p>When - [ ] Add https://netcup.armbian.com/partial/ to stable repo</p> <p>is selected.</p>"},{"location":"Process_CI/#3-run-workflow_2","title":"3. Run workflow","text":"<p>(Workflow takes around 60 minutes to complete)</p>"},{"location":"Process_CI/#build-all-artifacts-cronjob","title":"Build all artifacts (cronjob)","text":"<p>Generates all build artifacts cache for targets defined in targets-all-not-eos.yaml. This build job runs every 8 hours and can also be run manually when needed. </p> <p>This build job needs to be successfully completed in order to proceed generating any OS images!</p>"},{"location":"Process_CI/#build-rolling-release-images-cronjob","title":"Build Rolling Release Images (cronjob)","text":"<p>Generates all nighly (Rolling Release) images defined in targets-release-nightly.yaml.  This file is autogenerated from targets-release-nightly.template. </p> <p>This build job runs every day at 9 a.m. UTC and can also be run manually when needed. Download pages are refreshed automatically after successful build.</p> <p></p>"},{"location":"Process_CI/#watchdog-cronjob","title":"Watchdog (cronjob)","text":"<p>Runs every 15 minutes and re-trigger failed builds six (6) times before finally gives out. This addresses various instabilities when building many artifacts on different hardware: </p> <ul> <li>network timeouts</li> <li>artifact download failure</li> <li>loop devices allocation failure</li> <li>runner running low on space</li> </ul>"},{"location":"Process_CI/#smoke-tests-on-hardware-devices-release-manager","title":"Smoke tests on hardware devices (release manager)","text":"<p>Smoke testing is preliminary testing to reveal simple failures severe enough to, for example, reject a prospective software release. Our test case is constructed of three steps:</p> <p></p> <ul> <li>powering test equipment, consistent from several network switches, power supplies and dozens of hardware platforms</li> <li>running upgrade, reboot, repository switch, reboot, \u2026 tests in parallel</li> <li>uploading a test report as build artifact following by powering the devices off.</li> </ul>"},{"location":"Process_CI/#automatic-pull-requests-labeler-pr","title":"Automatic Pull Requests Labeler (PR)","text":"<p>Automatically label new pull request based on the paths of files which are being changed. Configuration file can be found in:</p> Text Only<pre><code>    .github/labeler.yml\n</code></pre>"},{"location":"Process_CI/#full-distro-test-builds-cronjobrelease-manager","title":"Full distro test builds (cronjob/release manager)","text":"<p>Generates all supported build combinations (minimal, cli, desktops) for x86 architecture to check package level changes inconsistency and dependencies.</p> <p>Options:</p> <ul> <li>Framework build branch<ul> <li>main</li> <li>testing_branch (string)</li> </ul> </li> </ul>"},{"location":"Process_CI/#build-all-artifacts-adminpr","title":"Build all artifacts (admin/PR)","text":"<p>Generates artifacts at Pull Requests code. Build starts when label of Pull Request is set to \u201cBuild\u201d. Requires administration privileges.</p>"},{"location":"Process_CI/#lint-on-shell-scripts-pr","title":"Lint on shell scripts (PR)","text":"<p>Run ShellCheck on changed shell scripts and report problems within. Linting runs automatically on pull requests.</p>"},{"location":"Process_CI/#update-tools-in-build-scripts-cronjobadmin","title":"Update tools in build scripts (cronjob/admin)","text":"<p>Some of our scripts download tools from a repo. These cannot be bumped by Dependabot, so this workflow is a self-created Dependabot to bump versions of those tools to stay up-to-date. This workflow only creates a PR if the version was actually updated. To add a new tool, it just needs to be added to the matrix in the script by filling out all the variables.</p>"},{"location":"Process_CI/#scorecards-security-scan-pr","title":"Scorecards security scan (PR)","text":"<p>Scorecards is an automated tool that assesses a number of important heuristics (\u201cchecks\u201d) associated with software security and assigns each check a score of 0-10. You can use these scores to understand specific areas to improve in order to strengthen the security posture of your project. You can also assess the risks that dependencies introduce, and make informed decisions about accepting these risks, evaluating alternative solutions, or working with the maintainers to make improvements.</p>"},{"location":"Process_CI/#kernel-hardening-analysis-pr","title":"Kernel hardening analysis (PR)","text":"<p>This analysis checks kernel configs and run if changed. There are plenty of security hardening options for the Linux kernel. A lot of them are not enabled by the major distros. We have to enable these options ourselves to make our systems more secure.</p>"},{"location":"Process_Contribute/","title":"Collaborate on the project","text":""},{"location":"Process_Contribute/#how","title":"How?","text":"<ol> <li>Fork the project.</li> <li>Make one or more well commented and clean commits to the repository. </li> <li>Perform a pull request in Github\u2019s web interface.</li> </ol> <p>If it is a new feature request, do not start the coding first. Remember to open an issue to discuss the new feature. If you want to add code to someone else pull request. Also check collection of git tips which will make your life easier.</p> <p>If you are struggling, check WEB or CLI step-by-step guide on contributing.</p>"},{"location":"Process_Contribute/#where-are-the-sources","title":"Where are the sources?","text":"<p>Build script: </p> <p>armbian/build</p> <p>Documentation:</p> <p>armbian/documentation</p> <p>Armbian-config tool:</p> <p>armbian/config</p>"},{"location":"Process_Contribute/#help-with-donations","title":"Help with donations","text":"<p>If you find our project useful, then we\u2019d really appreciate it if you\u2019d consider contributing to the project however you can. Donating is the easiest way to help us \u2013 you can use PayPal and Bitcoin or you can buy us something from our Amazon.de wish list.</p> <p>https://www.armbian.com/donate/</p> <p>Thanks!</p>"},{"location":"Process_Managing_Workflow/","title":"Jira","text":"<p>Jira where development work is entered and prioritized. https://armbian.atlassian.net/</p>"},{"location":"Process_Managing_Workflow/#issue-types","title":"Issue Types","text":"<p>When creating issues, try to assign issue type most appropriate.   Issue type can be changed later so don\u2019t worry too much.  If possible assign to a \u201cFix Version\u201d aka Release.</p> <ul> <li>Epic - useful as placeholders for large requirements. Common objective, overall goals, contains several stories.</li> <li>Story - Smallest units of functionality that can be achieved in one or two weeks. Non-technical language.</li> <li>Task - Work that is clearly defined usually by people that will do the work. Specific, technical language.</li> </ul> <p></p>"},{"location":"Process_Managing_Workflow/#special-issue-type","title":"Special Issue Type","text":"<ul> <li>Bug - malfunction of the system, an error, flaw, or a default in the system, that causes an incorrect result.</li> </ul>"},{"location":"Process_Managing_Workflow/#work-queue","title":"Work Queue","text":"<p>The easiest way to follow the work queue Upcoming Release Kanban Board.  This board lists only work select for the upcoming release.</p> <p></p> <p>Use the filter buttons at top to quickly see unassigned work, work assigned to you, bugs, and work recently updated.</p> <p>Work is listed in 3 columns, and sorted by priority.</p> <p>Columns: * Todo     * Work prioritized to be done next     * Pick up any task from this column * In Progress     * Work In Progress * Done     * Shows recently completed work.  Has time limit to keep board clean</p>"},{"location":"Process_Managing_Workflow/#managing-work","title":"Managing Work","text":"<p>All issues for an upcoming release are assigned a \u201cFix Version\u201d to indicate release number.</p>"},{"location":"Process_Managing_Workflow/#backlog","title":"Backlog","text":"<p>With the Kanban Board, there are 2 states for the Upcoming Release backlog.</p> <ul> <li>Todo - These tasks are visible the Todo column of the Kanban board. To keep things simple, there shouldnt be more than 5-10 issues in Todo</li> <li>Backlog \u2013 Other tasks seleceted for release, but not are not visible on the Kanban board.  The purpose of this is to keep the Todo column clean and easy to work from.  As the Todo column clears, prioritize next tasks in backlog by moving them to todo.</li> </ul> <p>All issues for an upcoming release are assigned a \u201cFix Version\u201d to indicate release number.</p>"},{"location":"Process_Managing_Workflow/#mobile-access","title":"Mobile access","text":"<p>You can download the app for Android or iOS. </p>"},{"location":"Process_Merge-Policy/","title":"Merge Policy","text":""},{"location":"Process_Merge-Policy/#overview","title":"Overview","text":"<p>Note: This document is a Work In Progress and is subject to change.  Definitions may be relocated to a seperate document in the future.</p> <p>This policy is targeted for Maintainers for Lead Maintainers who have commit access to <code>master</code> branch.  This document describes the tags needed for different merge types.  See Definitions.</p> <p>The types of code maintained fall into the following categories:</p> <ul> <li>Kernel</li> <li>U-Boot</li> <li>Build scripts</li> </ul> <p>Kernel and U-Boot maintainers are usually grouped by SoC Architecture.</p> <p>Supported boards will have the most scrunity with code review.</p>"},{"location":"Process_Merge-Policy/#u-boot-patches","title":"U-Boot Patches","text":"<ul> <li>Standard contributors provide tested-by submitter (<code>armbianmonitor -u</code> with a fresh build).</li> <li>SoC maintainer may submit a PR reviewed by of the lead SoC maintainer only.</li> </ul>"},{"location":"Process_Merge-Policy/#kernel-related-patches","title":"Kernel Related Patches","text":""},{"location":"Process_Merge-Policy/#legacy-and-current-branches","title":"legacy and current branches","text":"<ul> <li>DT changes reviewed by at least one person familiar with this SoC (lead maintainer or deputy), tested-by the contributor who sends it (armbianmonitor).</li> <li>Trivial module activation doesn\u2019t matter.</li> </ul>"},{"location":"Process_Merge-Policy/#devedge-branches","title":"dev/edge branches","text":"<p>Constraints are at the discretion of the SoC mantainer.  This builds are not expected to be stable.</p>"},{"location":"Process_Merge-Policy/#armbian-build-scripts","title":"Armbian Build Scripts","text":"<p>This pertains to code used to build system images, OS configuration, and supporting packages (basically anything not u-boot or kernel source).</p>"},{"location":"Process_Merge-Policy/#lib-scripts","title":"lib scripts","text":"<ul> <li>Requires at least one Reviewed-by.</li> </ul>"},{"location":"Process_Merge-Policy/#configuration","title":"Configuration","text":""},{"location":"Process_Merge-Policy/#board-promotion","title":"board promotion","text":"<p>Boards have different levels of commitment / support.  EOL, CSC, WIP, Supported.  To promote a board from WIP to Supported an Acked-by from a Lead Maintainer is required.</p>"},{"location":"Process_Merge-Policy/#kernel-config","title":"kernel config","text":"<ul> <li>Changes in legacy &amp; current kernel config should provide at least tested-by  with <code>armbianmonitor -u</code>.</li> <li>Changes in edge are at the discretion of maintainer.  No constraints.</li> </ul>"},{"location":"Process_Merge-Policy/#kernel-sources","title":"kernel sources","text":"<p>Change kernel source repos, branches, versions can be very disruptive to stable builds.  Sufficient communication should occur stable changes.</p> <ul> <li>U-Boot and kernel version bump for legacy and current requires tested-by from Maintainers and/or testers on at least two different boards for the impacted platform. </li> <li>Kernel sources switch (legacy current) needs a discussion on forum or github or IRC and documented in PR and Acked-by  Lead Maintainer.  These changes are risky and things can go terrible wrong here\u2026</li> <li>edge source changes are at the discretion of the Lead Maintainer.</li> <li>Board family tweaks require at least reviewed-by.</li> </ul>"},{"location":"Process_Merge-Policy/#packages","title":"packages","text":"<ul> <li>minimum require Acked-by</li> </ul>"},{"location":"Process_Merge-Policy/#definitions","title":"Definitions","text":""},{"location":"Process_Merge-Policy/#code-review-terms","title":"Code Review Terms","text":"<p>click here for attribution to terms used below</p>"},{"location":"Process_Merge-Policy/#signed-off-by","title":"Signed-off-by","text":"<p>Certifies that you wrote it or otherwise have the right to pass it on as a open-source patch.</p>"},{"location":"Process_Merge-Policy/#acked-by","title":"Acked-by","text":"<p>If a person was not directly involved in the preparation or handling of a patch but wishes to signify and record their approval of it then they can arrange to have an Acked-by: line.  Acked-by: does not necessarily indicate acknowledgement of the entire patch.</p>"},{"location":"Process_Merge-Policy/#tested-by","title":"Tested-by","text":"<p>A Tested-by: tag indicates that the patch has been successfully tested (in some environment) by the person named.  This tag informs maintainers that some testing has been performed, provides a means to locate testers for future patches, and ensures credit for the testers.</p>"},{"location":"Process_Merge-Policy/#reviewed-by","title":"Reviewed-by","text":"<p>A Reviewed-by tag is a statement of opinion that the patch is an appropriate modification of the kernel without any remaining serious technical issues.  Any interested reviewer (who has done the work) can offer a Reviewed-by tag for a patch. </p>"},{"location":"Process_Merge-Policy/#other","title":"Other","text":""},{"location":"Process_Merge-Policy/#maintainer","title":"Maintainer","text":"<p>An Individual designated to moderate, support and make decisions for a codebase or component.  There can be multiple maintainers assigned to any given thing.</p>"},{"location":"Process_Merge-Policy/#lead-maintainer","title":"Lead Maintainer","text":"<p>A more experienced maintainer that will decide on high-impact and stategic changes and have final say in disputes.  A lead maintainer may share or designiate responsibility to some or all components within their domain of responsibility.</p>"},{"location":"Process_Merge-Policy/#soc","title":"SoC","text":"<p>System on-a-Chip.</p>"},{"location":"Process_Release-Model/","title":"Release Model","text":""},{"location":"Process_Release-Model/#rolling-releases","title":"Rolling releases","text":"<p>Armbian provides automated daily rolling releases of small selection of images for all supported targets. Images are available at respective board download pages: https://www.armbian.com/download. Armbian also populates its own packages repository so updates are available as an upgrade for existing installations.</p>"},{"location":"Process_Release-Model/#point-releases","title":"Point releases","text":"<p>Armbian runs \u201ctrain\u201d based point releases. Whatever is ready to board the train, does so. Whatever is not has to wait for the next train. This enables us to have a predictable release cycles making it easy to plan. It also puts the responsibility on developers to make sure they have features ready on time. </p> <p>Armbian releases quarterly at the end of February, May, August, November. Offset is because we all know that nothing happens for half of December. At the beginning of a release cycle, we have a planning meeting and two weeks before the end of the release we freeze integration of new features.</p>"},{"location":"Process_Release-Model/#release-cycle","title":"Release Cycle","text":"<p>Releases last three months. Each release starts with a meeting for planning. After planning, developers and development teams build their deliverable using whatever methods (scrum, kanban, waterfall, \u2026 ) they want but shall commit their code frequently, leading up to the last 2 weeks. The project does not accept \u201cdumps\u201d of code at the end. Commit early and often on master. Two weeks before the release date, we halt feature integration and only allow bug fixes. At some point during those two weeks, we start the release candidate process. This process starts by pulling a branch off master that will become the release branch. That frees up master for development on the next release. On the release candidate branch we work on bug fixes, and choose \u201crelease candidate\u201d, RC, tags. The software at that tag is a candidate for release, and it is submitted to automated and manual tests on real hardware. If automated tests are passing, we can officially tag it as the release. If it does not, we enter another bug fix cycle and create a new release candidate. We iterate until we have a candidate that can be the formal release. Usually, this takes 2-3 cycles and 1-3 weeks of time.</p> <p>Development epics, stories and bugs for each release are tracked through Jira.</p>"},{"location":"Process_Release-Model/#release-branching-versioning-and-tags","title":"Release Branching, Versioning and Tags","text":"<p>Branches in Armbian follow this convention: </p> <ul> <li>Main branch (main): Main development will happen on the <code>main</code> branch. This is the latest and greatest branch, but is always \u201cstable\u201d and \u201cdeployable\u201d. All tests always pass on this branch.</li> <li>Release branch (v24.08 for example): This is a branch per release with frozen external sources.</li> </ul> <p>Each Armbian release will have the following version format:</p> <p>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;</code></p> <p><code>&lt;major&gt;</code> and <code>&lt;minor&gt;</code> version are incremented at the end of the release cycles while <code>&lt;revision&gt;</code> is incremented for a fix.</p>"},{"location":"Process_Release-Model/#release-naming","title":"Release Naming","text":"version codename release month work 19.11 Vaquita November done 20.02 Chiru February done 20.05 Kagu May done 20.08 Caple August done 20.11 Tamandua November done 21.02 Urubu February done 21.05 Jerboa May done 21.08 Caracal August done 21.11 Sambar November cancelled 22.02 Pig February done 22.05 Jade May done 22.08 Yapok August done 22.11 Goral November done 23.02 Quoll February done 23.05 Suni May done 23.08 Colobus August done 23.11 Topi November done 24.02 Kereru February done 24.05 Havier May done 24.08 Yelt August done 24.11 Stirk August planned 25.02 Iiwi August planned 25.05 Caiman August planned 25.08 Dunnart August planned 25.11 Brach August planned 26.02 Goa August planned <p>by https://www.codenamegenerator.com from unusual animals</p>"},{"location":"Process_Release-Model/#release-coordinating","title":"Release Coordinating","text":""},{"location":"Process_Release-Model/#summary","title":"Summary","text":"<p>A release starts as a RC branch cut from <code>main</code> at freeze time. Once a RC branch is cut, <code>main</code> can be unfrozen and development can continue. RC branch is a rolling release that accepts bug fixes. The bug fixes should be cherry-picked back to <code>main</code> branch. Once the RC is stable, a final release as a branch named after its version. A release is never merged to <code>main</code>. Once a release is complete, it only should be updated for severe bugs and security vulnerabilities. A release is only maintained until the next release.</p>"},{"location":"Process_Release-Model/#1-forum-communication","title":"1. Forum Communication","text":"<ul> <li>Create a new thread in the Armbian Project Administration forum<ul> <li>Ex topic name: <code>Armbian 24.02 (Kereru) Release Thread</code></li> </ul> </li> <li>Tag the post with relase, release version, and codename</li> <li>Use the following template to begin the body of the release thread:</li> </ul> <p>Text Only<pre><code>Release Candidate Code Freeze Date: YYYY-MM-DD\nRelease Date: YYYY-MM-DD\nRelease Candidate Branch Link: URL\nRelease Changelog: URL\nRelease Coordinator: @yourname\nTesting Tracking Sheet: https://example.com/link  (google sheets)\n\nThe goal of this thread is to discuss testing, bugfixes, and the overall quality of the release.  Once the release is complete, this thread should be locked and unpinned. \n</code></pre> - Before Code Freeze \u2013 Make note in the thread the incomplete Jira issues tagged for the release example - After test images are procuded, engage in community for assistants wih testing.. forums, Twitter, etc.  share this tool</p>"},{"location":"Process_Release-Model/#2-release-candidate-branch-management","title":"2. Release Candidate Branch Management","text":"<ul> <li>For code freeze \u2013 create a RC branch as <code>version-rc</code> ex: <code>v20.02.0-rc</code></li> <li>If possible, create Jira tickets for major changes in github that were not tracked in Jira</li> <li>Begin testing process. See Release Testing</li> <li>Do not modify branch directy. Only accept PRs</li> <li>Only accept PRs for bug fixes. No features</li> <li>Update <code>main</code> branch version to the NEXT release version with <code>-trunk</code>  ex. If RC is v20.02.0-rc <code>main</code> becomes v20.05.0-trunk</li> <li>CI testing should pass on PR</li> <li>Test images should automatically be built via Igor\u2019s script</li> <li>Repeat build, test, and bugfix process until release is stable</li> <li>Cherry-pick bug fixes back into master</li> <li>Create Final release branch from RC</li> </ul>"},{"location":"Process_Release-Model/#3-release","title":"3. Release","text":"<ul> <li>In Github create a release from final release branch Enable source freezing for this branch Text Only<pre><code>./compile.sh targets\ncp output/info/git_sources.json config/sources/\n</code></pre> following by commiting this code to build framework.</li> <li>Copy release notes generated by Jira release into Github form</li> <li>Add other appropriate information into release Github release notes</li> <li>Point Armbian build system to new release</li> <li>Update Armbian documentation to reflect current release</li> <li>Celebrate</li> </ul>"},{"location":"Quick_facts/","title":"Quick Facts","text":""},{"location":"Quick_facts/#what-is-armbian-linux","title":"What is Armbian Linux?","text":"<p>Armbian Linux provides optimized Debian and Ubuntu Linux images for ARM-based SBCs. There is an incredible ecosystem of small computing platforms that are powerful alternatives to the Raspberry Pi. Armbian\u2019s mission is to provide a uniform system offering that is trustworthy to run on any of the dozens of OS-neglected ARM single board computers.</p>"},{"location":"Quick_facts/#challenges","title":"Challenges","text":""},{"location":"Quick_facts/#armbian-is-the-opposite-of-raspbian","title":"Armbian is the opposite of Raspbian","text":"<p>Raspbian has dozens of contributors to focus on a single SBC platform. Armbian has a dozen contributors to focus on 100+ SBCs spread over 30 platforms.</p>"},{"location":"Quick_facts/#balancing-development-and-support","title":"Balancing Development and Support","text":"<p>Given the point above, resources are thin. Armbian developers have to focus on the core mission of maintaining the Armbian Build Platform. We heavily rely on other members of the community to support each other.  Although Armbian does provide a lot of user friendly features, the reality is that Armbian is for more advanced users. If you are really struggling with your SBC, you may want to consider first getting more comfortable with Raspbian Linux on the Raspberry Pi.  </p>"},{"location":"Quick_facts/#more-sbcs-continuously-coming-to-market","title":"More SBCs continuously coming to market","text":"<p>SBC and TV Box manufacturers love to design and ship new products. Unfortunately they do not like to spend time on software and instead rely on community projects such as Armbian to fill in the gaps.</p>"},{"location":"Quick_facts/#benefits","title":"Benefits","text":""},{"location":"Quick_facts/#simple","title":"Simple","text":"<p>BASH or ZSH shell, standard Debian/Ubuntu utilities. Common and specific features can be with minimalistic menu-driven utility. Login is possible via serial, HDMI/VGA or SSH. </p>"},{"location":"Quick_facts/#light","title":"Light","text":"<p>No bloatware or spyware. Special utilities are completely optional. Suitable for newcomers and professionals. </p>"},{"location":"Quick_facts/#optimized","title":"Optimized","text":"<p>A distributed image is compacted to real data size and starts at around of 1G. Size is optimized for SD card usage. Bigger is better. Installing applications later severely reduces the life of your SD card. They were not designed for this type of usage.</p>"},{"location":"Quick_facts/#fast","title":"Fast","text":"<p>Boards are optimized on kernel and userspace level. DVFS optimization, memory log caching, browser profile memory caching, swap usage tuning, garbage commit delay. Our system runs almost read-only and is one of the the fastest Linux for many development boards in just about every case.</p>"},{"location":"Quick_facts/#secure","title":"Secure","text":"<p>Security level is on a stock Debian/Ubuntu level and can be hardened with the configuration utility. It provides a good starting point for industrial or home usage. The system is regularly inspected by professionals within the community. Each official stable build is thoroughly tested. Images are a direct base for all 3rd party builders.</p>"},{"location":"Quick_facts/#supported","title":"Supported","text":"<p>Providing long term updates, security fixes, documentation, user support.</p>"},{"location":"Quick_facts/#smart","title":"Smart","text":"<p>Deep understanding how boards work, how operating system work and how hardware should be designed to run better. Involved in board design. Experience in Linux since early 90\u2019. Specialized in ARM development boards since 2013. </p>"},{"location":"Quick_facts/#open","title":"Open","text":"<p>Open source build script and kernel development, maintenance and distribution for more than 30 different ARM and ARM64 Linux kernels. Powerful build and software development tools. Can run in fully parallel mode. Can run under Docker.</p>"},{"location":"Release_Board-Maintainers/","title":"Board Maintainers","text":""},{"location":"Release_Board-Maintainers/#how-to-become-a-maintainer","title":"How to become a maintainer?","text":"<p>If you are interested in being a maintainer please review our documentation before applying: Board Maintainers Procedures and Guidelines</p> <p>Then, you can apply here and wait for acceptance.  Once accepted you will be added to our various systems and asked to fill out the Maintainer Registry Form to complete your registration process.</p>"},{"location":"Release_Board-Maintainers/#current-maintainers","title":"Current Maintainers","text":"<p>https://www.armbian.com/authors/</p> <p>The authoritative list of <code>board.conf</code> can be found here.</p>"},{"location":"Release_Changelog/","title":"Changelog","text":"<ul> <li>Note: If a new sub-version is released this does not necessarily mean all boards receive a new version number since most of the time these fixes are targeting a specific board or board family only.</li> </ul>"},{"location":"Release_Changelog/#whats-changed","title":"What\u2019s Changed","text":""},{"location":"Release_Changelog/#v2484-2024-10-12","title":"v24.8.4 (2024-10-12)","text":"<ul> <li>Recreated images for Radxa Rock 5C, Nanopi M6</li> </ul>"},{"location":"Release_Changelog/#v2483-2024-09-13","title":"v24.8.3 (2024-09-13)","text":"<ul> <li>Recreated images for Radxa Rock 5 ITX, Rockpi E, Odroid M1, Nanopi R6S</li> </ul>"},{"location":"Release_Changelog/#v2481-2024-08-31","title":"v24.8.1 (2024-08-31)","text":"<ul> <li>Add audio support to hdmi output (meson) by @kernelzru</li> <li>Temporally disable broken build configuration by @igorpecovnik</li> <li>Odroid XU4: Remove deprecated patches by @igorpecovnik</li> <li>RK3588 edge kernel: Add support for Linux 6.10 + introduce stable <code>current</code> branch (6.8) by @ColorfulRhino</li> <li>rk3588: Add board NanoPi R6C by @ColorfulRhino</li> <li>re-add some Khadas Edge 2 patches to edge kernel by @efectn</li> <li>Update JetHome JetHub D2 support by @adeepn</li> <li>rockchip-rk3588 6.8.y: nanopct6: Add NanoPC T6 SPI Flash (v6.8.y version) by @rpardini</li> <li>rockchip64/rk3318-box: move stack further from base addr to allow bigger uboot image by @alex3d</li> <li>RK3588 edge: Add H.264 decoder support by @ColorfulRhino</li> <li>GH Actions: Fix auto-labeler for \u201cDesktop\u201d category and add categories \u201cPatches\u201d and \u201cDocumentation\u201d by @ColorfulRhino</li> <li>extlinux: add DEFAULT_OVERLAYS support by @efectn</li> <li>Disable autosuspend on Gnome based desktops by @igorpecovnik</li> <li>actions: Fix typo in actions/labeler labeler.yml by @ColorfulRhino</li> <li>cli: Fix DEFAULT_OVERLAYS array by @ColorfulRhino</li> <li>khadas-edge2: rename audios by @efectn</li> <li>Fix boot from btrfs fs in uboot 2024.01/2024.04 by @alex3d</li> <li>rockchip-rk3588-edge: fix vepu of rk3588 by @amazingfate</li> <li>board: orangepi-5-plus: Add mainline U-Boot for edge kernel by @ColorfulRhino</li> <li>khadas-edge2: add vendor uboot to images by @igorpecovnik</li> <li>board: nanopi-r6s: Add system-power-controller to pmic by @ColorfulRhino</li> <li>kernel: mainline: Bump 6.10-rc3 to 6.10-rc4 by @ColorfulRhino</li> <li>Sm8250 6.9 by @amazingfate</li> <li>Add support for rk3399 based SBC Leez P710 by @andyshrk</li> <li>Debian buster: disable non-existing backports repository by @igorpecovnik</li> <li>packages: Enable bash-completion on all images by @ColorfulRhino</li> <li>station-m2: Use Raxda u-boot 2024.01 by @chainsx</li> <li>actions: Fix auto-labeler by checking subdirectories by @ColorfulRhino</li> <li>aic8800: update firmware package URL by @RadxaYuntian</li> <li>Move Network Manager bits into extensions by @igorpecovnik</li> <li>fix armbian-leds-state-save.sh: by @alexl83</li> <li>add community support for lckfb taishanpi by @chainsx</li> <li>Deboostrap: switch to last known working tag by @igorpecovnik</li> <li>i3-wm: remove conflicting userspace packages by @igorpecovnik</li> <li>partitioning: fix race condition on loop device allocation by @alex3d</li> <li>rockchip-rk3588: edge: add rkvdec2 support by @amazingfate</li> <li>Rootfs cache is repeating generation over and over again by @igorpecovnik</li> <li>add device-tree-compiler to bsp-cli debian dependencies by @alexl83</li> <li>Run shellfmt to complete code by @igorpecovnik</li> <li>Networking: set proper hook location for extensions by @igorpecovnik</li> <li>ext: fs-cryptroot-support: don\u2019t abuse <code>add_host_dependencies</code> by @rpardini</li> <li>rockchip-rk3588 6.8/610: add <code>i2c8-m2</code> overlay by @rpardini</li> <li>rk3588: Enable <code>current</code> kernel branch for some boards by @ColorfulRhino</li> <li>Add orangepi5-plus UART overlays by @alexl83</li> <li>networking: main-config: introduce <code>NETWORKING_STACK</code> to control network exts; allow \u201cnone\u201d; fix typo by @rpardini</li> <li>Helios64: move to supported section by @igorpecovnik</li> <li>phytium-embedded: add bpf_syscall support by @chainsx</li> <li>Use random-mac only with systemd-networkd (minimal images) by @igorpecovnik</li> <li>Rockcchip RK3588: Rename overlay suffix to match reality by @igorpecovnik</li> <li>distro: trixie: Add riscv64 to supported architectures by @ColorfulRhino</li> <li>Revert \u201cdistro: trixie: Add riscv64 to supported architectures\u201d by @ColorfulRhino</li> <li>kernel: mainline: Bump 6.10-rc4 to 6.10-rc5 by @ColorfulRhino</li> <li>cli: Add command \u201cdts-check\u201d to validate dts files and improve board &amp; patch development overall (resubmission) by @ColorfulRhino</li> <li>tools: Update shellfmt from version 3.6.0 to 3.8.0 by @ColorfulRhino</li> <li>actions: Use \u201call-globs\u201d instead of \u201cany-glob\u201d for negated checks by @ColorfulRhino</li> <li>Fix aml-s9xx-box bsp-cli package upgrade by @SteeManMI</li> <li>DTS-check: Python librarires have troubles to build, disabling for now by @igorpecovnik</li> <li>Fix <code>dts-check</code> command and use Pip for some Python packages instead of APT by @ColorfulRhino</li> <li>bootscript: Remove deprecated bootarg \u201cswapaccount=1\u201d by @ColorfulRhino</li> <li>Odroid M1: add a network rule to rename default name by @igorpecovnik</li> <li>Add new \u201cBSP\u201d and \u201cGitHub\u201d label for the auto-labeler by @ColorfulRhino</li> <li>rk3588: bump default blobs (DDR:1.16, BL31:1.45); remove board-specific blobs from boards that used those versions by @rpardini</li> <li>fix: partitioning: disable <code>orphan_file</code> (<code>FEATURE_C12</code>) for ext4 filesystems on 1.47+ e2fsprogs host by @rpardini</li> <li>aml-s9xx-box: Remove u-boot and update generated extlinux.conf by @SteeManMI</li> <li>GitHub: Improve issue templates and add new <code>Task</code> template for project management by @ColorfulRhino</li> <li>station-m2: update u-boot patches by @chainsx</li> <li>kde-neon: use Neon\u2019s \u201cuser\u201d repo for Jammy &amp; return it to <code>csc</code> status by @rpardini</li> <li>actions: labeler: Fix label colors by removing <code>#</code> prefix by @ColorfulRhino</li> <li>Move board-specific config (Odroid C1) away from family config by @ColorfulRhino</li> <li>Remove haveged to save space and resources by @alexl83</li> <li>Lets not spam users with error message on fresh checkout by @viraniac</li> <li>BPI-CM4: bluetooth: <code>fw version 0xb5d66dcb</code> by @pyavitz</li> <li>Update odroidxu4-current to 6.6.36 by @belegdol</li> <li>Odroid XU4: remove deprecated patch by @igorpecovnik</li> <li>Add Matrix to README by @EvilOlaf</li> <li>extensions/radxa-aic8800: fix aic8800_dkms_file_name for sdio by @andyshrk</li> <li>Bump default boot blobs for RK3528, RK3566 and RK3568 and use them for NanoPi R5C by @ColorfulRhino</li> <li>armbianmonitor <code>-u</code>: rationalize paste server retrying, use ANSI dmesg by @rpardini</li> <li>cli: uboot: Include PYTHONPATH in env for compiling U-Boot by @ColorfulRhino</li> <li>Integrate <code>media</code> boards into the <code>rockchip64</code> family by @ColorfulRhino</li> <li>Cleanup: Remove old torrents by @ColorfulRhino</li> <li>Cleanup: Remove leftovers of former <code>BOARDFAMILY</code> <code>rk322x</code> (now integrated into the <code>rockchip</code> family) by @ColorfulRhino</li> <li>odroidm1/orangepi3b: use default (newer) blobs; rewrite patches; bump -rc u-boot to final by @rpardini</li> <li>Cleanup: Clean leftovers in <code>packages/extras-buildpkgs</code> by @ColorfulRhino</li> <li>Cleanup: Remove some leftover kernel patch folders by @ColorfulRhino</li> <li>radxa-zero3: add <code>edge</code> branch (6.9.y) by picking DT from linux-rockchip#for-next &amp; using Kwiboo\u2019s 24.07 u-boot by @rpardini</li> <li>u-boot: add HOME env for make invocations to avoid binman/Python problems with older u-boot versions by @rpardini</li> <li>rockchip: fix rk322x-box uboot boot order by @paolosabatino</li> <li>Addressing two problems related to <code>wireless at firstlogin script</code> by @igorpecovnik</li> <li>Remove OrangepiZero2 heavily outdated legacy kernel by @igorpecovnik</li> <li>v3: Add new RISCV family \u201cSpacemiT\u201d and board BananaPi F3 by @ColorfulRhino</li> <li>Fix btrfs and xfs resize by @Ratio2</li> <li>aml-s9xx-box: bsp-cli hashing fixes by @rpardini</li> <li>Bump sunxi-current and sunxi64 to latest tag by @EvilOlaf</li> <li>improve fs-cryptroot-support.sh by @alexl83</li> <li>build(deps): bump setuptools from 70.1.1 to 70.2.0 by @dependabot</li> <li>nanopi-r5s: bump blobs &amp; u-boot enhancements for UMS/otg/bootorder by @rpardini</li> <li>Update support for recore boards by @eliasbakken</li> <li>Fixing syntax at Recore and add missing board level variables by @igorpecovnik</li> <li>rootfs: add comment to force rootfs rebuild by @rpardini</li> <li>Test automation - adjust kernel test targets. by @igorpecovnik</li> <li>Fix Khadas Edge 2 uboot build by @efectn</li> <li>Add recore dts patch to series.conf so it gets applied by @eliasbakken</li> <li>bsp-cli/bsp-desktop: hashing fixes by @rpardini</li> <li>Fix several issues related to building U-Boot by @ColorfulRhino</li> <li>Bump rk322x-box and rk3318-box to u-boot v2024.07-rc5 by @paolosabatino</li> <li>fix: firefly-itx-3588j fails to boot, and audio output by @SeeleVolleri</li> <li>u-boot: use <code>pipetty</code> in place of <code>unbuffer</code> by @rpardini</li> <li>Purge <code>s5p6818</code> board family by @ColorfulRhino</li> <li>git: git_ensure_safe_directory(): use env vars instead of changing config by @rpardini</li> <li>Spacemit: use same kernel config as on known to work image by @igorpecovnik</li> <li>Update JetHub boards support by @adeepn</li> <li>Next set of U-Boot compilation fixes by @ColorfulRhino</li> <li>fix uboot compilation issues on Orange Pi 5/5 Plus by @efectn</li> <li>Reverting attempted git-safe folder problem by @igorpecovnik</li> <li>Test automation - optimise testing on targets by @igorpecovnik</li> <li>mixtile-blade3: use default blobs &amp; bump vendor u-boot to <code>next-dev-v2024.03</code> by @rpardini</li> <li>mekotronics: rk3588: u-boot: borrow patch to fix build on newer gcc by @rpardini</li> <li>Move OPi5/5B/5 Plus uboots to Radxa git tree by @efectn</li> <li>rk35xx: Remove <code>legacy</code> kernel target from board configs by @ColorfulRhino</li> <li>rockpi-s: Remove <code>legacy</code> kernel 4.4 support by @ColorfulRhino</li> <li>Armbian-install: add option to wipe target destination by @igorpecovnik</li> <li>Allow to pass docker login when in CI, but not in GitHub actions by @adeepn</li> <li>Adjust Rockpi S patch to align with upstream changes by @igorpecovnik</li> <li>RTW88: 6.6: upstream wireless: <code>fixups</code> by @pyavitz</li> <li>Allwinner: set legacy 6.1.y to last known build tag by @igorpecovnik</li> <li>add new board radxa-e52c by @amazingfate</li> <li>Bananapi M5: Bump u-boot to v2024.07 final by @igorpecovnik</li> <li>u-boot: embed armbian artifact version in CONFIG_LOCALVERSION by @rpardini</li> <li>odroidm1: bump to u-boot v2024.07; replace defconfig patches with hook by @rpardini</li> <li>bump rk3288 tinkerboard to uboot v2024.07 by @paolosabatino</li> <li>Move the <code>NETWORKING_STACK</code> in main config and add armhf support to Trixie by @ColorfulRhino</li> <li>multiple boards: bump u-boot from v2024.07-rcX to v2024.07 final by @rpardini</li> <li>Beautify <code>shellfmt</code> and add board configs to formatting list by @ColorfulRhino</li> <li>thinkpad-x13s: bump to jhovold\u2019s <code>wip/sc8280xp-6.10-rc6</code>; add fprintd back to Trixie; fixes by @rpardini</li> <li>mixtile-blade3: u-boot: join rockchip-rk3588\u2019s default <code>u-boot-radxa-rk35xx</code> scheme by @rpardini</li> <li>nanopi-r6s: Use mainline U-Boot by @ColorfulRhino</li> <li>mekotronics: u-boot: join rockchip-rk3588\u2019s default <code>u-boot-radxa-rk35xx</code> scheme by @rpardini</li> <li>Trixie: remove / replace missing packages by @igorpecovnik</li> <li>build(deps): bump actions/upload-artifact from 4.3.3 to 4.3.4 by @dependabot</li> <li>partitioning: Reduce <code>commit</code> mount option for btrfs and ext4 to 120 by @ColorfulRhino</li> <li>sunxi-6.1: switch to tag:v6.1.97, re-extracting the corrected ones by @The-going</li> <li>To modify the PWM-fan temperature control policy of fine3399 to adjust the fan speed to a lower level by @Lemon1151</li> <li>mt7623: Bump <code>legacy</code> 4.19 to <code>current</code> 6.6 kernel by @ColorfulRhino</li> <li>nanopi-r5s: u-boot: pci enum in preboot; disable armbian-led-state by @rpardini</li> <li>wifi: rtl8852bs: fix build for rockchip by @amazingfate</li> <li>Fix armbian-firstrun service not disabled on start. by @adeepn</li> <li>Add MKNOD capability to dockershell container by @JohnTheCoolingFan</li> <li>Improve Actions UI, introduce Actions run names for all workflows by @ColorfulRhino</li> <li>Inovato Quadra: enable correct PIN to get wifi working by @igorpecovnik</li> <li>Spacemit-k1 / Banananpi F3: adjust u-boot patch by @igorpecovnik</li> <li>thinkpad-x13s: bump to jhovold\u2019s <code>wip/sc8280xp-6.10-rc7</code> by @rpardini</li> <li>mainline-kernel: bump to <code>6.10-rc7</code> by @rpardini</li> <li>wifi: rtl8852bs: add driver for family instead of board by @amazingfate</li> <li>Desktops: replace missing packages with correct ones by @igorpecovnik</li> <li>firstlogin: quote values if space is legal by @jkt628</li> <li>rockchip-rk35xx-vendor enable rtw89_8852be as module by @alexl83</li> <li>sunxi-6.1: Reverse commit 75317a0, fix real reason inability to load kernel by @The-going</li> <li>BananaPi CM4/M2S: <code>Bump u-boot to v2024.07</code> by @pyavitz</li> <li>u-boot: 2024.07: fix boot from btrfs by @alex3d</li> <li>Move teres-i in supported by @Kreyren</li> <li>Add Libre Computer Alta and Solitude by @Tonymac32</li> <li>SpacemiT: BananaPi F3: U-Boot: use TAG and add SCRIPT support. by @pyavitz</li> <li>SpacemiT: BananaPi F3: <code>update to BL v1.0.8</code> by @pyavitz</li> <li>cli: uboot: Move <code>uboot_cflags</code> variable to before its first use by @ColorfulRhino</li> <li>actions: forked-helper: Don\u2019t escape multiline strings by @ColorfulRhino</li> <li>Trixie: remove non-existing packages from Budgie desktop by @igorpecovnik</li> <li>SpacemiT: Legacy: Wireless RTL8852BS: <code>Fixups</code> by @pyavitz</li> <li>VIM1S/4: follow Khadas\u2019s branch for u-boot by @viraniac</li> <li>add customized GHCR_MIRROR_ADDRESS support by @amazingfate</li> <li>actions: Create workflow to update shell tools via auto-PR by @ColorfulRhino</li> <li>extensions: Establish some consistency with extension logging by @ColorfulRhino</li> <li>rk35xx-vendor: bump to latest sdk release rkr3 by @amazingfate</li> <li>JetHome: Update bsp: fix jethub-init to support /etc/defaults by @adeepn</li> <li>add rk3576 support to rk35xx and armsom sige5 by @amazingfate</li> <li>Enable sound and battery for Retro Lite CM5 by @ginkage</li> <li>Bump koalaman/shellcheck from 0.9.0 to 0.10.0 in <code>lib/functions/general/shellcheck.sh</code> by @github-actions</li> <li>build(deps): bump setuptools from 70.2.0 to 70.3.0 by @dependabot</li> <li>Bump oras-project/oras from 0.16.0 to 1.2.0 in <code>lib/functions/general/oci-oras.sh</code> by @github-actions</li> <li>Bump sharkdp/bat from 0.23.0 to 0.24.0 in <code>lib/functions/general/bat-cat.sh</code> by @github-actions</li> <li>Add board config for Retro Lite CM5 by @ginkage</li> <li>oci-oras: fix for ORAS &gt; 1.x, as it now requires <code>HOME</code> to be set (fixes <code>download-artifact</code>) by @rpardini</li> <li>mesa-vpu: use kisak mesa ppa instead of oibaf by @amazingfate</li> <li>utils-dpkgdeb: force rebuild of all artifacts, due to https://github.com/armbian/build/pull/6964 (ORAS change) by @rpardini</li> <li>Temporally move TI build targets to EOS as Git is out of reach by @igorpecovnik</li> <li>urgent: Hotfix for rk3399 boot by @paolosabatino</li> <li>Bump rockchip64 edge kernel to 6.10 by @paolosabatino</li> <li>rockchip: bump edge kernel to 6.10 by @paolosabatino</li> <li>Fix rtl8189fs WiFi driver by @schwar3kat</li> <li>Update odroidxu4-current to 6.6.41 by @belegdol</li> <li>build(deps): bump setuptools from 70.3.0 to 71.1.0 by @dependabot</li> <li>Add HDMI-rx to linux 6-10 for rk3588 by @benhoff</li> <li>SpacemiT: <code>write_uboot_platform</code>: eMMC Support by @pyavitz</li> <li>fix rk3568-roc-pc by @chainsx</li> <li>Fixed Tinker-edge-r HDMI 4K bug by @ARC-MX</li> <li>Fix for no network inside Docker container by @igorpecovnik</li> <li>add new board armsom-aim7-io by @amazingfate</li> <li>Repo management: rework to increase reliability and speed by @igorpecovnik</li> <li>add new board RK3328 Heltec HT-M2808 by @sicXnull</li> <li>mesa-vpu: install backported mesa from obs for bookworm panthor driver by @amazingfate</li> <li>Awarding regular contributors - adding a special PR tag by @igorpecovnik</li> <li>UEFI x86 and arm64: Bump EDGE kernels to 6.10.y by @igorpecovnik</li> <li>Debian: drop support for Budgie on Trixe / Bookworm.  by @igorpecovnik</li> <li>rockchip64-edge: add rkvdec2 for rk356x by @amazingfate</li> <li>Switch Retro Lite CM5 back to legacy U-Boot by @ginkage</li> <li>mesa-vpu: install chromium package instead of chromium-browser by @efectn</li> <li>Extend mesa-vpu extension to load unpatched Chromium by default by @igorpecovnik</li> <li>sun55iw3-syterkit: update kernel config by @chainsx</li> <li>Meson64 edge to 6.10 by @SteeManMI</li> <li>kernel: meson-s4t7: update config to match latest fenix changes by @viraniac</li> <li>Update odroidxu4-current to 6.6.43 by @belegdol</li> <li>thinkpad-x13s: bump to jhovold\u2019s 6.10 (from -rc7) by @rpardini</li> <li>Update sunxi-6.6, switch to v6.6.43 by @The-going</li> <li>build(deps): bump setuptools from 71.1.0 to 72.1.0 by @dependabot</li> <li>build(deps): bump ossf/scorecard-action from 2.3.3 to 2.4.0 by @dependabot</li> <li>Adjust patches that are broken or they found a way upstream by @igorpecovnik</li> <li>Update board config h96-max to mainline u-boot by @hqnicolas</li> <li>Repo management: base-files are placed under wrong repo key by @igorpecovnik</li> <li>config: rk35xx: vendor: enable CONFIG_NVMEM_ROCKCHIP_OTP by @amazingfate</li> <li>Cosmetic fix: do not show repository keys that doesn\u2019t exits by @igorpecovnik</li> <li>Set fixed MAC address for Nanaopi R6S series by @igorpecovnik</li> <li>bsp: armbian-install: fix the search for eMMC and SD card devices by @The-going</li> <li>Move meson edge 6.10 by @SteeManMI</li> <li>Armsom5 - switch to vendor branch and add BOARD_MAINTAINER field to suppress warnings by @igorpecovnik</li> <li>Re-enabling KDE Neon Jammy builds by @igorpecovnik</li> <li>Meson 6.10: adjust patches to align with upstream changes by @igorpecovnik</li> <li>Bump Marvell mvebu EDGE family to 6.10.y by @igorpecovnik</li> <li>Add latest Linux Mint versions, Virginia and Wilma, to supported hosts. by @schwar3kat</li> <li>MBa8MPxL fixes and updates by @tq-schmiedel</li> <li>build(deps): bump actions/upload-artifact from 4.3.4 to 4.3.5 by @dependabot</li> <li>Odroid XU4: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>Udoo &amp; Cubox: imx6: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>RaspberryPi: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>Improve partitioning, set correct partition type UUID for root filesystem by @ColorfulRhino</li> <li>MBa8MPxL: rework uboot patches by @tq-schmiedel</li> <li>Clarify label for entering giveaway - code completion, all authors counts by @igorpecovnik</li> <li>Odroid XU4: Remove deprecated patches on CURRENT branch by @igorpecovnik</li> <li>uboot: rk3576: add patches to enable tf card boot by @amazingfate</li> <li>nanopi-r5c: enable KASLR (current|edge) by @alexl83</li> <li>orangepi5-plus: patch u-boot 2024.07 to support KASLR by @alexl83</li> <li>orangepi5: fix SPI flash boot by @efectn</li> <li>sunxi-6.9: Add megous patches and switch EDGE to tag:v6.9.12 by @The-going</li> <li>add general 2024.07 patches to orangepi5-plus u-boot by @alexl83</li> <li>nanopi-r5c: add general u-boot 2024.07 patches by @alexl83</li> <li>Send summaries of PR and merges to main chat by @EvilOlaf</li> <li>BigTreeTech CB1 upstreaming by @JohnTheCoolingFan</li> <li>disable saving state for invalid leds brought up in latest kernels by @alexl83</li> <li>Fix armbian-firmware-full package build. by @h-s-c</li> <li>BigTreeTech CB1: current: Enable IR Receiver by @JohnTheCoolingFan</li> <li>Allwinner legacy and current - bump to latest version by @igorpecovnik</li> <li>Fixed tinker-edgr-r board GPU bug, drivers:regulator:fan53555:add new device chip id by @ARC-MX</li> <li>Link to the actual pr rather than commit with no reference by @EvilOlaf</li> <li>Discord: fix pr being announce multiple times by @EvilOlaf</li> <li>RaspberryPi: Rewrite kernel configs for legacy and current by @igorpecovnik</li> <li>UEFI kernels: rewrite kernel config for legacy - current - edge by @igorpecovnik</li> <li>Add aic8800 driver for Rock 3C variant by @Zokhoi</li> <li>Prevent running announce script in forks by @igorpecovnik</li> <li>fix firefly itx3588j u-boot patches not applied by @SeeleVolleri</li> <li>aic8800 DKMS driver: fix logic when extension is used by @igorpecovnik</li> <li>build(deps): bump actions/upload-artifact from 4.3.5 to 4.3.6 by @dependabot</li> <li>build(deps): bump pyyaml from 6.0.1 to 6.0.2 by @dependabot</li> <li>attempt to fix pr announce for all contributors by @EvilOlaf</li> <li>Add board Alfred Smart Gateway GZ80X by @pyavitz</li> <li>JetHome: Put module blacklist in the board configs of the respective boards by @adeepn</li> <li>Gateway GZ80X: <code>use actual u-boot.bin</code> by @pyavitz</li> <li>JetHome: fix uboot patchset for JetHub D2 by @adeepn</li> <li>meson64: refresh <code>drv-spi-spidev-remove-warnings.patch</code> by @alexl83</li> <li>JetHome: Update JetHub D2 dts by @adeepn</li> <li>rockchip64: refresh <code>drv-spi-spidev-remove-warnings.patch</code> by @alexl83</li> <li>Support kernel compilation with Clang/LLVM by @Randl</li> <li>rockchip64: Enable <code>CONFIG_SECURITY_DMESG_RESTRICT</code> kernel option by @alexl83</li> <li>JetHome: update list of preinstalled packages for JetHub devices by @adeepn</li> <li>RFC: provide KASLR support to u-boot v2024.07 general availability by @alexl83</li> <li>Change KBUILD to <code>build@armbian</code> for kernel builds by @ColorfulRhino</li> <li>rootfs: add comment to force rootfs rebuild by @igorpecovnik</li> <li>Mesa extension: adjust KDE related troubles with packages downgrade by @igorpecovnik</li> <li>sunxi 6.10: Add megous patches by @The-going</li> <li>rockchip-rk3588: Bump <code>edge</code> kernel from 6.10 to 6.11-rc and <code>current</code> from 6.8 to 6.10 by @efectn</li> <li>fix ps4 controllers and clones on rk3588 vendor and legacy kernel by @monkaBlyat</li> <li>actions: forked-helper: Run only if secret is set and simplify workflow by @ColorfulRhino</li> <li>Fix loop device search in docker when there are no loop devices before container launch by @JohnTheCoolingFan</li> <li>build-framework: Switch to next VERSION and update main README by @igorpecovnik</li> <li>rockchip-rk3588: Enable <code>CONFIG_SECURITY_DMESG_RESTRICT</code> kernel option by @alexl83</li> <li>KDE Neon: hack must be implemented only on Ubuntu Noble / Oracular by @igorpecovnik</li> <li>Revert \u201cTemporally move TI build targets to EOS as Git is out of reach\u201d by @igorpecovnik</li> <li>Release: board status check and adjustment by @igorpecovnik</li> <li>Add Board X96Q TV Box LPDDR3 H313 by @sicXnull</li> <li>Discord announcement: push only when label \u201cNeeds review\u201d is set by @igorpecovnik</li> <li>WIP: add initial support for Youyeetoo R1 V3 by @SuperKali</li> <li>Build automation: update kernel test targets for many boards by @igorpecovnik</li> <li>Build automation: Adjust test targets for remaining boards by @igorpecovnik</li> <li>cli: packages: use iputils-ping instead of inetutils-ping by @amazingfate</li> <li>rockchip-rk3588: current: add <code>rfkill-bt</code> device node to Radxa Rock-5B by @alexl83</li> <li>BananaPi M2S: <code>remove fan control</code> by @pyavitz</li> <li>Gateway AM-GZ80x: <code>Re-brand as Amper &amp; update u-boot to v2024.04</code> by @pyavitz</li> <li>Update odroidxu4-current to 6.6.47 by @belegdol</li> <li>rk3588: Bump kernel from 6.11-rc3 to 6.11-rc4 by @ColorfulRhino</li> <li>Add OpenSBI compilation to D1 by @Randl</li> <li>Debian Trixie Cinnamon: remove deprecated package by @igorpecovnik</li> <li>Framework: disable armbian repository while generating rootfs cache by @igorpecovnik</li> <li>build(deps): bump setuptools from 72.1.0 to 72.2.0 by @dependabot</li> <li>Framework: expand package installing function with custom parameter by @igorpecovnik</li> <li>Expand MESA extension fix to Jammy userspace by @igorpecovnik</li> <li>Framework: bump tmpfs size as we are going over by @igorpecovnik</li> <li>Mesa fixes applies only to armhf and arm64. Adjusting by @igorpecovnik</li> <li>Repository management: add config driven BSP package modification by @igorpecovnik</li> <li>Board config ayn-odin2 temporally disable broken build by @igorpecovnik</li> <li>Improved freezing mechanism and README by @igorpecovnik</li> </ul>"},{"location":"Release_Changelog/#v2455-2024-25-7","title":"v24.5.5 (2024-25-7)","text":"<ul> <li>Recreated Bananapi M7, Khadas Edge 2, Orangepi 5, Orangepi 5 Plus</li> <li>Sent rk35xx-vendor (6.1.75) and rk35xx-edge (6.10.y) kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2454-2024-21-7","title":"v24.5.4 (2024-21-7)","text":"<ul> <li>Recreated Radxa ROCK5 ITX images</li> <li>Recreated Olimex Teres images since they were broken</li> <li>Sent sunxi64-current kernel to the stable repository</li> <li>Sent rk35xx-vendor kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2453-2024-01-7","title":"v24.5.3 (2024-01-7)","text":"<ul> <li>Recreated Helios64 since board was moved under supported</li> <li>Sent rockchip64-current kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2452-2024-18-6","title":"v24.5.2 (2024-18-6)","text":"<ul> <li>Recreated Khadas Edge 2 images due to lack of 3D / video acceleration support in 6.1.y</li> <li>Recreated Orangepi 5 plus images due to missing support for 32GB variant</li> <li>Recreated Odroid M1 images with new minimal images and KDE Neon desktop</li> <li>Added Orangepi 5 Pro images</li> </ul>"},{"location":"Release_Changelog/#v2451-2024-25-5","title":"v24.5.1 (2024-25-5)","text":""},{"location":"Release_Changelog/#closed-projects","title":"Closed projects","text":"<ul> <li>AR-1759 Improve Khadas support</li> <li>AR-1988 Resolve Rockchip patch maintenance nightmare</li> <li>AR-2087 Add functionality to freeze git resources</li> <li>AR-2095 Improve support for Radxa Rock S 0 and test USB and Ethernet</li> <li>AR-2100 Add KDE Neon desktop to Armbian Jammy</li> <li>AR-2144 Add support for the Orange Pi 5 Pro</li> <li>AR-2145 Add mainline Panthor driver to 6.1</li> <li>AR-2148 Add board Bananapi M7 to vendor kernel 5.10 and 6.1</li> <li>AR-2153 Add board FriendlyElec CM3588 NAS board</li> <li>AR-2156 Add support for Radxa ROCK 5 ITX</li> <li>AR-2158 Add board Radxa Zero 3 with overlays</li> <li>AR-2171 Drop DEBUG_KERNEL/DEBUG_INFO disables; force EXPERT=y and bring back CONFIG_GPIO_SYSFS=y for all kernels</li> <li>AR-2172 Update meson edge to 6.8 kernel</li> <li>AR-2173 Change the way APT repository is getting updated</li> <li>AR-2174 Thinkpad-x13s: drop steev\u2019s kernel and switch to jhovold\u2019s wip/sc8280xp-6.9</li> <li>AR-2178 Fix u-boot build for Odroid C1 + fix onboard usb hub on Odroid C1</li> <li>AR-2179 Phytium_embedded: update kernel config from phytium repo</li> <li>AR-2180 Rockchip-rk3308-current: sakura pi rk3308b adds kernel 6.6 and 6.8 support</li> <li>AR-2185 Switch odroidxu4-current kernel to 6.6</li> <li>AR-2186 VIM1S/VIM4: Allow building on arm64 platform</li> <li>AR-2187 VIM1S/VIM4: Add support for emmc + NVME/USB booting</li> <li>AR-2196 CLI: Add command \u201cdts-check\u201d to validate dts files and improve board &amp; patch development overall</li> <li>AR-2197 Add support for allwinner T527 Avaota-A1</li> <li>AR-2203 Rockchip-rk3308-current: add support for sakura pi rk3308b</li> <li>AR-2208 Update sm8250: kernel add current and edge branch And Update Odin2: add kernel update hook script</li> <li>AR-2212 H96-TVbox-rk3566 Board Bring Up</li> <li>AR-2215 Enable vendor kernel branch on Khadas Edge 2</li> <li>AR-2216 arm64: swiotlb: Reduce the default size if no ZONE_DMA bouncing needed</li> <li>AR-2218 FriendlyElec CM3588-NAS: device tree fixes &amp; improvements</li> <li>AR-2222 Rock-5b: move edge (only) to mainline/Kwiboo u-boot 2024.04</li> <li>AR-2226 FriendlyElec CM3588 NAS: Add mainline kernel support</li> <li>AR-2227 mekotronics: mainline u-boot (next/Kwiboo rk3xxx-2024.04, generic-rk3588_defconfig)</li> <li>AR-2229 rk3588: vendor-boogie-panthor</li> <li>AR-2230 rockchip-rk3588: it\u2019s vendor boogie panthor time (experimental)</li> <li>AR-2235 Bump meson64 edge from 6.7 to 6.8</li> <li>AR-2246 Add support for Radxa ZERO 3E/3W</li> <li>AR-2250 Rock 4C+: update and cleanup boot config</li> <li>AR-2265 cli: rewrite--patches: rewrite only patches needing a rebase <li>AR-2267 Add SK-AM68 board support</li> <li>AR-2270 rk35xx/rockchip-rk3588: vendor: switch to armbian/linux-rockchip#rk-6.1-rkr1</li> <li>AR-2274 Add tqma8mpxl boards support</li> <li>AR-2276 cli: introduce rewrite-uboot-patches cli command, works similar to the kernel one</li> <li>AR-2281 Add csc hinlink h6xk boards</li> <li>AR-2282 Kernel: Enable *NVMe-over-TCP* for rk35xx/rk3588/rockchip64/uefi/wsl</li> <li>AR-2289 qemu-uefi-x86: new board for virtualized environment with serial console support, kernel boot messages</li> <li>AR-2290 cli: introduce kernel-dtb cli command, to build only DTB, and output full preprocessed dts source</li> <li>AR-2291 cli: introduce inventory-boards cli command, for hopefully painless &amp; useful one-board-per-line CSV output</li> <li>AR-2292 Add board: FriendlyElec CM3588 NAS</li> <li>AR-2293 Add vendor branch for new 6.1-rkr1 BSP vendor kernel, and keep legacy for the 5.10-rkr6 BSP vendor kernel</li> <li>AR-2294 Phytium-embedded: add support for 4Gb Phytium Pi</li> <li>AR-2295 Rockchip RK3588-edge: rewrite kernel patches and configs against v6.8-rc6</li> <li>AR-2297 Refactor automatic armbian-firstlogin</li> <li>AR-2299 Develop build config for board BananaPi M4 Zero</li> <li>AR-2301 Develop and add Ayn Odin2 build config</li> <li>AR-2307 Thinkpad-x13s: bump to steev\u2019s 6.7.y; enable noble userspace; bump alsa-ucm-conf hack to master</li> <li>AR-2308 Debootstrap: use latest git for Ubuntu/Debian debootstrap instead of host-installed</li> <li>AR-2322 Develop PPA for (patched) aarch64 Chromium</li> <li>AR-2327 Add support for RK3588 based Cool PI CM5 EVB</li>"},{"location":"Release_Changelog/#closed-tasks","title":"Closed Tasks","text":"<ul> <li>AR-2043 armbian-install should do rsync \u2013one-file-system</li> <li>AR-2057 enable DRBD in the kernel config of mvebu</li> <li>AR-2077 Orangepi 5: update memory blobs</li> <li>AR-2079 Enable ssdm autologin and apply theme</li> <li>AR-2092 Drop repository for unsupported Releases</li> <li>AR-2096 USB Gadget mode for rockchip 32 bit</li> <li>AR-2101 Cleanup desktop packages</li> <li>AR-2102 Adjusting pull request template for documentation</li> <li>AR-2103 Disable automatic enablement of Nvidia proprietary drivers on x86</li> <li>AR-2105 Rockchip bootscripts: `Failed to load \u2018\u2026-fixup.scr\u2019` and `Unknown command \u2018kaslrseed\u2019`</li> <li>AR-2110 Fix rtl8723cs for kernel 6.8</li> <li>AR-2111 Bump rockchip edge kernel to 6.8</li> <li>AR-2112 Bump rockchip64 edge kernel to 6.8</li> <li>AR-2131 Builds fail for EOS distributions (for example focal)</li> <li>AR-2132 Fail at check_loop_device: device node doesn\u2019t exist and `$LOOP=`</li> <li>AR-2135 Move Firefly station M2 to RK35xx family</li> <li>AR-2136 Synchronise Rock 5 ITX from Radxa repository</li> <li>AR-2137 Cleanup and merge OPi5 Plus device tree </li> <li>AR-2138 Add support for the Orange Pi 5 Pro to 6.1 </li> <li>AR-2139 Add armsom sige1 support to 6.1</li> <li>AR-2140 Add Radxa Rock 5c support to 6.1</li> <li>AR-2141 Add dynamic-power-coefficient properties to all cores</li> <li>AR-2142 Sync Panthor with drm-misc-next by adding missing commits</li> <li>AR-2146 Upgrade RKNPU driver to 0.9.6</li> <li>AR-2147 Cleanup Khadas edge 2 device tree</li> <li>AR-2149 Use simple-audio-card for HDMI sound for rk3528</li> <li>AR-2151 Carrying over some CM5-related commits from Radxa 3.4 branch</li> <li>AR-2152 Add missing led gpio for hinlink h66k</li> <li>AR-2155 Add cooling-maps and pwm-fan support for Station M3</li> <li>AR-2159 Allow FFmpeg to capture from HDMI input</li> <li>AR-2160 Add Ubuntu Noble support for Rockchip multimedia extension</li> <li>AR-2161 Switch CM3588 NAS to kwiboo uboot</li> <li>AR-2162 Declare Ubuntu Noble as supported build target</li> <li>AR-2164 Rockchip rk3588 edge: add Hantro G1 VDPU and RGA2</li> <li>AR-2165 Rockchip RK3588 EDGE: add generic pwm overlays from vendor kernel</li> <li>AR-2166 rk35xx: drop vendor-boogie-panthor BRANCH; it has been integrated into vendor</li> <li>AR-2167 Multiple boards: fixes for board file syntax / missing vars (fixing JSON matrix prepare</li> <li>AR-2168 VIM1S/VIM4: initialize video firmware symlink</li> <li>AR-2169 Use oibaf and v4l2 extension in desktops only</li> <li>AR-2170 Treat sid and unstable as synonyms in distro-specific.sh</li> <li>AR-2175 Add latest Ubuntu development branch Oracular</li> <li>AR-2176 Armsom rk3588 boards: use radxa\u2019s new uboot</li> <li>AR-2177 Phytium_embedded: update phytium u-boot binary</li> <li>AR-2182 Enable android binder to support android containers like anbox or waydroid on rk3588 edge kernel builds</li> <li>AR-2190 Rockchip: bump rk322x u-boot to v2024.01 and support HDMI</li> <li>AR-2191 Switch Radxa u-boot to more recent branch</li> <li>AR-2192 Odroidn2: u-boot: fix eMMC stability</li> <li>AR-2198 Rockchip64: cleanup rk3318-box hdmi patches</li> <li>AR-2199 Add current kernel support for phytium-embedded</li> <li>AR-2201 Board: h96 rk3566 HDMI sound &amp; audio fix</li> <li>AR-2202 Odin2 Use Custom ABL, boot from TF Card</li> <li>AR-2204 H96-tvbox-3566 device tree fixes &amp; improvements: wifi fix, Led and IR enable</li> <li>AR-2206 rk35xx-vendor: enable panthor gpu driver</li> <li>AR-2207 Rockchip64: bump rk3318-box uboot to v2024.01</li> <li>AR-2209 Typo: while Fosstodon is the instance, Mastodon is the software used.</li> <li>AR-2210 Rockchip64-edge: add pcie support to orangepi rk3399</li> <li>AR-2214 Rockchip-rk3588-edge: opi5b: add support for pcie wifi </li> <li>AR-2217 rockchip-rk3588-edge: opi5: fix typec and add support for GPU</li> <li>AR-2219 Unlock Code and Thunderbird from all distributions</li> <li>AR-2223 Add bluedevil for bluetooth support</li> <li>AR-2231 rockchip: rewrite dts for rock3c</li> <li>AR-2233 DE: KDE: add package kscreen</li> <li>AR-2236 Rockpro64: bump u-boot to v2024.04-rc4; use binman-produced bins</li> <li>AR-2237 Fix kernel compilation for meson-s4t7 due to Khadas vendor common_drivers not working without DEBUG enabled</li> <li>AR-2238 Fix forced kernel options and make kernel-config consistent with rewrite-kernel-config</li> <li>AR-2239 Rockchip RK3588 edge: enable nodes for armsom-sige7, rock 5a and h88k</li> <li>AR-2240 armsom-sige7: add ap6275p wifi support</li> <li>AR-2241 Rockchip-rk3588-edge: refresh cpufreq patches and auto fan control for Edge2</li> <li>AR-2242 GH Actions: Beautify kernel hardening analysis</li> <li>AR-2243 Khadas-vim3l/khadas-vim3: enable networking cmds in u-boot</li> <li>AR-2244 Rockchip-rk3588-edge: khadas-edge2: add support for GPU and improve display modes</li> <li>AR-2245 Build script: configuration: Check if ROOTFS_TYPE is supported by build host</li> <li>AR-2247 Create linux-libc-dev when building kernel packages</li> <li>AR-2248 bsp-cli: include BOOT_SOC to /etc/armbian-release and bsp-cli hash</li> <li>AR-2255 Enable module snd_aloop for linux-rk35xx legacy and vendor</li> <li>AR-2260 BananaPi M4 Zero: add gpu and uart nodes</li> <li>AR-2262 GH Actions: Kernel hardening analysis: Exclude RISC-V configs</li> <li>AR-2266 Expand predicted size for rootfs for abl type of images</li> <li>AR-2269 Extend PR template when asking for documentation</li> <li>AR-2271 rk35xx-vendor: Add kernel patching config</li> <li>AR-2272 rk35xx-vendor: add rk3528 and lima driver support </li> <li>AR-2275 GH Actions: Update forked-helper and add some doc on secrets in workflow\u2019s README.md</li> <li>AR-2277 u-boot: rewrite/rebase u-boot patches for a few boards; bump odroidm1 and orangepi3b</li> <li>AR-2280 Show correct reason about omit tmpfs usage if FORCE_USE_RAMDISK is set</li> <li>AR-2286 BananaPi M4 Zero: enable 8821cu and blacklist rtw88_8821cu</li> <li>AR-2287 lib: drop old boot_logo code; keep png/gif as they\u2019re used for plymouth</li> <li>AR-2288 Rk35xx vendor kernel: add some network drivers</li> <li>AR-2296 meson-6.7: Copy patches from 6.6</li> <li>AR-2298 Prepare-host/host-release: enable noble for building</li> <li>AR-2303 kernel: call make with INSTALL_MOD_STRIP=1 so modules are stripped</li> <li>AR-2304 wsl2: arm64: current: DRM/FB stuff so wsl2-arm64 can be used in HyperV with video &amp; keyboard</li> <li>AR-2305 mekotronics 3588: add SRC_CMDLINE, for use with u-boot-menu extension</li> <li>AR-2306 khadas-vim3/khadas-vim3l: u-boot v2024.01: enable more compression, kaslr, and led config options via hook</li> <li>AR-2324 Optimize the kernel device tree patch for rk3399-firefly</li> <li>AR-2325 Give shellcheck directions (to /dev/null for dynamic, to repo-relative path for static) for all sourced references</li> <li>AR-2328 Extensions: rk-panthor: mesa-oibaf + DEFAULT_OVERLAYS=\u201dpanthor-gpu\u201d</li> <li>AR-2333 Set linux-image packages to provide wireguard-modules</li> <li>AR-2335 Add chromium v4l2 encoder/decoder udev rules for all boards</li> </ul>"},{"location":"Release_Changelog/#solved-bugs","title":"Solved Bugs","text":"<ul> <li>AR-650 Odroid N2+ possible boot problems on eMMC</li> <li>AR-1582 CI on our runners sometimes throws out error regarding loop devices</li> <li>AR-2034 RockPI-S does WiFi broken on kernels &gt;6.5</li> <li>AR-2045 Resolve extensions rootfs encryption conflicts</li> <li>AR-2070 VIM1S/VIM4: Booting from UHS sdcard only works intermittently</li> <li>AR-2076 Fix random MAC address on Orangepi 5 series</li> <li>AR-2080 Lightdm greeter is without wallpaper - black background</li> <li>AR-2086 Home assistant supervised fails to install on Khadas VIM1S</li> <li>AR-2090 Debootstrap is again too old for latest releases</li> <li>AR-2094 Build failed during partprobing of /dev/loop device.</li> <li>AR-2097 GH Actions: \u201cKernel hardening analysis (pull request)\u201d kconfig-hardened-check: No such file or directory</li> <li>AR-2098 Torrent generation fails silently</li> <li>AR-2121 RockPi-S WiFi broken again on kernel\u2019s &gt;6.7</li> <li>AR-2125 Deboostrap trixie fails at stage 2 </li> <li>AR-2143 Fix Orange Pi 5 Plus load average &gt;= 1</li> <li>AR-2150 Fixing deadlock issue with spin_lock in interrupt handling</li> <li>AR-2154 Fix CEC on rk356X on tv restart</li> <li>AR-2157 Rock-5a: pull down data-strobe to fix emmc compatibility</li> <li>AR-2163 Restore armbian-config desktop icon</li> <li>AR-2181 Rockchip Rock 5C: Fix RK3582 with disabled rkvdec node</li> <li>AR-2183 Fix memory size detection for 1.5GB Orange Pi Zero 3 board on v2024.01 u-boot release</li> <li>AR-2184 rockchip64: rework drm hunk due to mainlined patch</li> <li>AR-2188 Make debian/trixie debootstrap-able again</li> <li>AR-2189 Fix PCIe for RK35xx+Fix ROCK5A PCIe device tree</li> <li>AR-2193 Hostdep fixes for Noble distutils and pyelftools removed hooks</li> <li>AR-2200 Fixing broken device tree for H96 tvbox 3566</li> <li>AR-2205 Fixing not operational USB port on Udoo quad</li> <li>AR-2211 Ramlog: harden the zram mounting</li> <li>AR-2213 Restore wireless functionality on Rock Pi S</li> <li>AR-2220 Rockchip: update DTS patches for Orangepi R1 Plus</li> <li>AR-2221 riscv64: fixes/skips for building (sans Docker) ON riscv64</li> <li>AR-2224 Disable mtd-tools on Armbian Noble for armhf architecture</li> <li>AR-2225 Fixing broken user space packages dependencies and small optimisations</li> <li>AR-2228 RTW88: 6.x.y patches adjustment due to upstream changes</li> <li>AR-2232 Raspberry 5 has troubles booting when faster memory access is enabled</li> <li>AR-2234 BananaPi CM4/M2S: The fan on the unit is constantly running. So lets set thermal trip points</li> <li>AR-2252 Rockchip RK3588 edge: fix wrong gpu node patch</li> <li>AR-2253 Rockchip RK3588 edge: improve display modes support</li> <li>AR-2273 Xiaomi elish fix 6.7: fixing broken dsi panel</li> <li>AR-2283 Remove hard-coded defaults from repository management tool</li> <li>AR-2285 Several small fixes for Banana Pi M4 Zero</li> <li>AR-2300 Rockchip RK3588 edge: Orangepi 5 pluse: fix USB3 Host</li> <li>AR-2309 Fixing small problems in wireless driver RTW88: RTL8822/21CU code</li> <li>AR-2311 Meson64: fixing Librecomputer Lafrite boot failure</li> <li>AR-2323 Resolving Armbian Noble incompatibility with Rockchip VPU extension</li> <li>AR-2326 Radxa rock-5c: rename wireless interface name to a static one</li> <li>AR-2329 Add new user to render group, otherwise the non-root user do not have access /dev/dri/renderD128 on RK3399</li> <li>AR-2334 Resolve dependency issues with armbian-config</li> </ul>"},{"location":"Release_Changelog/#closed-sub-task","title":"Closed Sub-task","text":"<ul> <li>AR-2082 Make initial devicetree to make most parts work (USB2, USB3, SD etc.)</li> <li>AR-2083 Add Type-C support</li> <li>AR-2084 Make AP6275P work on upstream kernel</li> <li>AR-2085 Add Khadas Edge2 support to upstream Khadas MCU driver</li> </ul>"},{"location":"Release_Changelog/#v2426-2024-6-5","title":"v24.2.6 (2024-6-5)","text":"<ul> <li>recreated images for Bananapi CM40IO, Bananapi M7</li> </ul>"},{"location":"Release_Changelog/#v2425-2024-4-2","title":"v24.2.5 (2024-4-2)","text":"<ul> <li>recreated images for Rpi5 due to a bug</li> </ul>"},{"location":"Release_Changelog/#v2424-2024-3-12","title":"v24.2.4 (2024-3-12)","text":"<ul> <li>added KDE Neon 6 desktop images for generic UEFI targets, Orangepi 5 / 5+ (with new vendor kernel 6.1.y) and Odroid M1</li> </ul>"},{"location":"Release_Changelog/#v2423-2024-2-26","title":"v24.2.3 (2024-2-26)","text":"<ul> <li>recreated images for Bigtreetech CB1</li> </ul>"},{"location":"Release_Changelog/#v2421-2024-02-18","title":"v24.2.1 (2024-02-18)","text":""},{"location":"Release_Changelog/#closed-projects_1","title":"Closed projects","text":"<ul> <li>AR-1657 Address DNS resolve with Debian Bookworm</li> <li>AR-1797 Auto-testing: install all kernels that are defined</li> <li>AR-1888 fix sluggish hdmi console for vim1s and vim4</li> <li>AR-1988 Resolve Rockchip patch maintenance nightmare</li> <li>AR-2061 Add Orangepi Zero3</li> <li>AR-2062 Mixtile Blade 3 refactor / rockchip-rk3588 edge 6.7</li> <li>AR-2063 Add new board of ASUS Tinker-Edge-R</li> <li>AR-2064 Khadas VIM1S &amp; VIM4 - 5.15 kernel bump</li> <li>AR-2065 Add Xiaomi Mi10(umi) support</li> <li>AR-2066 aml-s9xx-box: Update u-boot-s905x2-s922 to u-boot version 2024.01</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_1","title":"Closed Tasks","text":"<ul> <li>AR-1879 JetHome: update u-boot to 2023.10</li> <li>AR-1985 Generate new function to display download links</li> <li>AR-1990 Move forgotten overlays from Odroid M1</li> <li>AR-2033 revert JetHub H1/D1 wifi driver from rtw88 to vendor</li> <li>AR-1552 Rework support for jethub devices</li> <li>AR-1696 Khadas Edge (RK3399) has wrong name and picture</li> <li>AR-1737 Merge Odroid M1 into rockchip64 family</li> <li>AR-1870 Git workaround failure</li> <li>AR-1925 Move wifi-4003-uwe5622-adjust-for-rockchip to the wireless section</li> <li>AR-1984 Move live patch to extension</li> <li>AR-2000 Several small maintainace tasks</li> <li>AR-2004 Add Ubuntu Noble to the build framework</li> <li>AR-2005 Bump all current kernels to 6.6 LTS</li> <li>AR-2012 Please set dpkg vendor to Armbian in all images</li> <li>AR-2016 Patchset for Rockchip (32b) needs to be ported to 6.7</li> <li>AR-2017 Patchset for Rockchip 64b needs to be ported to 6.7</li> <li>AR-2021 Add Home assistant extensions</li> <li>AR-2032 LVM support, CRYPTROOT and current implementation.</li> <li>AR-2035 Cloud-Init Supprot and Armbian First</li> <li>AR-2050 Add support for Radxa Rock S 0</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_1","title":"Solved Bugs","text":"<ul> <li>AR-1704 Bookworm Gnome lacks wallpaper withing lightdm</li> <li>AR-1735 Command docker-shell seems to be broken</li> <li>AR-1813 Orangepi One + fails to bring up NIC</li> <li>AR-1861 Hashing on wireless patches seems to not work</li> <li>AR-1908 Khadas VIM3 problem with high res displays</li> <li>AR-1915 Extlinux / Khadas Edge 2 install to eMMC fails</li> <li>AR-1933 Fix GitHub labeling anomaly </li> <li>AR-1981 Edge Kernel (6.6.x) breaks WiFi and Bluetooth support for RockPI-S</li> <li>AR-1987 Error when removing BSP package</li> <li>AR-2003 None of the builds of Raspberry Pi 5 goes into desktop</li> <li>AR-2007 Fix armbian.list.disabled exists</li> <li>AR-2009 Extensions from USERPATCHES_PATH are not supported</li> <li>AR-2010 Remove broken symlink</li> <li>AR-2020 RK35xx is seeking for rk35xx config</li> <li>AR-2027 Compressed images failed to upload to GitHub releases</li> <li>AR-2034 RockPI-S does WiFi broken on kernels &gt;6.5</li> <li>AR-2038 KHADAS_OOWOW_BOARD_ID is not set, can\u2019t use image-output-oowow</li> <li>AR-2051 All installed systemd units are forcefully enabled on first boot</li> <li>AR-2052 Cinnamon desktop doesn\u2019t work on vim4</li> <li>AR-2053 Desktop environment takes a long time to load on vim4</li> <li>AR-2054 Image takes a lot of time to load on vim1s/vim4 bookworm image</li> </ul>"},{"location":"Release_Changelog/#v23113-2023-12-20","title":"v23.11.3 (2023-12-20)","text":"<ul> <li>Bugfix: some desktop images on Raspberry Pi 5 didn\u2019t load desktop.</li> </ul>"},{"location":"Release_Changelog/#v23112-2023-12-18","title":"v23.11.2 (2023-12-18)","text":"<ul> <li>added standard support images for Raspberry Pi 5, Odroid N2/N2+, Odroid M1 due to the boards support status change</li> <li>recreated images for Raspberry Pi 4, Nanopi R4S, Orangepi Zero2 due to several bug fixes (check commit log / newsletter for details)</li> </ul>"},{"location":"Release_Changelog/#v23111-2023-11-30","title":"v23.11.1 (2023-11-30)","text":""},{"location":"Release_Changelog/#closed-projects_2","title":"Closed projects","text":"<ul> <li>AR-1702 Switch default login manager</li> <li>AR-1886 Enable artifacts creation at pull request</li> <li>AR-1924 Add support for Hikey 960</li> <li>AR-1928 K3: Update edge kernel to v6.5</li> <li>AR-1929 New Armbian Wallpapers</li> <li>AR-1930 Add orangepi3b build config</li> <li>AR-1940 Add edge kernel support for NanoPi R6S/R6C</li> <li>AR-1941 Rework ac200 patches and config for current and edge kernel.</li> <li>AR-1943 Add initial support for TI SK-TDA4VM board</li> <li>AR-1951 add new device xiaomi-elish</li> <li>AR-1957 Improve labeling system - refactor labeling logic</li> <li>AR-1958 rk3588: configure UEFI_EDK2_BOARD_ID for all UEFI-supported boards</li> <li>AR-1959 use GHPROXY_ADDRESS to customize ghproxy url</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_2","title":"Closed Tasks","text":"<ul> <li>AR-1784 Remove FriendlyElec vendor \u201cdriver\u201d patch in mainline</li> <li>AR-1907 Add latest patch for eeprom support in JetHub D1+</li> <li>AR-1811 Drop host OS-es that can\u2019t compile Crust</li> <li>AR-1882 Clean remaining legacy Rockchip kernels</li> <li>AR-1897 KDE build seems to be missing features</li> <li>AR-1913 Remove midstream kernel</li> <li>AR-1919 Change support status to multiple selection</li> <li>AR-1942 Add board config for Tanix TX6 tvbox</li> <li>AR-1944 Add support for Inovato Quadra</li> <li>AR-1945 hinlink-h28k [new board]: support new SoC Rockchip rk3528</li> <li>AR-1946 rockchip64/edge 6.6.y: update overlay configfs patch from rpi</li> <li>AR-1947 meson-s4t7: Add option to force 16x9 display resolution</li> <li>AR-1948 meson-s4t7: add systemd service to enable fan in automatic mode</li> <li>AR-1949 mekotronics-r58x-pro.wip: add new board Mekotronics R58X-Pro</li> <li>AR-1950 mixtile-blade3: enable pci3x4 nvme boot (requires u.2 -&gt; m.2 adapter from blade3 case kit)</li> <li>AR-1952 Update Rock CM5 I/O board config (#5866)</li> <li>AR-1953 Add settings &amp; updater for KDE</li> <li>AR-1954 add board ArmSoM-w3; with uboot-patch and updated blobs</li> <li>AR-1956 Rockchip64: Clean up archive of all EOL kernels</li> <li>AR-1960 VIM1S/VIM4: Add bluetooth support</li> <li>AR-1969 BPI-CM4: Add support for the waveshare cm4-io-base-b</li> <li>AR-1970 BPI-CM4: Enable usb support on waveshare baseboards via overlay</li> <li>AR-1971 BPI-SM1: Removed UART_B overlay.</li> <li>AR-1972 BPI-SM1: Add UART_A \u201cpin-ctrl: cts rts\u201d</li> <li>AR-1973  Aligning display manager with the desktops</li> <li>AR-1974 Add Ubuntu Mantic build target</li> <li>AR-1979 Update kernel configs for Waydroid and Redroid support</li> <li>AR-1980 xiaomi-elish: bump to kernel 6.7-rc2</li> <li>AR-1983 xiaomi-elish: add typec pd support</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_2","title":"Solved Bugs","text":"<ul> <li>AR-1641 simpledrm module prevents Mali G-31 hardware acceleration</li> <li>AR-1832 x13s errors with bash: line 1: add-apt-repository: command not found</li> <li>AR-1866 UWE5622 driver is broken on 6.5.y</li> <li>AR-1876 Shallow clones CI is getting disabled due to inactivity</li> <li>AR-1911 Raspberry Pi, upgrade fails</li> <li>AR-1923 Rockchip kernels compilation breaking</li> <li>AR-1932 Update firmware for Orangepi R1+ LTS</li> <li>AR-1936 Khadas Vim1s: Fix display output</li> <li>AR-1938 xradio: fix compilation for 6.1+ </li> <li>AR-1961 rangepi3lts: load wifi module via systemd service otherwise it crash</li> <li>AR-1962 Restore LED triggers for each ATA port indicating disk activity in mvebu-edge</li> <li>AR-1963 Fix broken HDMI output on rk3328</li> <li>AR-1964 Orange Pi 3 LTS: Fix ethernet broken for some users on 6.x kernel</li> <li>AR-1965 Fix LicheePi 4A audio problem</li> <li>AR-1966 Khadas Vim1s: Fix monitor not detected after its turned off and on again</li> <li>AR-1967 xiaomi-elish: update config for 6.6, and fix one bluetooth pairing issue</li> <li>AR-1968 bootscript: meson-s4t7: fix booting on ubuntu</li> <li>AR-1976 VIM1S: emmc 23.8.4 install fails to boot after running upgrade using beta repository</li> <li>AR-1977 Default renderer for NetPlan is not set on Debian variants</li> <li>AR-1982 rockpi-s still using ifconfig to set wlan MAC address</li> </ul>"},{"location":"Release_Changelog/#v23085-2023-10-11","title":"v23.08.5 (2023-10-11)","text":"<ul> <li>Recreated images for Khadas VIM4</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_3","title":"Solved Bugs","text":"<ul> <li>AR-1887 Add fan support (fan.service) for VIM4.</li> <li>AR-1893 Fix wifi not working on VIM4N.</li> </ul>"},{"location":"Release_Changelog/#v23084-2023-10-09","title":"v23.08.4 (2023-10-09)","text":"<ul> <li>Recreated images for Khadas VIM1S, Khadas VIM4</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_4","title":"Solved Bugs","text":"<ul> <li>AR-1894 HDMI not working in Armbian Image on VIM1S and VIM4. Its fixed and works on most monitor now in Debian based images, Ubuntu images will also be fixed soon.</li> <li>AR-1895 Fix HDMI monitor does not work after its turned off and on again on VIM1S</li> </ul>"},{"location":"Release_Changelog/#v23083-2023-09-20","title":"v23.08.3 (2023-09-20)","text":"<ul> <li>Recreated images for NanoPi Duo, Orange Pi Zero, Orange Pi Zero 2, Orange Pi 3 LTS</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_3","title":"Closed Tasks","text":"<ul> <li>AR-1506 Reworked AC200 support for Allwinner current and edge kernels</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_5","title":"Solved Bugs","text":"<ul> <li>AR-1280 Xradio xr819 wireless driver not available in Allwinner current and edge kernels</li> <li>AR-1833 Slow network speed reported by iperf3 and nuttcp on Allwinner boards with Gigabit NIC</li> <li>AR-1866 Unisoc UWE5622 wireless driver not available in Allwinner legacy, current and edge kernels</li> </ul>"},{"location":"Release_Changelog/#v23082-2023-09-11","title":"v23.08.2 (2023-09-11)","text":"<ul> <li>Recreated images for Orangepi 5 Plus, Bananapi M1</li> </ul>"},{"location":"Release_Changelog/#v23081-2023-09-01","title":"v23.08.1 (2023-09-01)","text":""},{"location":"Release_Changelog/#closed-projects_3","title":"Closed projects","text":"<ul> <li>AR-1690 Add Crust to Allwinner boards to enable power management functions</li> <li>AR-1700 Add support for most recent memory chips on BPi M5</li> <li>AR-1723 Backport Bananapi CM4 to kernel 6.1 LTS</li> <li>AR-1744 Provide official distro upgrades</li> <li>AR-1838 Adding armbian-gaming as extension</li> <li>AR-1841 Introduce grub-with-dtb extension</li> <li>AR-1842 Add Lenovo X13S as WIP board</li> <li>AR-1843 Khadas VIM3/VIM3L u-boot 23.07-rc4 + SPI-NOR/MTD booting support</li> <li>AR-1850 Odroid M1 de-infest Petitboot &amp; use Kwiboo\u2019s 2023.10-rc2+gmac u-boot</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_4","title":"Closed Tasks","text":"<ul> <li>AR-1647 Enable missing modules in sunxi64</li> <li>AR-1718 Optimise images download build lists</li> <li>AR-1719 Add and test 4G PCI modem on Bananapi CM4</li> <li>AR-1722 Adjust Bananapi WiKi Pages</li> <li>AR-1725 Update CM4 download pages</li> <li>AR-1726 Add CM4 to auto-testing facility</li> <li>AR-1728 Check if appropriate build targets has been generating</li> <li>AR-1730 Make a hires photo of CM4 with modules placed on</li> <li>AR-1780 Adjust u-boot patches to apply correctly</li> <li>AR-1803 Enable wireless driver for MT7921U on all kernels</li> <li>AR-1806 Generate all images that are declared in targets.yaml for single device</li> <li>AR-1807 Test data visualisation JSON / PHP / HTML</li> <li>AR-1824 Move Debian riscv64 from ports as its not 1st class citizen</li> <li>AR-1826 Timezone select is too closed on status of the countries</li> <li>AR-1834 Add gnome-calculator back to the default package base</li> <li>AR-1836 Add SPI boot support for Rock5A</li> <li>AR-1837 Add Orange Pi Plus</li> <li>AR-1839 Introduce PASTE_URL to make easy to change paste service used</li> <li>AR-1840 Add pwm-fan support to Nanopi R4S</li> <li>AR-1844 NanoPi Duo2: enable powerbutton and ethernet</li> <li>AR-1845 Add bluetooth-hciattach extension to Orange Pi 5</li> <li>AR-1846 Add Collabora rockchip-rk3588 mainline based branch</li> <li>AR-1847 Add Radxa CM5 with I/O board</li> <li>AR-1848 Fix thermal monitoring in 6.1 kernel</li> <li>AR-1849 NanoPC-T6 Collabora: add PCIe 3</li> <li>AR-1851 Add Debian Trixie host and target support</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_6","title":"Solved Bugs","text":"<ul> <li>AR-1539 XFCE image Rpi is missing from web download</li> <li>AR-1570 Incomplete information in /etc/armbian-(image)-release</li> <li>AR-1684 Synaptic search is super slow</li> <li>AR-1707 Nightly images are not build with beta repository</li> <li>AR-1724 CM4: Onboard WiFi and Bluetooth does not work</li> <li>AR-1729 Userpatches support for series.conf seems broken</li> <li>AR-1764 Some Allwinner 32bit boards hangs at boot</li> <li>AR-1765 Recreate images that are missing in 23.05 release</li> <li>AR-1771 Rockpi4c+ link on download page broken</li> <li>AR-1772 RockPI-S serial console drops keystrokes</li> <li>AR-1787 Installing Khadas Vim3 image directly to eMMC fails</li> <li>AR-1798 Orangepi 3 / LTS and Nanopi Black 5 does not boot</li> <li>AR-1802 Possible bug in image assembly process</li> <li>AR-1814 Installing M2PRO to eMMC fails to boot from eMMC</li> <li>AR-1817 Enable wireless driver for MT7915E on all kernels</li> <li>AR-1835 mkfs.vfat command is missing in minimal images</li> </ul>"},{"location":"Release_Changelog/#v230524-2023-08-02","title":"v23.05.24 (2023-08-02)","text":"<ul> <li>Recreated images for: Banana M2S, Odroid C2, Khadas VIM3</li> </ul>"},{"location":"Release_Changelog/#v23052-2023-06-06","title":"v23.05.2 (2023-06-06)","text":"<ul> <li>AR-1765 Recreate images that are broken/missing in 23.05 release</li> </ul>"},{"location":"Release_Changelog/#v23051-2023-05-31","title":"v23.05.1 (2023-05-31)","text":""},{"location":"Release_Changelog/#closed-projects_4","title":"Closed projects","text":"<ul> <li>AR-1516 Clean base desktops</li> <li>AR-1536 Cleanup CLI packages list</li> <li>AR-1543 Update RK35xx legacy kernel to 5.10</li> <li>AR-1546 Merge all RK3588 under one kernel</li> <li>AR-1549 Unify architecture definitions</li> <li>AR-1557 Cleaning and adjusting CLI packages base</li> <li>AR-1567 Generating JSON matrix</li> <li>AR-1625 Extending JSON generation to support build matrix(es)</li> <li>AR-1639 Enable armbian-config ORAS cache</li> <li>AR-1693 Test as many images for upcoming 23.05 release as possible</li> <li>AR-1700 Add support for most recent memory chips on BPi M5</li> <li>AR-1748 Generate a sticky topic with instructions how to upgrade to Bookworm</li> </ul>"},{"location":"Release_Changelog/#closed-task","title":"Closed Task","text":"<ul> <li>AR-241 Remove NAND hacks from packaging </li> <li>AR-345 Label trigger/workflow issue to jira</li> <li>AR-773 Add support and bug report URL to /etc/os-release</li> <li>AR-1512 Switch Docker pull to armbian/cache repository</li> <li>AR-1526 UWE5622 driver consolidation for rockchip64</li> <li>AR-1542 Add architecture property for distributions</li> <li>AR-1573 Move UEFI kernels to 6.2, move current to legacy</li> <li>AR-1574 Move Rpi kernels to 6.2, move current to legacy</li> <li>AR-1575 Move Odroid M1 to 6.2.y</li> <li>AR-1577 Move mvebu edge kernels to 6.2, current to 6.1, current to legacy</li> <li>AR-1590 Add another package to minimal images</li> <li>AR-1591 Armbian buster xfce image build fails at installing package numix-icon-theme-circle</li> <li>AR-1593 Add &amp; adjust (c) in files</li> <li>AR-1598 Minimal builds are missing apt-utils package</li> <li>AR-1601 Add sudo, wget and htop to minimal packages</li> <li>AR-1602 add `fonts-noto-color-emoji` for terminal Emoji support</li> <li>AR-1620 Effectively remove Ubuntu PRO ads</li> <li>AR-1627 Automatically clean docker images</li> <li>AR-1642 Could not create a username containing a number </li> <li>AR-1645 Installer should handle input in the same way everywhere</li> <li>AR-1651 Change Debian Bookworm into supported target</li> <li>AR-1655 Enable CONFIG_EXFAT_FS on remaining kernels</li> <li>AR-1656 Execute build train if kernel config changes</li> <li>AR-1660 Enable OrangePi Zero (LTS) TV output</li> <li>AR-1663 Add NanoPi R6S / R6C</li> <li>AR-1664 Rebuild board selection for generating official images</li> <li>AR-1669 Optimise PNG images we are using</li> <li>AR-1674 Bump rockchip 32 bit edge to kernel 6.3</li> <li>AR-1679 Drop kernel-jetson-nano-legacy</li> <li>AR-1680 Drop kernel-rockchip-legacy</li> <li>AR-1681 Drop kernel-rk3399-legacy</li> <li>AR-1682 Drop kernel-rockchip64-legacy</li> <li>AR-1683 Enable H616 CPU freq scaling</li> <li>AR-1695 Bump rockchip64 current to 6.1.y</li> <li>AR-1697 Add support for FriendlyElec NanoPi R4SE</li> <li>AR-1698 Add NILFS2 fs support</li> <li>AR-1699 Improve SD card compatibility on Radxa E25</li> <li>AR-1706 Disable SKEL update mechanism from postinst</li> <li>AR-1708 Improve i3-wm support</li> <li>AR-1713 Introduce armbian-base-files artefact</li> <li>AR-1717 Disable debug for postinst</li> <li>AR-1747 Orangepi-r1plus-lts Network Interface logical names have changed and broken networking</li> <li>AR-1760 Move Khadas Edge 2 to supported build targets</li> <li>AR-1586 Consolidate RTL8723CS driver for all families</li> </ul>"},{"location":"Release_Changelog/#solved-bug","title":"Solved Bug","text":"<ul> <li>AR-1443 NanoPi R4S patch overwriting mainline base DTS, needs refactored</li> <li>AR-1474 Emoji not shown </li> <li>AR-1523 UEFI install seems to be broken to some degree</li> <li>AR-1528 Nanopi Neo stuck in boot loop</li> <li>AR-1537 Missing man-db in images</li> <li>AR-1541 UEFI swap problem and missing UUID for EFI partition</li> <li>AR-1545 Update jethub prepackages python modules to install via apt</li> <li>AR-1547 Jetson Nano legacy fails do build kernel</li> <li>AR-1548 Odroid XU4 kernel compilation is failing current / edge</li> <li>AR-1556 \u201cNo space left on device\u201d while rsync root files to image</li> <li>AR-1569 APT cache needs to be cleaned before closing image</li> <li>AR-1578 Missing blobs for Riscv</li> <li>AR-1588 Linter checking for bash shebang is incorrect</li> <li>AR-1589 Kernel analysis is checking too many files</li> <li>AR-1603 Broken wireless driver  8821cu-20210118 </li> <li>AR-1611 Armbian install broken when installing to USB</li> <li>AR-1615 Bad links Orangepizero2</li> <li>AR-1621 Raspberry Pi does not build</li> <li>AR-1623 Armbian install fails to start on minimal images</li> <li>AR-1628 Orange Pi Zero 2 doesn\u2019t work</li> <li>AR-1644 armbian-audio-config fails in minimal images; alsa-utils missing</li> <li>AR-1648 Debian SID also split non-free firmware packages</li> <li>AR-1650 Remote Desktop doesn\u2019t work on desktop images</li> <li>AR-1653 Both Firefox and Chromium are not installing from our repo</li> <li>AR-1658 Wrong artefacts creation</li> <li>AR-1666 File with unexpected execution rights</li> <li>AR-1667 RockPI-S audio support is gone</li> <li>AR-1671 Packages are being downgraded to their repo versions</li> <li>AR-1673 uboot v2018.05-sun50iw9 compile error</li> <li>AR-1675 Nezha has wrong manufactur attached</li> <li>AR-1676 Can\u2019t build linux-u-boot-radxa-e25-legacy and edge</li> <li>AR-1677 Fix building rk322x with vendor 4.4 kernel</li> <li>AR-1678 Can\u2019t build Macchiatobin-doubleshot</li> <li>AR-1685 Rock 3A is missing current kernel def</li> <li>AR-1692 Raspberry Pi does not boot</li> <li>AR-1705 Jethome repository missing Lunar and Bookworm index</li> <li>AR-1714 Our packages md hash files contains temporally path</li> <li>AR-1715 Permission problem when building with GHA</li> <li>AR-1733 Base files does not work for riscv64 due to anomaly</li> <li>AR-1750 Missing information in BSP about repository and build FW commit</li> <li>AR-1751 Ubuntu Advantage is not completely removed</li> </ul>"},{"location":"Release_Changelog/#v23021-2023-02-25","title":"v23.02.1 (2023-02-25)","text":""},{"location":"Release_Changelog/#closed-projects_5","title":"Closed projects","text":"<ul> <li>AR-1281 Armbian community automated build</li> <li>AR-1360 Bump Rockchip64 u-boot to 2022.07</li> <li>AR-1408 Enable EDGE branch on RK3588</li> <li>AR-1424 Refactor release index generation</li> <li>AR-1432 Adjust 3rd party drivers for kernel 6.1</li> <li>AR-1435 Generate CODEOWNER on GitHub</li> <li>AR-1444 Move repo management from the build system</li> <li>AR-1449 Adjust action scripts to adjusted logic</li> <li>AR-1457 Create kernel config security analysis </li> <li>AR-1458 Enable AUFS on 6.1.y</li> <li>AR-1460 Address corner case when looking for default route</li> <li>AR-1461 Move hostapd from packages list</li> <li>AR-1470 Improve new issue / request handling</li> <li>AR-1484 Move meson64 CURRENT to 6.1.y</li> <li>AR-1531 Add support for various HID game controllers and Waydroid</li> <li>AR-1532 Split Bananapi M2PRO from M5</li> </ul>"},{"location":"Release_Changelog/#closed-task_1","title":"Closed Task","text":"<ul> <li>AR-1313 Mvebu EDGE needs to be bumped to 6.1.y</li> <li>AR-1507 Move UWE5622 from kernel patches to misc</li> <li>AR-1379 Add support for minimal images build in CI</li> <li>AR-1412 Move btrfs-progs to the minimal images</li> <li>AR-1413 Port meson sm1 emmc related patches from edge to current</li> <li>AR-1414 Move Bananapi M5 to the previous u-boot version</li> <li>AR-1417 Add gnome-disk-utility to the desktops</li> <li>AR-1418 Replace nand-sata-install with symlink to armbian-install</li> <li>AR-1419 Limit automated swap creation to 16Gb</li> <li>AR-1421 Add  nfs-common package too all except minimal</li> <li>AR-1429 Switch to better 882xbu wireless driver</li> <li>AR-1431 Improve audio config script</li> <li>AR-1433 Change error reporting when linting scripts</li> <li>AR-1434 Bump EDGE kernels to 6.1.y</li> <li>AR-1448 Update u-boot patches for JetHub D1/D1+</li> <li>AR-1495 Change old not supported releases to EOS</li> <li>AR-1509 Orange Pi R1 Plus LTS add 2 device tree overlays for rk3328 uart1 and i2C0. Network and LED\u2019s enhancements.</li> <li>AR-1521 Add next Debian Bookworm</li> <li>AR-1533 Disable event debugging</li> <li>AR-1534 Add wpasupplicant to bookworm</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_7","title":"Solved Bugs","text":"<ul> <li>AR-1367 PCIe is stuck at Gen1 speed even tho overlay pcie-gen2 is specificed</li> <li>AR-1416 Missing font in Bullseye desktop cause strange fonts in Terminator</li> <li>AR-1437 Change to GitHub workflow badge routes</li> <li>AR-1438 rockPi-S patchset overwriting mainline device tree</li> <li>AR-1439 Rockchip64 NanoPi patches overwriting mainline DTS</li> <li>AR-1450 MOTD shows error on some devices</li> <li>AR-1463 Remove code was added to the sources, which creates a mess in rk3399-rock-pi-4.dts</li> <li>AR-1467 Raspberry Pi 3 is unbootable, 4 boots</li> <li>AR-1476 Missing firmware on Nanopi R2S</li> <li>AR-1482 Do not generate swap larger the 16Gb</li> <li>AR-1522 Fix SDIO port irq level bug found in 6.0+ kernel</li> <li>AR-1524 Cracklib check library must be present in all</li> <li>AR-1527 Update patches for RTL8822CS</li> </ul>"},{"location":"Release_Changelog/#v22114-2023-01-23","title":"v22.11.4 (2023-01-23)","text":"<ul> <li>Added image for Bananapi R2 PRO</li> <li>kernel(s) update</li> </ul>"},{"location":"Release_Changelog/#v22113-2022-12-31","title":"v22.11.3 (2022-12-31)","text":"<ul> <li>Added image for Orange Pi 5 (WIP)</li> <li>Updated images for Bananapi M5/M2P</li> <li>Updated images for Orangepi Zero 2</li> </ul>"},{"location":"Release_Changelog/#v22112-2022-12-09","title":"v22.11.2 (2022-12-09)","text":"<ul> <li>Re-added image for Nanopi Duo</li> <li>Regenerated images Rock 5b (updated kernel)</li> </ul>"},{"location":"Release_Changelog/#v22111-2022-12-03","title":"v22.11.1 (2022-12-03)","text":""},{"location":"Release_Changelog/#closed-projects_6","title":"Closed projects","text":"<ul> <li>AR-1278 Implement plymouth for kernel &gt; 5.19.y</li> <li>AR-1319 Upgrade Allwinner boot loader to 2022.08</li> <li>AR-1335 Add gpiod library to armhf and arm64 server + desktop images</li> <li>AR-1346 Grub optimisations</li> <li>AR-1355 Add support for UEFI install to the nand-sata-install</li> <li>AR-1362 Add Bananapi M5 to the build system</li> <li>AR-1389 Refactor u-boot patches</li> <li>AR-1390 Add Riscv64 support</li> <li>AR-1399 Enable BASH linter at PR on changed files</li> <li>AR-1402 Enable ES8316 audio properly on Radxa Rock Pi 4</li> </ul>"},{"location":"Release_Changelog/#closed-task_2","title":"Closed Task","text":"<ul> <li>AR-668 Using extlinux.conf instead of the legacy set of boot.scr + text files.</li> <li>AR-949 Initial board setup</li> <li>AR-977 Add package version number to the rootfs cache</li> <li>AR-1034 Add missing Docker dependencies</li> <li>AR-1112 Add ZFS repository</li> <li>AR-1301 Add Rockpi 4C plus</li> <li>AR-1312 Clean bootlogo patches</li> <li>AR-1317 Remove nfs-kernel-server from default install</li> <li>AR-1325 Deploy Chromium repo and keys to CLI images too</li> <li>AR-1326 Add SKEL distribution to all existing users to the postinst script</li> <li>AR-1336 Fix wallpaper not showing correct in virtual desktop</li> <li>AR-1337 Re-enable Thunderbird email client for Debian Sid</li> <li>AR-1338 Add Codium to Debian builds</li> <li>AR-1342 Switch Codium with Code on x86</li> <li>AR-1343 Update UEFI configs with latest Ubuntu desktop 22.04</li> <li>AR-1349 Add Intel sound firmware to the desktops</li> <li>AR-1350 Deprecating Buster and Focal</li> <li>AR-1351 Adjust desktop support status</li> <li>AR-1352 Add initial configuration for Terminator</li> <li>AR-1353 Define panel shortcuts for Gnome x64 per appgroup</li> <li>AR-1373 Port legacy kernel Rockchip Hardware Random Number Generator forward into Edge</li> <li>AR-1376 Replace Ubuntu PRO advertisement</li> <li>AR-1377 Add plymouth package to base images except minimal</li> <li>AR-1388 Change purge releases action</li> <li>AR-1404 Updated box86 and box64</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_8","title":"Solved Bugs","text":"<ul> <li>AR-577 Fix USB port on Rockpi S</li> <li>AR-1060 Freshly build image doesn\u2019t have BRANCH info in /etc/armbian-release</li> <li>AR-1186 Screen power savings does not work</li> <li>AR-1265 Rock PI-S images will not boot from internal EMMC (SDNAND)</li> <li>AR-1268 RockPI-S WiFi throughput only 300K bytes/second</li> <li>AR-1269 RockPI WiFi assigned different MAC address on each boot</li> <li>AR-1305 CI build wrong images in cron</li> <li>AR-1309 Some images doesn\u2019t want to be built, some are corrupted</li> <li>AR-1310 Update JetHub D1 (j100) u-boot patchset</li> <li>AR-1318 Replace expired GPG key for Github CLI</li> <li>AR-1330 CLI images can ran out of space</li> <li>AR-1332 Missing dependency in Docker images</li> <li>AR-1334 Nanopi Neo3 does not have DT file in  EDGE</li> <li>AR-1340 Disable event debugging on UEFI builds</li> <li>AR-1341 Missing wallpaper in XFCE login screen Armbian Sid</li> <li>AR-1344 Wrong location of package uninstall</li> <li>AR-1345 Thunderbird 32b is no more, refactoring - provide it only for 64b</li> <li>AR-1348 Pine64H b and NPI R1 does not build u-boot</li> <li>AR-1363 Kernel freezing in armbian-kernel might not work correctly</li> <li>AR-1374 Hostapd needs to be workarounded</li> <li>AR-1381 XU4: On a fresh install, after moving root to f2fs eMMC, it fails to boot</li> <li>AR-1384 Fix RTL8822CS driver. Update build config</li> <li>AR-1385 Ambian\u2019s password rules are annoying</li> <li>AR-1391 MOTD is not displaying messages correctly</li> <li>AR-1392 Error triggered when changing BSP package</li> <li>AR-1393 Converting to u-boot fails on riscv</li> <li>AR-1394 Update kernel meson mmc driver to set phase clock from dts</li> <li>AR-1395 Don\u2019t add PPA\u2019s to the CLI images</li> <li>AR-1398 nand-sata-install must fail with a proper error message if the chosen mkfs.xyz is not installed</li> <li>AR-1400 Raspberry Pi is unbootable</li> <li>AR-1403 Wrong post install handling on install</li> <li>AR-1405 When using PPA sources we need to run install_ppa_prerequisites</li> </ul>"},{"location":"Release_Changelog/#v22088-2022-10-29","title":"v22.08.8 (2022-10-29)","text":"<ul> <li>added test images for Odroid M1</li> <li>update rockchip64 kernels</li> <li>Regenerated images for Rockpro64, Rock64, Nanopi M4, Nanopi M4V2, Bananapi, Bananapi PRO, Bananapi M2Plus</li> </ul>"},{"location":"Release_Changelog/#v22087-2022-10-20","title":"v22.08.7 (2022-10-20)","text":"<ul> <li>Regenerated images for Rockpi S, Bananapi M1, PRO, M2+, M5, M64, UEFI, RPi4, ClockworkPi, Nanopi Neo3, Pinebook PRO, Renegade, Tinkerboard, OrangePi Zero, OrangePi Zero 2, OrangePi Zero plus</li> <li>AR-1269 RockPI WiFi assigned different MAC address on each boot</li> <li>AR-1268 RockPI-S WiFi throughput only 300K bytes/second</li> <li>AR-1265 Rock PI-S images will not boot from internal EMMC (SDNAND)</li> </ul>"},{"location":"Release_Changelog/#v22085-2022-10-14","title":"v22.08.5 (2022-10-14)","text":"<ul> <li>Regenerated images for arm64 and x86 UEFI with improved installer</li> </ul>"},{"location":"Release_Changelog/#v2208-2022-08-30","title":"v22.08 (2022-08-30)","text":""},{"location":"Release_Changelog/#solved-bugs_9","title":"Solved Bugs","text":"<ul> <li>AR-1304 Boot splash is broken due to changes in kernel source</li> <li>AR-1299 Debian throws out locale garbage at 1st login</li> <li>AR-1296 JetHub D1 u-boot 2022.07+ bug</li> <li>AR-1295 Switch KDE plasma to Wayland</li> <li>AR-1294 Remove broken packages from Debian SID</li> <li>AR-1291 Several wireless drivers break down starting with 5.19.2</li> <li>AR-1287 Debian SID package deprecation</li> <li>AR-1285 Primary interface problem</li> <li>AR-1282 Upstream wireless driver is broken</li> <li>AR-1270 RockPi cannot host a desktop because it outputs no video</li> <li>AR-1266 Media EDGE and media CURRENT are not compiling</li> <li>AR-1263 Fix armbian-led-state-save.sh wrong behavior on boards without gpio leds.</li> <li>AR-1235 Fix NanoPi (rk3399) boards missing correct device tree files in rk3399-legacy</li> <li>AR-1224 AUFS breaks on 5.15.y</li> <li>AR-1206 Firefox from Mozilla team is n/a on Focal</li> <li>AR-1203 Rock3a only has one recommended target</li> <li>AR-1202 Tinkerboard has only one recommended image on the download page</li> <li>AR-1092 Docker is not working on some 5.15.y. / 5.16.y</li> <li>AR-1037 Missing some repository install options</li> <li>AR-1025 Samba timeouts and throws out error</li> <li>AR-982 Broken / invisible fonts on KDE plasma</li> <li>AR-932 HDMI rules could make troubles on some boards</li> </ul>"},{"location":"Release_Changelog/#story","title":"Story","text":"<ul> <li>AR-1303 Merging download target</li> <li>AR-1288 Move DUT ip addresses to the database</li> <li>AR-1284 Improve GitHub UX</li> <li>AR-1277 Refactor rootfs cache system</li> <li>AR-1248 Add support for month offset when creating cache</li> <li>AR-1239 Wrong board status report at first login</li> <li>AR-1238 Github Actions fine tuning</li> <li>AR-1236 Add images integrity checking script</li> <li>AR-1230 Refactor rootfs cache system</li> <li>AR-1229 Enable code security analysis</li> <li>AR-1220 Create nightly images directly on Github</li> <li>AR-1130 Improve Pull request review culture and participation</li> <li>AR-1081 Setup own mirror for kernel.org git</li> <li>AR-580 Generate CONTRIBUTION.md at build script repository</li> </ul>"},{"location":"Release_Changelog/#closed-sub-task_1","title":"Closed Sub-task","text":"<ul> <li>AR-1231 update meson64 edge kernel to 5.19</li> <li>AR-686 Migrate beta.armiban.com to redirect</li> </ul>"},{"location":"Release_Changelog/#closed-task_3","title":"Closed Task","text":"<ul> <li>AR-1300 Add patches to support PiKVM</li> <li>AR-1292 Conduct forum upgrade to latest version</li> <li>AR-1279 Upgrade Rockchip (32 bit) edge kernel to v5.19</li> <li>AR-1272 Move CSC targets that doesn\u2019t build to EOS</li> <li>AR-1251 When generating rootfs cache also store package versions</li> <li>AR-1249 Enable Debian Sid Gnome, Budgie and Cinnamon to some powerful boards</li> <li>AR-1237 Add a small tool to help with unifying kernel configs</li> <li>AR-1232 JetHome: add JetHub D1p support</li> <li>AR-1223 Desktops are missing calculator</li> <li>AR-1211 add rock-3a emmc support</li> <li>AR-1210 add spi boot support for rock-3a</li> <li>AR-1182 Orange Pi 4 LTS support</li> <li>AR-1132 Update meson64 edge&amp;current kernels</li> <li>AR-1127 Change build train runners to use our runners</li> <li>AR-1073 Remove /lib/build-all.sh</li> <li>AR-1042 Sum important information in CONTRIBUTION.md</li> <li>AR-1028 Add support for rootfs / toolchain bind mount</li> <li>AR-984 Integrate Khadas boards related fixes</li> <li>AR-668 Using extlinux.conf instead of the legacy set of boot.scr + text files.</li> </ul>"},{"location":"Release_Changelog/#v22054-2022-07-14","title":"v22.05.4 (2022-07-14)","text":"<ul> <li>Added more desktop flavors for boards which are capable (Budgie, Gnome, KDE Plasma, Xfce and Cinnamon)</li> </ul>"},{"location":"Release_Changelog/#v22053-2022-06-23","title":"v22.05.3 (2022-06-23)","text":"<ul> <li>All board images have been rebuilt due to corruption found in certain images</li> <li>Fixed Orange Pi 3 LTS bluetooth support</li> <li>AR-1182 - Added board images for Orange Pi 4 LTS</li> <li>AR-1228 - Upgraded bootloader to 22.04 for Rockchip family boards</li> </ul>"},{"location":"Release_Changelog/#v2205-2022-05-28","title":"v22.05 (2022-05-28)","text":""},{"location":"Release_Changelog/#solved-bugs_10","title":"Solved Bugs","text":"<ul> <li>AR-1204 - Orangepi R1plus-lts - USB3 Ethernet not working</li> <li>AR-1202 - Tinkerboard has only one recommended image on the download page</li> <li>AR-1199 - Orangepizero2 legacy images doesn\u2019t boot</li> <li>AR-1197 - Support status shows unsupported even distro variant is supported (random Focal image)</li> <li>AR-1196 - Mainline Kernel patch breaks spidev in 5.15+</li> <li>AR-1195 - Odroid N2 legacy kernel image does not build on Jammy</li> <li>AR-1194 - Legacy kernels doesn\u2019t want to be added to repository</li> <li>AR-1193 - Images without device tree blobs fails to build via CI</li> <li>AR-1192 - Allwinner H5 boards fails on ATF compilation</li> <li>AR-1190 - Docker image creation fails on Jammy host</li> <li>AR-1189 - U-boot xt-q8l-v10 legacy fails to build at CI</li> <li>AR-1185 - Remmina is missing RDP and VNC options</li> <li>AR-1178 - Docker images creation is broken</li> <li>AR-1173 - Github action for generating desktops does not start</li> <li>AR-1172 - Load induced RX bug in the r8152 driver on 5.15 and 5.17</li> <li>AR-1171 - Budgie desktop fails to build on Jammy</li> <li>AR-1170 - Switching to beta repository at images sometimes failed</li> <li>AR-1169 - Chromium does not install on Jammy desktops</li> <li>AR-1167 - Update config to support Linux 5.15.36</li> <li>AR-1160 - When seeking changed kernels two are always marked as changed</li> <li>AR-1151 - Kernel 5.10.y need patch adjustment for boot splash</li> <li>AR-1149 - Current build failure due to packages</li> <li>AR-1148 - radxa zero 512MB (no eMMC) does not load img from SD</li> <li>AR-1141 - Ubuntu Budgie on Focal Jammy / Focal fails</li> <li>AR-1135 - fix armbian ramlog instability</li> <li>AR-1129 - Gnome desktop on Jammy fails to start</li> <li>AR-1115 - Package discrepancy in Jammy</li> <li>AR-1102 - Missing wallpapers in desktop packages</li> <li>AR-1097 - net: stmmac: dwmac-meson8b: interface sometimes does not come up at boot.</li> <li>AR-1091 - Wireless driver for 8822bs is not compatible with 5.15.y and up</li> <li>AR-1061 - udev HDMI rules are causing flickering</li> <li>AR-1033 - U-boot packages doesn\u2019t want to be assembled with Docker</li> <li>AR-1015 - Toolchain download only from a single source</li> <li>AR-712 - Broken framebuffer on A20</li> <li>AR-583 - RK3328 DMC driver needs small (hopefully) update for kernel 5.10</li> <li>AR-191 - SATA doesn\u2019t show up on Banana</li> </ul>"},{"location":"Release_Changelog/#story_1","title":"Story","text":"<ul> <li>AR-988 - Add support for running x86_64 applications</li> <li>AR-775 - Bring Marvell A3700-utils-marvell and mv-ddr-marvell.git to follow master</li> <li>AR-273 - Improve CI autotests facility</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_5","title":"Closed tasks","text":"<ul> <li>AR-1180 - Merge rk35xx-edge into rockchip64-edge</li> <li>AR-1177 - Update only supported repositories</li> <li>AR-1175 - Temperature monitoring for Jetson nano</li> <li>AR-1166 - Add box86 package from 3rd party repository</li> <li>AR-1165 - Update JetHub D1 u-boot patches</li> <li>AR-1164 - Upgrade mvebu64 kernel to 5.17.y</li> <li>AR-1159 - Upgrade UEFI EDGE kernels to 5.17.y</li> <li>AR-1150 - Adjust hash calculating method</li> <li>AR-1132 - Update meson64 edge&amp;current kernels</li> <li>AR-1128 - Add Nvidia driver to the x86 desktop images</li> <li>AR-1126 - Enable desktop compilation at merge request</li> <li>AR-1120 - Sync beta repository in the CI process</li> <li>AR-1108 - Missing images in download section for following boards</li> <li>AR-1076 - Add support for Orangepi 3 LTS</li> <li>AR-1057 - Advertise recommended targets at download pages</li> <li>AR-1008 - Update vars in amlogic u-boot script to match names of default u-boot vars</li> <li>AR-959 - Unifying TAGS as much as possible - as universal as possible</li> <li>AR-628 - Bump Meson64 u-boot</li> <li>AR-296 - Remove compressed indexes for apt?</li> </ul>"},{"location":"Release_Changelog/#v2202-2022-02-28","title":"v22.02 (2022-02-28)","text":""},{"location":"Release_Changelog/#solved-bugs_11","title":"Solved Bugs","text":"<ul> <li>AR-1101 - DRM patch is failing on Rockchip</li> <li>AR-1079 - Ubuntu archive redirector is not providing best service</li> <li>AR-1077 - Fix RPi4 userland audio</li> <li>AR-1069 - First login doesn\u2019t pick up correct shell</li> <li>AR-1065 - Twitter forum registration is not working</li> <li>AR-1063 - X86 desktop images are not enabled in CI</li> <li>AR-1062 - When selecting repository install u-boot might not be flashed</li> <li>AR-1055 - Aptly repository seems to be out of business</li> <li>AR-1048 - Rpi kernel image is not updated on upgrade</li> <li>AR-1043 - linux-firmware repository change branch from \u201cmaster\u201d  to \u201cmain\u201d</li> <li>AR-973 - boot building is failing after update to 2021.10</li> <li>AR-871 - Debian SID broken wallpaper</li> </ul>"},{"location":"Release_Changelog/#story_2","title":"Story","text":"<ul> <li>AR-1074 - Switch all CURRENT to 5.15.y and EDGE to 5.16.y</li> <li>AR-1009 - Armbian Framework extensions and UEFI support</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_6","title":"Closed tasks","text":"<ul> <li>AR-1100 - Support for Orange Pi R1 Plus LTS</li> <li>AR-1084 - 3D support on Debian desktop</li> <li>AR-1078 - Add additional forum plugins and adjust settings</li> <li>AR-1068 - Add gnome-system-monitor to Focal and Jammy</li> <li>AR-1049 - Add ZFS that supports kernel 5.15.y</li> <li>AR-1044 - Improve Raspberry Pi support</li> <li>AR-1041 - JetHome: fix brcm (AP6255) firmware links</li> <li>AR-1040 - Refactor armbian-bsp-cli package creation</li> <li>AR-931 - Using Docker image for building kernels</li> <li>AR-893 - Cleanup rockchip64 u-boot scenarios</li> <li>AR-757 - Adding Raspberry Pi</li> <li>AR-586 - Implement fan controller for Nanopi M4V2</li> </ul>"},{"location":"Release_Changelog/#v2108-2021-08-31","title":"v21.08 (2021-08-31)","text":""},{"location":"Release_Changelog/#solved-bugs_12","title":"Solved Bugs","text":"<ul> <li>AR-886 - u-boot package naming</li> <li>AR-885 - Odroid C4 / HC4 boot failure</li> <li>AR-881 - First login shows \u201cdegraded\u201d</li> <li>AR-879 - RK3328 5.10 + GPU failure</li> <li>AR-875 - Homepage fix</li> <li>AR-874 - Add SATA fix for eBin</li> <li>AR-873 - khadas vim3 no sound</li> <li>AR-872 - When reverting u-boot to last known, some boards are broken</li> <li>AR-867 - H6 Freezing</li> <li>AR-863 - Unstable u-boot also noticed on H3 based boards</li> <li>AR-862 - normalize RK3399 xorg configs</li> <li>AR-857 - Qemu custom hook executing on non-targeted images</li> <li>AR-854 - Pinebook PRO desktop doesn\u2019t build in CI</li> <li>AR-853 - Missing folder when making BSP file</li> <li>AR-852 - Error when placing wallpaper</li> <li>AR-850 - Disable XFWM compositor on XFCE4 desktop to make it run smoother</li> <li>AR-844 - CI is picking up wrong kernel</li> <li>AR-835 - Amlogic GLX desktop fails</li> <li>AR-834 - edge v network weirdness</li> <li>AR-833 - Khadas Edge V no HDMI audio</li> <li>AR-830 - CI needs to rsync cache before start to building new images.</li> <li>AR-829 - CI pipeline could not find some files when signing rootfs cache</li> <li>AR-825 - Fixing I2S related errors on RK3399</li> <li>AR-824 - Broken wifi on Station boards and kernel 5.12.y</li> <li>AR-823 - Pine H64 doesn\u2019t boot kernel 5.12.y</li> <li>AR-822 - Motd false reporting of unsupported</li> <li>AR-821 - Docker creation failed to load repository keys</li> <li>AR-820 - Broken Odroid C2 audio patch</li> <li>AR-819 - Wireguard repo errors</li> <li>AR-818 - When building selected images via CI, status is changed to user-built</li> <li>AR-816 - ZRAM is missing in Jeston Nano legacy</li> <li>AR-780 - Nanopi R4S USB broken</li> <li>AR-779 - New bsp package is common. Per branch changes doesn\u2019t work anymore</li> <li>AR-777 - Docker doesn\u2019t install on Hirsute host</li> <li>AR-776 - Tinkerboard legacy have some troubles booting</li> <li>AR-774 - Orangepi Lite 2 EDGE is failing</li> <li>AR-770 - U-boot fails to install when switching kernel to EDGE</li> <li>AR-764 - Htop configuration exploit / vulnerability</li> <li>AR-749 - Allwinner A20 bootloops on 5.12.y / 2021.04</li> <li>AR-748 - Headers install broken</li> <li>AR-747 - Deeping Desktop doesn\u2019t want to reboot / poweroff</li> <li>AR-744 - Nanopi K2 S905 network is broken</li> <li>AR-741 - Pinebook pro desktop missing tweaks</li> <li>AR-740 - Vnstat throws out garbage</li> <li>AR-737 - Jetson nano throws out some error on boot loader compilation</li> <li>AR-736 - Rockpi S u-boot doesn\u2019t build on GCC.-10</li> <li>AR-713 - Board specific desktop things are going into common desktop package</li> <li>AR-593 - Rockpi S doesn\u2019t boot mainline based kernel</li> </ul>"},{"location":"Release_Changelog/#epic","title":"Epic","text":"<ul> <li>AR-788 - Add Official Support for Some Khadas devices</li> </ul>"},{"location":"Release_Changelog/#story_3","title":"Story","text":"<ul> <li>AR-877 - build_all needs separate logs per image</li> <li>AR-847 - Tinkerboard 2 Support</li> <li>AR-746 - Upgrade EDGE to 5.12.y</li> <li>AR-734 - CSC Support for Avnet MicroZed</li> <li>AR-214 - CI improvements</li> <li>AR-202 - Drop packaging patches and introduce own packaging</li> <li>AR-42 - Merge packaging patches</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_7","title":"Closed tasks","text":"<ul> <li>AR-892 - Promoting Bullseye to supported</li> <li>AR-890 - Desktop analysis with 3D enabled</li> <li>AR-887 - Re-enable Debian Stretch repository update</li> <li>AR-882 - Optimise image compression</li> <li>AR-876 - Make package lists in one row</li> <li>AR-869 - Upgrade ZFS on Linux to v2.1.0 (Focal / Bionic only)</li> <li>AR-865 - Updating driver for 2.5G NIC on Helios64</li> <li>AR-864 - Upgrading EDGE to K5.13.y</li> <li>AR-859 - set - apt.armbian.com - redirect default to http instead of https</li> <li>AR-856 - Basic RC Branch build support</li> <li>AR-846 - Add Ubuntu 21.10 Impish</li> <li>AR-794 - Khadas Edge-V support</li> <li>AR-793 - Khadas VIM3L support</li> <li>AR-792 - Preliminary Khadas VIM3 support</li> <li>AR-791 - Khadas VIM2 support</li> <li>AR-790 - Preliminary Khadas VIM1 support</li> <li>AR-785 - Move mainline boot console to UART0 on Rockpi S</li> <li>AR-784 - Add Nvidia Jetson Nano legacy kernel</li> <li>AR-782 - Provides NFS mount functionality out of the box on CLI images</li> <li>AR-778 - Do not pre-install obsolete apt-transport-https</li> <li>AR-768 - Move Odroid XU4 EDGE to mainline source</li> <li>AR-745 - chroot packaging: build script as separate function</li> <li>AR-743 - Delay first-run autologin</li> <li>AR-732 - Unlock Ubuntu Hirsute as supported target</li> <li>AR-714 - Adjusting support status</li> <li>AR-665 - rk3399 patch failure</li> <li>AR-649 - Adding Rockchip VPU support for 5.11.y</li> <li>AR-635 - Add legacy kernel for Zero2</li> <li>AR-537 - Create Armbian \u201cvirtual\u201d build target to run as VM</li> <li>AR-519 - Odroid N2 Mainline u-boot for edge kernel</li> <li>AR-315 - Add support for GPT table inside armbian-install</li> </ul>"},{"location":"Release_Changelog/#v21056-2021-06-21","title":"v21.05.6 (2021-06-21)","text":"<p>Solved Bugs</p> <p>Updated images for Orangepi Zero</p> <ul> <li>AR-593 - Rockpi S doesn\u2019t boot mainline kernel</li> </ul>"},{"location":"Release_Changelog/#v21053-2021-05-24","title":"v21.05.3 (2021-05-24)","text":"<p>Solved Bugs</p> <ul> <li>AR-780 - Nanopi R4S USB broken</li> <li>AR-816 - ZRAM is missing in Jeston Nano legacy</li> </ul>"},{"location":"Release_Changelog/#v21052-2021-05-24","title":"v21.05.2 (2021-05-24)","text":"<p>Solved Bugs</p> <ul> <li>AR-748 - Headers install broken</li> <li>AR-740 - Vnstat throws out garbage</li> <li>AR-764 - Fixing Htop security issue</li> </ul> <p>Closed Tasks</p> <p>ZFS updated to v2.0.4 (tested on 32bit Odroid HC1 and 64bit N2, Focal and Bionic userland) Added Hirsute CLI images with EDGE Linux 5.12.y for most of the boards</p>"},{"location":"Release_Changelog/#v2105-2021-05-09","title":"v21.05 (2021-05-09)","text":"<p>Solved Bugs</p> <ul> <li>AR-730 -          Duplicate packages error when updating repository</li> </ul> <ul> <li>AR-729 -          Fix Partition Alignment for resizes and armbian-install</li> </ul> <ul> <li>AR-711 -          Network troubles on Nanopi K2 / Odroids</li> </ul> <ul> <li>AR-709 -          Tinkerboard AP crash on client connect</li> </ul> <ul> <li>AR-708 -          Missing library for compiling u-boot</li> </ul> <ul> <li>AR-707 -          Wrong keyboard code detected</li> </ul> <ul> <li>AR-705 -          Compilation issues when building old u-boot</li> </ul> <ul> <li>AR-698 -          XU4 - current kernel oddness with docker</li> </ul> <ul> <li>AR-697 -          Fix Meson64 Default Governor</li> </ul> <ul> <li>AR-688 -          Firefly boot broken</li> </ul> <ul> <li>AR-674 -          Users can\u2019t change desktop wallpaper on Gnome</li> </ul> <ul> <li>AR-666 -          ZSH is disabled on upgrade</li> </ul> <ul> <li>AR-662 -          Distribution support status is not written to the /etc/armbian-release</li> </ul> <ul> <li>AR-659 -          Rootfs image runs out of inodes during build</li> </ul> <ul> <li>AR-653 -          builder issue with gnome</li> </ul> <ul> <li>AR-647 -          Wireless driver 8811CU is broken on 5.11.y</li> </ul> <ul> <li>AR-646 -          Bootsplash breaks compilation on 5.11.y</li> </ul> <ul> <li>AR-644 -          Wireless driver 8188 EU broken and disabled since 5.9.y</li> </ul> <ul> <li>AR-636 -          Odroid N2+ lost additional freq values</li> </ul> <ul> <li>AR-585 -          HDMI-CEC not working on rockchip64 Legacy</li> </ul> <ul> <li>AR-88 -          Banana Pi M3 does not boot</li> </ul> <p>Finished projects</p> <ul> <li>AR-694 -          Create Jira-based checklist for Desktop Testing</li> </ul> <ul> <li>AR-457 -          Enable native arm/arm64 building</li> </ul> <ul> <li>AR-454 -          Additional Desktop Configurations for use with new framework</li> </ul> <ul> <li>AR-444 -          Improving download infrastructure Phase 2</li> </ul> <ul> <li>AR-200 -          Improving Desktop images</li> </ul> <p>Closed Tasks</p> <ul> <li>AR-714 -          Adjusting support status</li> </ul> <ul> <li>AR-710 -          Create imx edge branch</li> </ul> <ul> <li>AR-706 -          Bump Allwinner u-boot to 2021.04</li> </ul> <ul> <li>AR-704 -          Distinguish between edge and normal image in motd</li> </ul> <ul> <li>AR-696 -          Improve Nvidia Jetson Nano support</li> </ul> <ul> <li>AR-673 -          Add few missing packages</li> </ul> <ul> <li>AR-670 -          Add additonal mirros for linux-firmware beside kernel source</li> </ul> <ul> <li>AR-667 -          Move Meson64 DEV to 5.10.y</li> </ul> <ul> <li>AR-657 -          Add instructions how to manual flash boot loader</li> </ul> <ul> <li>AR-656 -          Implement timeout on cache download</li> </ul> <ul> <li>AR-654 -          Fix stability issues of NanoPi M4V2 in current and dev</li> </ul> <ul> <li>AR-651 -          NanoPC-T4 legacy: enable USB-C DisplayPort &amp; eDP outs</li> </ul> <ul> <li>AR-648 -          Resolve GPIO &amp; PWM patches on mvebu</li> </ul> <ul> <li>AR-645 -          Detach rtl8812au from fixed commit ID if it builds from master</li> </ul> <ul> <li>AR-643 -          Bump DEV kernels to 5.11.y</li> </ul> <ul> <li>AR-634 -          Add Orangepi R1 Plus</li> </ul> <ul> <li>AR-633 -          Enable  hardware PRNG/TRNG/SHA on sun8i-ce platform</li> </ul> <ul> <li>AR-613 -          test/beta img auto builder</li> </ul> <ul> <li>AR-612 -          Update pine64 install instructions</li> </ul> <ul> <li>AR-600 -          RK3399\u2019s: Add multimedia and OC overlays</li> </ul> <ul> <li>AR-599 -          Enable HDMI-CEC and ISP1 camera support for rk3399 and rockchip64 legacy</li> </ul> <ul> <li>AR-369 -          Check kernel config changes</li> </ul>"},{"location":"Release_Changelog/#v21024-2021-04-04","title":"v21.02.4 (2021-04-04)","text":"<p>Added Nvidia Jetson Nano (community supported target)</p> <p>Rebuild images for Odroid N2, H4, HC4</p>"},{"location":"Release_Changelog/#v21023-2021-03-09","title":"v21.02.3 (2021-03-09)","text":"<p>All kernels received upstream updates</p> <p>All images has been rebuilt</p> <p>Fixed reboot troubles on meson64 family (Odroid N2, C2, H4, HC4)</p> <p>ZSH upgrade fixed</p> <p>Type-C DP support for the NanoPC T4</p> <ul> <li>AR-654 -         NanoPi M4V2 stability fix for current and dev</li> </ul> <p>Allwinner a20 fail to init hdmi in many cases / fixed (all images need to be rebuilt)</p> <ul> <li>AR-660 -         Attempt to improve stability on Helios64</li> </ul>"},{"location":"Release_Changelog/#v21022-2021-02-16","title":"v21.02.2 (2021-02-16)","text":"<p>All kernels received upstream updates</p> <ul> <li>AR-633 -         Enable  hardware PRNG/TRNG/SHA on sun8i-ce platform</li> </ul> <ul> <li>AR-636 -         Odroid N2+ lost additional freq values</li> </ul>"},{"location":"Release_Changelog/#v21021-2021-02-03","title":"v21.02.1 (2021-02-03)","text":"<p>Finished projects</p> <ul> <li>AR-235 -         Implement Device Tree Editor</li> </ul> <ul> <li>AR-476 -         Add sound to Odroid N2</li> </ul> <ul> <li>AR-485 -         Improve multicore compilation</li> </ul> <ul> <li>AR-487 -         Rework download pages</li> </ul> <ul> <li>AR-508 -         Add Odroid HC4</li> </ul> <ul> <li>AR-546 -         Added Pine64 Pinecube</li> </ul> <ul> <li>AR-566 -         Add Nanopi R4S</li> </ul> <ul> <li>AR-568 -         Add Orangepizero 2 WIP target</li> </ul> <ul> <li>AR-571 -         Move Meson64 DEV to 5.10.y</li> </ul> <ul> <li>AR-589 -         Add ZShell via armbian-zsh package</li> </ul> <ul> <li>AR-590 -         ZRAM Enhancements - decouple swap config from tmp</li> </ul> <p>Solved bugs</p> <ul> <li>AR-365 -         4k not detected properly on Amlogic, Rockchip devices</li> </ul> <ul> <li>AR-440 -         Errors shown at 1st login under certain conditions</li> </ul> <ul> <li>AR-512 -         Fix Ethernet for Opi3 and other devices with phymode for kernel 5.10</li> </ul> <ul> <li>AR-514 -         Download and verify not fully reliable</li> </ul> <ul> <li>AR-547 -         First login: adding a non-existing keyboard variant</li> </ul> <ul> <li>AR-548 -         mvebu DFS seems to cause system hang under high I/O</li> </ul> <ul> <li>AR-557 -         GCC compatibility issues</li> </ul> <ul> <li>AR-559 -         First login script - not all locales have UTF8 encoding</li> </ul> <ul> <li>AR-565 -         SATA on HC4 is not recognized</li> </ul> <ul> <li>AR-570 -         Improper order in getty override.conf</li> </ul> <ul> <li>AR-584 -         Nanopi M4V2 hangs on bluetooth loading</li> </ul> <ul> <li>AR-595 -         Rockpi 4B 1GB not booting</li> </ul> <ul> <li>AR-605 -         Booting troubles on Odroid C4 / HC4</li> </ul> <ul> <li>AR-606 -         Force boot script update throws out some error</li> </ul> <ul> <li>AR-608 -         Broken building out-of-tree modules</li> </ul> <ul> <li>AR-610 -         Nanopi Neo2 black sometimes nic doesn't init</li> </ul> <ul> <li>AR-615 -         Helios64 unstable 2.5Gbps Interface on LK5.x</li> </ul> <ul> <li>AR-616 -         Ubuntu Bionic ZSH / BASH changing issue</li> </ul> <ul> <li>AR-617 -         Locales detection doesn't work properly in some cases</li> </ul> <ul> <li>AR-627 -         Ubuntu update is overwriting our welcome screen</li> </ul> <ul> <li>AR-629 -         Odroid HC4 SATA failure</li> </ul> <ul> <li>AR-631 -         Orangepi Zero2 broken network</li> </ul> <ul> <li>AR-632 -         Desktop fails to load at second run</li> </ul> <p>Closed task</p> <ul> <li>AR-163 -         Systematically cleanup distribution defaults</li> </ul> <ul> <li>AR-206 -         Improve memory performance on Renegade (roc-rk3328-cc) in current</li> </ul> <ul> <li>AR-399 -         Improve Pinebook PRO support</li> </ul> <ul> <li>AR-467 -         Enable AUFS support back</li> </ul> <ul> <li>AR-472 -         Added support for Ubuntu 20.10 Groovy</li> </ul> <ul> <li>AR-517 -         Mark Bionic builds host as deprecated</li> </ul> <ul> <li>AR-520 -         Move Rock64 to CSC in build script</li> </ul> <ul> <li>AR-525 -         Bump Rockchip 32bit to 5.9.y</li> </ul> <ul> <li>AR-526 -         Move mvebu-dev kernel to 5.9+</li> </ul> <ul> <li>AR-551 -         Update fan configuration, enable network LED and enable UPS timer</li> </ul> <ul> <li>AR-552 -         Re-enable UHS SDR104 mode for Helios64 and roc-rk3399-pc</li> </ul> <ul> <li>AR-553 -         Update builder to retrieve web seeds from mirrors api</li> </ul> <ul> <li>AR-554 -         OdroidN2 Ethernet Failure Pt2</li> </ul> <ul> <li>AR-556 -         Adding vnstat and ZFS support to MOTD</li> </ul> <ul> <li>AR-558 -         Switch mvebu current to K5.9</li> </ul> <ul> <li>AR-563 -         Improve headers compilation</li> </ul> <ul> <li>AR-576 -         Enabled debug on RockpiS</li> </ul> <ul> <li>AR-579 -         Improve (oh-my)ZSH loading speed</li> </ul> <ul> <li>AR-587 -         Fix kernel switching for rk3399 family</li> </ul> <ul> <li>AR-594 -         Upgrade Meson64 u-boot to 2020.10</li> </ul> <ul> <li>AR-598 -         Switch rockchip64 u-boot to 2020.10</li> </ul> <ul> <li>AR-601 -         Move sunxi-current to 5.10.y</li> </ul> <ul> <li>AR-603 -         Enable SPI boot option for roc-rk3399-pc</li> </ul> <ul> <li>AR-607 -         Move Meson64 Current to 5.10.y</li> </ul> <ul> <li>AR-609 -         Move Mvebu Current to 5.10.y</li> </ul> <ul> <li>AR-611 -         Switch rockchip64-current to 5.10.y</li> </ul> <ul> <li>AR-614 -         Upgrade ZFS packages</li> </ul> <ul> <li>AR-618 -         Upgrade mvebu64 current to 5.10.y</li> </ul> <ul> <li>AR-619 -         Bump rockchip current to 5.10.y</li> </ul> <ul> <li>AR-620 -         Enable network link leds for NanoPi R4S by default</li> </ul> <ul> <li>AR-622 -         Enable DMC for Station-M1 in current and dev</li> </ul> <ul> <li>AR-623 -         Enable RTC (hym8563) for Station P1 in dev and current</li> </ul> <ul> <li>AR-624 -         Provide an option to skip autodetection at first login</li> </ul> <ul> <li>AR-628 -         Bump Meson64 u-boot to 2021.01</li> </ul> <ul> <li>AR-630 -         Bump Odroid XU4 DEV to 5.10.y</li> </ul>"},{"location":"Release_Changelog/#v201110-2021-01-25","title":"v20.11.10 (2021-01-25)","text":"<p>All images rebuild due to torrent system corruption</p>"},{"location":"Release_Changelog/#v20119-2021-01-23","title":"v20.11.9 (2021-01-23)","text":"<p>Broken Nanopi Neo buster image rebuild, adding Station M1 and P1 legacy images, Odroid XU4 update</p>"},{"location":"Release_Changelog/#v20118-2021-01-17","title":"v20.11.8 (2021-01-17)","text":"<ul> <li>AR-614 -         Upgrade ZFS on Focal and Buster (64bit only) to v2.0.1</li> </ul>"},{"location":"Release_Changelog/#v20117-2021-01-06","title":"v20.11.7 (2021-01-06)","text":"<ul> <li>AR-605 -         Booting troubles on Odroid C4 / HC4</li> </ul> <p>all images were rebuilt - we had a few corrupted ones in previous build</p>"},{"location":"Release_Changelog/#v20116-2021-01-03","title":"v20.11.6 (2021-01-03)","text":"<ul> <li>AR-601 -         Move sunxi-current to 5.10.y</li> </ul> <ul> <li>AR-235 -         Implement Device Tree Editor in armbian-config</li> </ul> <ul> <li>AR-589 -         Add armbian-zsh package</li> </ul> <ul> <li>AR-590 -         ZRAM Enhancements - decouple swap config from tmp</li> </ul> <ul> <li>AR-554 -         Fix Odroid N2 Ethernet Failure</li> </ul> <ul> <li>AR-556 -         Adding vnstat and ZFS support to MOTD</li> </ul> <ul> <li>AR-579 -         Improve (oh-my)ZSH loading speed</li> </ul> <ul> <li>AR-512 -         Fix Ethernet for Opi3 and other devices with phymode for kernel 5.10</li> </ul> <ul> <li>AR-547 -         First login: adding a non-existing keyboard variant</li> </ul> <ul> <li>AR-565 -         Fix SATA on HC4 is not recognized</li> </ul> <ul> <li>AR-595 -         Fix Rockpi 4B 1GB not booting</li> </ul>"},{"location":"Release_Changelog/#v20115-2020-12-31","title":"v20.11.5 (2020-12-31)","text":"<p>AR-566 - Add Nanopi R4S preview images</p>"},{"location":"Release_Changelog/#v20114-2020-12-15","title":"v20.11.4 (2020-12-15)","text":"<ul> <li>Re-adding accidentally removed network driver on Helios64 added OpenHab 3 to the armbian-config software installer</li> </ul> <ul> <li>AR-587 - Fix kernel switching for rk3399 family</li> </ul>"},{"location":"Release_Changelog/#v20113-2020-12-12","title":"v20.11.3 (2020-12-12)","text":"<p>Bugfix release</p> <ul> <li>AR-559 - First login script - not all locales have UTF8 encoding</li> <li>AR-163 - Systematically cleanup distribution defaults</li> <li>AR-206 - Improve memory performance on Renegade (roc-rk3328-cc) in current</li> <li>AR-472 - Added support for Ubuntu 20.10 Groovy</li> <li>AR-476 - Add sound to Odroid N2</li> <li>AR-485 - Improve multicore compilation</li> <li>AR-487 - Rework download pages</li> <li>AR-508 - Add Odroid HC4</li> <li>AR-514 - Download and verify not fully reliable</li> <li>AR-517 - Mark Bionic builds host as deprecated</li> <li>AR-525 - Bump Rockchip 32bit to 5.9.y</li> <li>AR-526 - Move mvebu-dev kernel to 5.9+</li> <li>AR-546 - Added Pine64 Pinecube</li> <li>AR-547 - First login: adding a non-existing keyboard variant</li> <li>AR-548 - mvebu DFS seems to cause system hang under high I/O</li> <li>AR-551 - Update fan configuration, enable network LED and enable UPS timer</li> <li>AR-552 - Re-enable UHS SDR104 mode for Helios64 and roc-rk3399-pc</li> <li>AR-553 - Update builder to retrieve web seeds from mirrors api</li> <li>AR-556 - Adding vnstat and ZFS support to MOTD</li> <li>AR-557 - GCC compatibility issues</li> <li>AR-558 - Switch mvebu current to K5.9</li> <li>AR-563 - Improve headers compilation</li> <li>AR-565 - SATA on HC4 is not recognized</li> <li>AR-568 - Add Orangepizero 2 WIP target</li> <li>AR-570 - Improper order in getty override.conf</li> <li>AR-571 - Move Meson64 DEV to 5.10.y</li> </ul>"},{"location":"Release_Changelog/#v20111-2020-12-04","title":"v20.11.1 (2020-12-04)","text":"<ul> <li>AR-551 - Update fan configuration, enable network LED and enable UPS timer</li> <li>AR-565 - SATA on HC4 is not recognized Updated Odroid C4/HC4, Helios64, Rockpi 4* images and rockchip64 kernels</li> </ul>"},{"location":"Release_Changelog/#v2011-2020-11-24","title":"v20.11 (2020-11-24)","text":"<p>Finished projects</p> <ul> <li>AR-2 - Improving download infrastructure Phase 1</li> <li>AR-151 - Integrate JMCCs Multimedia script</li> <li>AR-230 - Decide what to do with TVboxes</li> <li>AR-412 - Update Odroid XU4 kernels</li> <li>AR-424 - Improve HTOP config</li> <li>AR-456 - Upgrading Allwinner u-boot to 2020.10</li> <li>AR-476 - Add sound to Odroid N2</li> <li>AR-485 - Improve multicore compilation</li> <li>AR-508 - Add Odroid HC4</li> <li>AR-509 - Upgrade meson64 to 5.9.y</li> <li>AR-510 - Move meson (Odroid C1) to 5.9.y</li> <li>AR-532 - Move Odroid C4 from legacy u-boot toward mainline</li> </ul> <p>Solved bugs</p> <ul> <li>AR-314 - Links to SHA files at download pages are wrong</li> <li>AR-372 - Meson64 Reboot failure kernel 5.7</li> <li>AR-373 - Rock64 no HDMI (must be unplugged)</li> <li>AR-382 - Fix zram creation on bigger memory devices</li> <li>AR-391 - Warning a reboot is needed doesn\u2019t go away after reboot</li> <li>AR-407 - Bug in first login script</li> <li>AR-417 - HTOP in Bullseye needs higher package version</li> <li>AR-420 - GPIO SPI patch is failing on Rockchip64</li> <li>AR-422 - Improper version showing at upgrade</li> <li>AR-425 - Resize is finished but message doesn\u2019t disappear</li> <li>AR-428 - Firefox initial config has different location then ESR variant</li> <li>AR-436 - Rockpi S reports some error in postinst scripts</li> <li>AR-437 - MOTD cosmetic issue</li> <li>AR-439 - Automated rebuilds set image status to USER_BUILT</li> <li>AR-441 - Odroid C4 legacy bootscript problem</li> <li>AR-452 - Fix first boot locales selection and add desktop lang switching</li> <li>AR-459 - Missing package libreoffice-style-tango from Bullseye desktop</li> <li>AR-471 - Mitigate Git server failures</li> <li>AR-482 - Htop doesn\u2019t show CPU speed to normal user but shows properly to root</li> <li>AR-484 - Odroid C4 refuse to boot</li> <li>AR-491 - LEDs on Helios4 not working</li> <li>AR-493 - Patches are not creating</li> <li>AR-494 - Fix armbian-hardware-opitimization not being run</li> <li>AR-505 - armbian-hardware-optimization: eth0 tweak applied before it is appear on /proc/interrupts</li> <li>AR-527 - Rockchip 32bit sources were removed</li> <li>AR-528 - Improve creating images from repository</li> <li>AR-529 - Z28 PRO device tree doesn\u2019t exists in mainline</li> </ul> <p>Closed tasks</p> <ul> <li>AR-284 - Discuss if there is a cleaner way to install Chromium</li> <li>AR-350 - Switch rock64 to mainline u-boot</li> <li>AR-351 - Switch rockpro64 to mainline u-boot</li> <li>AR-363 - Switch mvebu current to K5.8.y</li> <li>AR-380 - Revisit RTL8812AU driver</li> <li>AR-387 - Switch from rk3399-bluetooth service to btbcm for loading firmware/patchram in dev/current</li> <li>AR-388 - XU4 - Introduce new Mem freq scaling patch and re-enable</li> <li>AR-390 - Add Radxa Rockpi 4C</li> <li>AR-400 - Enable overlays in rockchip64-legacy</li> <li>AR-401 - Enable creation of SPI flash u-boot image for ROCK Pi 4</li> <li>AR-403 - Enable overlays in rk3399-legacy</li> <li>AR-404 - Switch renegade to mainline u-boot</li> <li>AR-409 - Move imx6 current kernels to 5.8.y</li> <li>AR-413 - Improve reliability of Helios64\u2019s eMMC module</li> <li>AR-415 - Improve reboot reliability for Helios64</li> <li>AR-416 - Move Rockchip 32bit to 5.8.y</li> <li>AR-419 - Add dedicated DT for Nanopi Neo3</li> <li>AR-445 - systemd-journal not rotated with armbian-ramlog</li> <li>AR-458 - Update board support statuses</li> <li>AR-461 - Add Armbian to Neofetch</li> <li>AR-462 - Adapt helios64 device tree name to match upstream Linux</li> <li>AR-464 - Move Libre Computer Renegade to mainline u-boot</li> <li>AR-472 - Added support for Ubuntu 20.10 Groovy</li> <li>AR-473 - Add interactive option to use precompiled packages from Armbian repository</li> <li>AR-477 - Advanced recovery options for rockchip64 boards</li> <li>AR-483 - Fix analog (3.5 jack) audio on ROCK Pi 4C</li> <li>AR-490 - Enable RTC on Odroid N2</li> <li>AR-495 - Allow building images with kernels 5.8.17+ and 5.9.2+</li> <li>AR-499 - Enable Watchdog for G12/Odroidn2</li> <li>AR-504 - Helios64: Switch fusb302 driver to mainline and enable DP over TypeC</li> <li>AR-511 - Switch rockchip64-current to linux 5.9.y</li> <li>AR-513 - Move Odroid XU4 kernels up</li> <li>AR-515 - Upgrade imx6 to 5.9.y</li> <li>AR-521 - Exchange mv with rsync</li> <li>AR-522 - Allow setting MTU for Rockchip64\u2019s dwmac interface</li> <li>AR-523 - enable CONFIG_TARGET_CORE for iSCSI target support</li> <li>AR-524 - Upgrade rockpis legacy kernel</li> <li>AR-531 - Check why disabling one update-initramfs breaks Ubuntu initrd making on update</li> </ul>"},{"location":"Release_Changelog/#v200822-2020-11-8","title":"v20.08.22 (2020-11-8)","text":"<p>Added WIP images for Odroid HC4 Updated images for Odroid C4, N2, C2, Lafrite, Lepotato, KVIM1</p>"},{"location":"Release_Changelog/#v200813-2020-10-19","title":"v20.08.13 (2020-10-19)","text":"<ul> <li>AR-363 - Switch mvebu current to K5.8.y</li> <li>AR-466 - Enable Recovery button on Helios64</li> <li>AR-416 - Move Rockchip 32bit to 5.8.y</li> <li>AR-476 - Add sound to Odroid N2 update all kernels Rebuild images for Helios4, Helios64 and Odroid N2</li> </ul>"},{"location":"Release_Changelog/#v200811-2020-10-16","title":"v20.08.11 (2020-10-16)","text":"<ul> <li>AR-465 - Helios64 cannot boot from eMMC enable Ubuntu 20.10 Groovy as a CSC build option (need build parameter EXPERT=\u201dyes\u201d) update u-boot loader to 2020.10 on Allwinner platform update all kernels update images for Helios 64 add option to build images from prebuild packages from repository which drastically improves build time in case you don\u2019t need to rebuild kernel</li> </ul>"},{"location":"Release_Changelog/#v20088-2020-10-05","title":"v20.08.8 (2020-10-05)","text":"<ul> <li>AR-463 - Improve Helios64 Stability, updated images Adapt Helios64 devicetree name to match upstream Linux</li> </ul>"},{"location":"Release_Changelog/#v20084-2020-09-23","title":"v20.08.4 (2020-09-23)","text":"<ul> <li>AR-399 - Improve Pinebook PRO support, updated images Updated Helios64 images</li> </ul>"},{"location":"Release_Changelog/#v20083-2020-09-21","title":"v20.08.3 (2020-09-21)","text":"<ul> <li>updated mainline kernel based images to Linux 5.8.10</li> <li>all other kernels updated to respective latest version</li> <li>improved htop with showing network status dynamically, GPU temp, improved CPU speed display</li> <li>fixed usbip for sharing usb over network</li> <li>fixed Odroid C4 boot script bug; adding normal and higher CPU speeds</li> <li>added many improvements for Helios64</li> <li>enabled GPU temperatures in htop for XU4, meson64 (Odroid N2/N2+) and rockchip64/32</li> <li>fixed initial configuration for Firefox</li> <li>fixed tx offloading for Rockchip64 NIC\u2019s</li> <li>move rockchip 32bit to 5.8.y (Tinkerboard / MiQi)</li> <li>improved RK3399 stability by mingling OPP</li> <li>fixed a bunch of bugs related to encrypted root filesystem</li> <li>enabled hardware watchdog support for mvebu64 / Espressobin</li> <li>cosmetic fixes to motd</li> <li>enabling I2S and spdif on Nanopi Neo3 by default</li> <li>fixes wrong memory calculation on ZRAM display</li> <li>fixing firstlogin bug preventing running xrdp</li> <li>move Espressobin kernel to 5.8.y</li> <li>adjust / fix Kali Linux wifi injections patches</li> </ul> <p>Known bugs:</p> <ul> <li>Some Rockpro64 boards have troubles with upgrade</li> <li>Bananapi M3 eMMC can\u2019t boot from eMMC (solution is available)</li> <li>H6 stability issues on some boards</li> <li>RockpiS shows some error on upgrade but upgrade suceeds</li> <li>4K and audio on mainline based meson64 boards</li> </ul>"},{"location":"Release_Changelog/#v2008-2020-08-20","title":"v20.08 (2020-08-20)","text":"<p>Finished projects</p> <ul> <li>AR-45 - Make first login more user friendly</li> <li>AR-71 - Create a document: How we will use Jira</li> <li>AR-182 - Unify / merge kernel configs</li> <li>AR-201 - Introduce CI autotest facility</li> <li>AR-227 - Move Espressobin current to K5.6</li> <li>AR-313 - Ability to work in offline mode</li> <li>AR-320 - Initial support for Rockpi E</li> <li>AR-324 - Add Rockchip RK322X SoC support</li> <li>AR-328 - Meson64 move current to 5.7.y</li> <li>AR-329 - Switch sunxi dev target to kernel 5.7</li> <li>AR-331 - Enable kernel boot splash as an option</li> <li>AR-335 - Improve patch making</li> <li>AR-392 - Add Odroid N2+</li> <li>AR-402 - Add Helios64</li> </ul> <p>Solved bugs</p> <ul> <li>AR-282 - Rockpi 4B 1Gb doesn\u2019t boot modern kernel / u-boot</li> <li>AR-295 - Odroid C2: no more USB devices after upgrade</li> <li>AR-298 - Missing default SElinux policy</li> <li>AR-303 - Create a download page for BPI M2 zero</li> <li>AR-305 - K-worker creates load on Allwinner devices</li> <li>AR-319 - Armbian config failed to switch kernels</li> <li>AR-330 - Shell check bugs</li> <li>AR-332 - When making all kernels - building sometimes fails</li> <li>AR-337 - Odroid XU4 Memcopy Slow on all Kernel 5.x 80MB/sec instead of 370+MB/sec</li> <li>AR-338 - Bananapi R2 does not boot at all</li> <li>AR-340 - Fix WiFi on Nanopi M4V2</li> <li>AR-348 - Confirm RK3399 TcpOffloading bug</li> <li>AR-352 - Fix Random MAC on H3 boards</li> <li>AR-354 - Support User Provided EDID Firmware</li> <li>AR-355 - backport Linux v5.8 fbtft/fb_st7789v invert colors, proper gamma</li> <li>AR-356 - Building multiple u-boot targets breaks</li> <li>AR-371 - CPU frequency scaling broken on H6</li> <li>AR-378 - Increase address room for initial ramdisk</li> <li>AR-381 - selinux-policy-default missing on Debian Bullseye</li> <li>AR-393 - Ask for setting locale at first run</li> </ul> <p>Closed tasks</p> <ul> <li>AR-28 - Added new GCC compilers</li> <li>AR-225 - Introduce PACKAGE_LIST for BOARD and FAMILY</li> <li>AR-300 - Enable HDMI audio for OrangePi 4</li> <li>AR-317 - Move Odroid XU4 dev to mainline + patches</li> <li>AR-318 - Upgrade Odroid XU4 legacy kernel</li> <li>AR-321 - Upgrade Meson (C1) current to 5.7.y</li> <li>AR-323 - Allow install to SD NAND for Rockpi S</li> <li>AR-326 - Make USB3 support of ROCK Pi E on par with other rk3328 boards</li> <li>AR-327 - Bump imx6 current kernel to 5.7.y</li> <li>AR-333 - Update Odroid XU4 kernels</li> <li>AR-334 - Cleanup boot environment files</li> <li>AR-336 - Add support for cheap 2.5GB USB network dongles</li> <li>AR-341 - Follow-up N2 CPU Affinity</li> <li>AR-349 - Update mainline u-boot to v2020.07 for rockchip64 and rk3399</li> <li>AR-357 - IRQ affinity improvements for G12B</li> <li>AR-358 - Added initial support for Neo 3</li> <li>AR-361 - Update Odroid XU4 boot.ini</li> <li>AR-362 - HDMI sound support for Allwinner A10, A20, A31</li> <li>AR-364 - Change sunxi legacy to 5.4.y, current to 5.7.y</li> <li>AR-366 - Move rockchip/64 current to 5.7.y</li> <li>AR-383 - Upgrades for Tapatalk plugin</li> <li>AR-389 - Add PACKAGE_LIST_BOARD_REMOVE option</li> </ul>"},{"location":"Release_Changelog/#v20057-2020-07-02","title":"v20.05.7 (2020-07-02)","text":"<ul> <li>AR-308 - Disable HDMI in u-boot for rk3399 boards</li> <li>AR-338 - Bananapi R2 does not boot at all</li> <li>AR-337 - Odroid XU4 Memcopy Slow on all Kernel 5.x 80MB/sec instead of 370+MB/sec Update images for: NanoPC T4, Nanopi M4,Nanopi M4v2, Nanopi Neo4, Orangepi 4, Firefly RK3399, Bananapi R2, Odroid XU4</li> </ul>"},{"location":"Release_Changelog/#v20056-2020-06-19","title":"v20.05.6 (2020-06-19)","text":"<ul> <li>AR-324 - Add Rockchip RK322X SoC support</li> <li>AR-320 - Initial support for Rockpi E</li> <li>AR-323 - Allow install to SD NAND for Rockpi S</li> </ul>"},{"location":"Release_Changelog/#v20055","title":"v20.05.5","text":"<p>never released/skipped</p>"},{"location":"Release_Changelog/#v20054-2020-06-16","title":"v20.05.4 (2020-06-16)","text":"<ul> <li>AR-311 - Initrd on Focal can get corrupted followup fix</li> </ul>"},{"location":"Release_Changelog/#v20053-2020-06-10","title":"v20.05.3 (2020-06-10)","text":"<ul> <li>AR-300 - Enable HDMI audio for OrangePi 4</li> <li>AR-305 - K-worker creates load on Allwinner devices</li> <li>AR-282 - Rockpi 4B 1Gb doesn't boot modern kernel / u-boot</li> </ul>"},{"location":"Release_Changelog/#v20052-2020-06-05","title":"v20.05.2 (2020-06-05)","text":"<ul> <li>AR-294 - Initrd on Focal can get corrupted</li> </ul>"},{"location":"Release_Changelog/#v20051-2020-05-31","title":"v20.05.1 (2020-05-31)","text":"<p>Kagu</p> <p>Finished projects</p> <ul> <li>AR-108 - Upgrade remaining kernels to 5.4.y</li> <li>AR-158 - Update 3rd party wireless drivers</li> <li>AR-159 - Switch fake-hwclock to hardware RTC on mvebu family</li> <li>AR-168 - Add NanoPi R2S board support</li> <li>AR-180 - Update Wireguard drivers on kernels below 5.4.y</li> <li>AR-184 - Improve slow booting on Rockchip RK3399 devices</li> <li>AR-185 - Change download images compression format</li> <li>AR-190 - Update wireless driver for RTL88x2BU</li> <li>AR-196 - Upgrade u-boot to 2020.04 where possible</li> <li>AR-201 - Introduce CI autotest facility</li> <li>AR-207 - Merge rockpis-dev into rockchip64</li> <li>AR-208 - Consolidate u-boot variants for mvebu family</li> <li>AR-210 - Add support for more HDMI resolutions on Rockchip RK3288 devices</li> <li>AR-215 - Move meson64 dev branch to 5.6.y</li> <li>AR-221 - Upgrade imx6 current to 5.6.y</li> <li>AR-222 - Port Docker image building to Ubuntu 20.04</li> <li>AR-226 - Add Hardkernel Odroid C4 mainline u-boot / kernel</li> <li>AR-236 - Attach Meson64 CURRENT to 5.6.y</li> <li>AR-238 - Updating hostapd, PSD and theme package in repository</li> <li>AR-247 - Revitalise Udoo board</li> <li>AR-250 - Improve usage of external patches</li> <li>AR-253 - Add prerm script for headers</li> <li>AR-254 - Add Banana Pi M2 Zero</li> <li>AR-257 - Bring Odroid C1 back from the EOL with latest upstream kernel</li> <li>AR-260 - Add Nanopi A64 board support</li> <li>AR-261 - Add Rockpi S mainline board support</li> <li>AR-262 - Move Allwinner development branch to 5.6.y</li> <li>AR-278 - Add snap free Chromium to Ubuntu Focal</li> <li>AR-279 - Add Hardkernel Odroid C4 stock kernel</li> </ul> <p>Solved bugs</p> <ul> <li>AR-109 - Upgrade is not done properly on some boards</li> <li>AR-165 - Instability with Rock64 and Rock PRO</li> <li>AR-177 - No serial gadget console on Nanopi Neo2 black</li> <li>AR-181 - Odroid N2 crashes during USB rsync backups</li> <li>AR-198 - Olimex Lime 2 doesn\u2019t boot from eMMC</li> <li>AR-204 - CPUfreq defaults missing on update</li> <li>AR-205 - No sound output with OrangePi 4 in dev and current</li> <li>AR-211 - Chrony fails to start on Ubuntu Focal</li> <li>AR-212 - Random MAC on Nanopi R2S</li> <li>AR-220 - Disable 3D support in Bionic due to broken mesa packages</li> <li>AR-231 - Unstable stmmac network driver on Meson64</li> <li>AR-237 - Desktop install on Ubuntu Focal installs Gnome3 desktop</li> <li>AR-239 - Chrony fails to start on Focal</li> <li>AR-240 - Broken VFAT kernel upgrade</li> <li>AR-244 - Thermal throttling on H5 doesn\u2019t work properly</li> <li>AR-245 - Hostapd doesn\u2019t go up</li> <li>AR-248 - Odroid C4 CPU speed is limited to 1.5Ghz</li> <li>AR-249 - Problems with CI testings</li> <li>AR-251 - Fix kernel 5.7.y packages patch</li> <li>AR-255 - Fix Debian mirrors URL</li> <li>AR-263 - Fix audio on Renegade</li> <li>AR-269 - Add correct CPU regulator configuration for the NanoPI R1</li> <li>AR-274 - Add missing iozone3 package to the minimal image</li> <li>AR-277 - Distinguish nightly and stable images at the download pages</li> <li>AR-286 - Armbian-resize-filesystem fails on first run due to missing fdisk in Bullseye</li> <li>AR-287 - Make sure cryptsetup-initramfs is installed in any case</li> </ul> <p>Closed tasks</p> <ul> <li>AR-150 - Disable Stretch image creation for Helios4 and Clearfog</li> <li>AR-157 - Add Ubuntu Focal 20.04 as a supported build host</li> <li>AR-186 - Blacklist 3D engine on headless images</li> <li>AR-189 - Move wireless driver for 8189ES from patch to git</li> <li>AR-195 - Adding Ubuntu 20.04 to all builds</li> <li>AR-209 - Disable CONFIG_VIDEO_DE2 in u-boot for Allwinner devices</li> <li>AR-213 - Make manual for .xz images and check their authentication</li> <li>AR-228 - Enable audio and USB on Nanopi A64</li> <li>AR-229 - Bump with AUFS for DEV kernels</li> <li>AR-232 - Switch Odroid XU4 DEV branch to Libreelec branch</li> <li>AR-234 - Disable ZSH update prompt on every two weeks</li> <li>AR-242 - Enable SELinux</li> <li>AR-252 - Improve source code cleaning</li> <li>AR-258 - Enables PCIE PHY with Mezzanine NVME</li> <li>AR-259 - Add mp8859 regulator to current for RK3399-ROC-PC</li> <li>AR-264 - Enable RTL8723DS WiFI driver</li> <li>AR-265 - Remove Xenial from supported host OS</li> <li>AR-266 - Fix dependency for native building on Linux Mint and Debian Buster</li> <li>AR-267 - Enable Cedrus video acceleration on Allwinner kernels</li> <li>AR-268 - Add higher clock for Allwinner H6</li> <li>AR-270 - Add support for alternate console UARTs in Allwinner H3 u-boot</li> <li>AR-271 - Lower DDR clock rate to 504MHz for H5 boards</li> <li>AR-280 - Update CONF, CSC and WIP statuses according to support level</li> <li>AR-285 - Improve thermal throttling on Allwinner H6</li> <li>AR-288 - Add vendor name to the board config files</li> </ul>"},{"location":"Release_Changelog/#v200212-2020-04-27","title":"v20.02.12 (2020-04-27)","text":"<ul> <li>Added preview images for Odroid C4</li> </ul>"},{"location":"Release_Changelog/#v20028-2020-03-26","title":"v20.02.8 (2020-03-26)","text":"<ul> <li>update kernels with upstream versions, synchronise and test kernel sources download</li> </ul>"},{"location":"Release_Changelog/#v20027-2020-03-26","title":"v20.02.7 (2020-03-26)","text":"<ul> <li>Updated images for Rockpi S, Odroid XU4 and FriendlyARM Nanopc T3, T3+, M3, Fire3</li> </ul>"},{"location":"Release_Changelog/#v20026-2020-03-23","title":"v20.02.6 (2020-03-23)","text":"<ul> <li>Updated images for Rockpi S and Orangepi 4</li> <li>Updated armbian-config (fixed OMV installer)</li> </ul>"},{"location":"Release_Changelog/#v20025-2020-03-19","title":"v20.02.5 (2020-03-19)","text":"<ul> <li>Updated images for Orangepi 4, Bananapi and Rockpi S</li> </ul>"},{"location":"Release_Changelog/#v20024-2020-03-18","title":"v20.02.4 (2020-03-18)","text":"<ul> <li>Added images for Nanopi R2S and Bananapi M2 Zero</li> <li>Kernel update for Odroud XU4</li> </ul>"},{"location":"Release_Changelog/#v20023-2020-02-21","title":"v20.02.3 (2020-02-21)","text":"<ul> <li>Updating images for Le potato, Khadas Vim1,La Frite, Nanopik2 S905, Odroid N2/C2 - fixing audio</li> <li>Updating images for Orangepi 4 - boot loader problem</li> </ul>"},{"location":"Release_Changelog/#v20022-2020-02-18","title":"v20.02.2 (2020-02-18)","text":"<p>Chiru</p> <p>Tasks</p> <ul> <li>AR-46 - Support for single function run</li> <li>AR-47 - Adding Docker shell support</li> <li>AR-49 - Move sunxi kernel to 5.4.y</li> <li>AR-79 - Check and adjust AUFS patch for 5.4.y</li> <li>AR-80 - Move imx6 to 5.4.y</li> <li>AR-81 - Enable Meson64 DEV at 5.4.y</li> <li>AR-82 - Move Mvebu64 / Espressobin dev kernel to 5.4.y</li> <li>AR-84 - Move rockchip64 current to 5.4.y</li> <li>AR-85 - Adjusted Sunvell R69</li> <li>AR-90 - Add support for Nanopi M4 v2</li> <li>AR-92 - Enable stable MAC address from cpuid on rk3399</li> <li>AR-96 - Update Xradio wireless driver</li> <li>AR-97 - Tag supported builds properly at download pages</li> <li>AR-98 - Enable missing Kuberenetes kernel dependency</li> <li>AR-100 - Add Debian Bullseye and Ubuntu Focal</li> <li>AR-112 - Enabled internal WLAN on RockPi S</li> <li>AR-113 - Install wireguard tools only when selected</li> <li>AR-114 - Enable audio codec on Orangepi Win</li> <li>AR-115 - Add drivers for Realtek RTL8811CU and RTL8821C chipsets</li> <li>AR-116 - Remove annoying debug message filling logs on 8189es</li> <li>AR-117 - Add Pine H64 model B</li> <li>AR-124 - Enable wireless on Rockpi-S</li> <li>AR-127 - Refactoring wifi patches</li> <li>AR-128 - Adding WIP support for Pinebook PRO</li> <li>AR-129 - Move NanopiM4 V2 and Pine H64 under supported</li> <li>AR-134 - Update AUFS version on Odroid XU4 and Nanopi Fire3/T3/T3+</li> <li>AR-138 - Update RK3399 legacy kernel (Nanopi M4, T4, Neo4) to latest upstream version</li> <li>AR-139 - Nanpi R1 - move primary serial console to ttyS1 which is on the chassis</li> <li>AR-143 - Create OpenHab installation instructions for their official documentation</li> <li>AR-146 - Update rockchip-legacy to most recent upstream kernel version</li> <li>AR-147 - Enable analogue audio on Allwinner H6</li> <li>AR-148 - [ mvebu-current ] Fix cpufreq (dynamic frequency scaling)</li> <li>AR-149 - [ mvebu-current ] Fix pcie issues</li> <li>AR-153 - Enable USB3 for Rock64/Renegade with RK3328 on mainline kernel</li> <li>AR-154 - Add analogue audio driver to Allwinner H6</li> <li>AR-155 - Enable Cedrus video acceleration support on Allwinner boards</li> <li>AR-167 - Add upstream patches for Odroid XU4</li> <li>AR-172 - USB3 Support for Rockchip</li> </ul> <p>Bugs</p> <ul> <li>AR-74 - User patches directories not created</li> <li>AR-76 - Rockchip64 missing CPU_MIN variable</li> <li>AR-77 - Wrong board name variable for Orangepi RK 3399</li> <li>AR-83 - Packaging patch broken for kernel 5.4.y</li> <li>AR-86 - CPU freq scaling for H6 doesn't work in K5.4</li> <li>AR-88 - Banana Pi M3 does not boot</li> <li>AR-89 - Tinkerboard S doesn't start from eMMC</li> <li>AR-91 - Broken Allwinner overlays</li> <li>AR-94 - Espressobin v7 with 2gb of ram fail to boot</li> <li>AR-102 - Missing packaging patch for Rockpis legacy kernel</li> <li>AR-103 - PPA way of adding sources are failing on Ubuntu</li> <li>AR-104 - 32bit rust compiler doesn't run new kernels</li> <li>AR-105 - Orangepi Zero Plus 2 doesn't boot</li> <li>AR-106 - Wireguard breaks building on 5.4.y</li> <li>AR-107 - Improve compiler and rootfs download process</li> <li>AR-110 - Missing Bionic image for Nanopi Neo Plus2</li> <li>AR-111 - Some versions of Orangepi Win does not boot modern kernel</li> <li>AR-118 - NanoPi M4V2 ethernet partialy broken in one side</li> <li>AR-123 - OpenHAB2 installation is failing</li> <li>AR-125 - Wireless driver for 8188EUS breaks on K4.14</li> <li>AR-126 - Nanopi M3/Fire3/PC3 compilation breaks</li> <li>AR-130 - Instability with various A64 boards</li> <li>AR-131 - Add support for 3rd version of Pinebook A64 panel</li> <li>AR-133 - Odroid XU4 legacy kernel images instability</li> <li>AR-141 - Odroid XU4 current with kernel 5.4.y seems unstable</li> <li>AR-142 - Cryptsetup disk encryption build feature broken</li> <li>AR-144 - Tinkerboard break booting</li> <li>AR-145 - Missing HDMI audio on H3 boards</li> <li>AR-152 - Display issues with Bionic Mesa update</li> <li>AR-164 - Htop package does not build in qemu under Ubuntu Focal 20.04</li> <li>AR-166 - Rootfs cache number creates a window of 12h when users are forced to rebuild cache</li> <li>AR-170 - Wireless not connecting for SBCs</li> <li>AR-171 - Fix broken loading process on MiQi</li> <li>AR-173 - Fix makefile of kernel headers 4.4.210 for rk3399</li> <li>AR-174 - Teres Keyboard Not Working</li> </ul> <p>Stories</p> <ul> <li>AR-48 - Bump u-boot to 2020.01 on RK3399 boards</li> <li>AR-156 - WIP orangepi 4 preliminary support</li> </ul>"},{"location":"Release_Changelog/#v19113-2019-11-20","title":"v19.11.3 (2019-11-20)","text":"<p>Tasks</p> <ul> <li>AR-1 - Adding support category for distributions</li> <li>AR-4 - Remove Allwinner legacy</li> <li>AR-5 - Drop Udoo family and move Udoo board into newly created imx6 family</li> <li>AR-9 - Rename sunxi-next to sunxi-legacy</li> <li>AR-10 - Rename sunxi-dev to sunxi-current</li> <li>AR-11 - Adding Radxa Rockpi S support</li> <li>AR-13 - Rename rockchip64-default to rockchip64-legacy</li> <li>AR-14 - Add rockchip64-current as mainline source</li> <li>AR-15 - Drop Rockchip 4.19.y NEXT, current become 5.3.y</li> <li>AR-16 - Rename RK3399 default to legacy</li> <li>AR-17 - Rename Odroid XU4 next and default to legacy 4.14.y, add DEV 5.4.y</li> <li>AR-18 - Add Odroid N2 current mainline</li> <li>AR-19 - Move Odroid C1 to meson family</li> <li>AR-20 - Rename mvebu64-default to mvebu64-legacy</li> <li>AR-21 - Rename mvebu-default to mvebu-legacy</li> <li>AR-22 - Rename mvebu-next to mvebu-current</li> <li>AR-23 - Drop meson64 default and next, current becomes former DEV 5.3.y</li> <li>AR-24 - Drop cubox family and move Cubox/Hummingboard boards under imx6</li> <li>AR-26 - Adjust motd</li> <li>AR-27 - Enabling distribution release status</li> <li>AR-28 - Added new GCC compilers</li> <li>AR-29 - Implementing Ubuntu Eoan</li> <li>AR-30 - Add desktop packages per board or family</li> <li>AR-31 - Remove (Ubuntu/Debian) distribution name from image filename</li> <li>AR-32 - Move arch configs from configuration.sh to separate arm64 and armhf config files</li> <li>AR-33 - Revision numbers for beta builds changed to day_in_the_year</li> <li>AR-34 - Patches support linked patches</li> <li>AR-35 - Break meson64 family into gxbb and gxl</li> <li>AR-36 - Add Nanopineo2 Black</li> <li>AR-38 - Upgrade option from old branches to new one via armbian-config</li> <li>AR-41 - Show full timezone info</li> <li>AR-43 - Merge Odroid N2 to meson64</li> <li>AR-44 - Enable FORCE_BOOTSCRIPT_UPDATE for all builds</li> <li>AR-57 - New kernel feature requested CONFIG_BLK_DEV_DRBD</li> <li>AR-60 - Modified logrotate.service</li> <li>AR-63 - Docker maintenance features</li> </ul> <p>Bugs</p> <ul> <li>AR-25 - Armbian resize stopped working in Ubuntu 19.10 or higher</li> <li>AR-40 - When changing console layout it does not change</li> <li>AR-51 - Prevent configuring locale</li> <li>AR-52 - Broken desktop install</li> <li>AR-54 - Upstream package name changed</li> <li>AR-55 - Wireless driver remove patch for Odroid XU4 broke down</li> <li>AR-56 - Missing CPU regulator</li> <li>AR-58 - Troubles with wireless on Nanopi DUO &amp; Opi Zero</li> <li>AR-59 - Compressed files are getting back to /var/log</li> <li>AR-62 - No HDMI sound on various meson64 boards</li> <li>AR-64 - Docker require root</li> <li>AR-68 - Broken Ethernet on Pine64+</li> </ul> <p>Stories</p> <ul> <li>AR-61 - Adding support for LOCAL_MIRROR</li> <li>AR-65 - Moving configs under userpatches</li> <li>AR-66 - Enable build system torrent download by default</li> <li>AR-67 - Install Docker when we want to build under Docker</li> <li>AR-69 - Use kernel command line instead of a patch</li> <li>AR-70 - Enable Lima kernel driver on meson64</li> <li>AR-73 - Enable PCI on Rockpi 4 and overlay for GEN2 speed</li> </ul>"},{"location":"Release_Changelog/#v598-2019-10-09","title":"v5.98 (2019-10-09)","text":"<ul> <li>changed ntptime with chrony</li> <li>fixed serial console on several hosts</li> <li>added FriendlyARM ZeroPi</li> <li>enabled gadgets on rockchip64</li> <li>bumped RK3399 boards to latest kernel, recreate images and repository</li> <li>merged odroidxu4 down to default since we only have one kernel</li> <li>fixed Cubox images, move them to stock kernel</li> <li>fixed low Synaptic search speed</li> </ul> <p>Build script:</p> <ul> <li>script configurations were migrated to userpatches</li> <li>added option to create minimal images with around 500Mb in size BUILD_MINIMAL=\u201dyes\u201d</li> <li>added initial support of MCIMX7SABRE board (CSC)</li> <li>updates for xt-q8l-v10 (CSC)</li> <li>Docker is installed automatically if one want use it (Debian based build host only)</li> <li>refactor build all images scripting that images can be build in full parallel mode</li> <li>added one file for storing which combinations shell be made for each board</li> <li>replaced Etcher with dd + verify for directly burning images when done</li> <li>cleaned initial config and remove confusing advanced options out</li> </ul>"},{"location":"Release_Changelog/#v592-2019-08-02","title":"v5.92 (2019-08-02)","text":"<ul> <li>updated sunxi NEXT (4.19.63) and DEV (5.2.5) kernels</li> <li>updated htop application to show cpu speed and temperature (buster / disco)</li> </ul>"},{"location":"Release_Changelog/#v591-2019-07-31","title":"v5.91 (2019-07-31)","text":"<ul> <li>created new images for Helios4 and Clearfog Pro/Base</li> <li>moved mvebu DEFAULT, NEXT and DEV branch to next kernel (LTS) and U-boot version</li> <li>fixed armada_thermal sensor reading, adjusted Helios4 fancontrol configuration</li> <li>fixed ODT on data signals of DDR RAM for Armada A388 SOMs</li> <li>recreated Armbian Buster images due to a bug in Network manager which in some cases failed to initiate network connection</li> </ul> <p>Armbian-config:</p> <ul> <li>added Emby installation</li> <li>updated Plex install to use official repo</li> <li>added netmask-to-CIDR function for manual IP configuration</li> </ul>"},{"location":"Release_Changelog/#v590-2019-07-07","title":"v5.90 (2019-07-07)","text":"<ul> <li>added Armbian Buster images for all boards</li> <li>added Macchiatobin Doubleshot CSS target and images</li> <li>added images with test kernel v5.1.y for: Orangepi3, Lite2, One+, PineH64, Odroid C1, Teres, Pinebook</li> <li>added wireless drivers for 88x2bu</li> <li>added eMMC support for Nanopi K2 (booting from doesn\u2019t work yet)</li> <li>added dual w1 overlay for meson64 family</li> <li>updated wireless drivers for Realtek 8811, 8812, 8814 and 8821</li> <li>updated wireless drivers for rtl8188eus &amp; rtl8188eu &amp; rtl8188etv</li> <li>added latest Wireguard driver</li> <li>enable eMMC on Orangepi Win Plus</li> <li>enable Bluetooth on Tinkerboard, Nanopi4, Rockpi 4 CLI images</li> <li>improved ALSA config on Tinkerboard</li> <li>fixed Bluetooth on Nanopi M4/Neo4/T4 and Rockpi4</li> <li>fixed wireless drivers on OPi3 &amp; Lite2</li> <li>fixed temperature readout on Allwinner H5 boards</li> <li>fixed SPI related bug on Allwinner 5.1.y kernel</li> <li>fixed HDMI output and bump kernel to 5.1.y on imx6 boards</li> <li>fixed eMMC install, add rootdev= to armbianEnv if missing</li> <li>fixed A10/A20 SATA write speed</li> <li>set default build target from Debian Stretch to Buster for all boards</li> <li>changed CPU clock back to 1.5/1.8Ghz defaults on boards with RK3399 to minimise thermal throttling</li> <li>changed motd console welcome text to: \u201cWelcome to Debian Stretch with Armbian Linux 5.1.6-sunxi\u201d</li> <li>changed display manager to lightdm by default and remove nodm completely</li> <li>changed u-boot for A64 to upstream sources</li> <li>changed RK3399 to U-boot 2019.04</li> <li>added URL to the build script and commit hash to /etc/armbian-release file</li> <li>added synaptic package manager and on-board keyboard to the desktop base</li> <li>added \u201clogout\u201d to the panel/menu</li> <li>added normal users to additional groups: disk tty users games</li> <li>updated all kernels with upstream</li> <li>updated ATF and bootloader on Espressobin, supporting all versions</li> </ul> <p>Build script:</p> <ul> <li>added mirrors for speed-up building in China mainland</li> <li>added support for download compilers and rootfs cache via torrent network</li> <li>added new output image compression option (xz)</li> <li>enabled Debian Buster and Ubuntu Disco (unsupported) targets</li> <li>few Docker building improvements, caching image</li> <li>replace curl with aria2</li> <li>Linaro compilers update to 2019.02</li> </ul> <p>Armbian-config:</p> <ul> <li>added Gimp installation</li> <li>added enable/disable Avahi</li> <li>updated OMV installer, OMV5 preparations</li> <li>enable screen resolution changer for Odroid N2</li> <li>enable CPU speed and governor adjustment</li> </ul>"},{"location":"Release_Changelog/#v587-2019-05-26","title":"v5.87 (2019-05-26)","text":"<ul> <li>added support for Odroid N2, Nanopi R1, Nanopi Duo2</li> <li>enabled nightly images for Orangepi3, One+, Lite2, PineH64, Rock64pro, RockPi4b</li> <li>enabled nigtly Buster and Disco images for Le Potato</li> <li>recompiled all images and pushed update where updates are known to work (sunxi, sunxi64, meson64, \u2026)</li> <li>improved SATA write speed on A20 chips for up to 300%</li> <li>fixed thermal throtling for H5 devices</li> <li>mainline u-boot moved 2019.04</li> <li>most development kernels moved to 5.1.y</li> <li>added separate DT for espressobinv7, updated boot loader</li> <li>enable WoL for eth0 on Helios4</li> </ul> <p>Build script:</p> <ul> <li>added Debian Buster and Ubuntu Disco (WIP)</li> <li>improved building under Docker. Source code is not copied to docker image, caching image</li> <li>Linaro compilers update to 2019.02</li> <li>fixed incomplete cleaning of the source code</li> </ul> <p>Armbian-config:</p> <ul> <li>fixed kernel changing</li> <li>fixed sources download</li> <li>fixed Hass.IO and TVheadend install</li> <li>added menu driven CPU frequency/governor adjustement</li> <li>improved two-factor authentication</li> <li>added meson64 and rockchip to overlay/hardware configuration</li> <li>improved hostapd management</li> </ul> <p>Infrastructure:</p> <ul> <li>main download server has been hooked to 10GbE connection.</li> <li>added web/http seeds to torrent download. Torrent download could/should fully utilize your download capacity.</li> <li>major forum upgrade (v4.4.3)</li> <li>added another IPV6 capable EU mirror https://mirrors.dotsrc.org</li> </ul>"},{"location":"Release_Changelog/#v576-2019-02-11","title":"v5.76 (2019-02-11)","text":"<ul> <li>remove Exagear Desktop</li> </ul>"},{"location":"Release_Changelog/#v575-2019-02-10","title":"v5.75 (2019-02-10)","text":"<ul> <li>added updated driver for Realtek 8811, 8812, 8814 and 8821 chipsets</li> <li>added Wireguard support to remaining kernels (except lower than 3.10)</li> <li>images rebuild with latest upstream sources, mainline u-boot was bumped to 2018.11</li> </ul>"},{"location":"Release_Changelog/#v574-2019-01-31","title":"v5.74 (2019-01-31)","text":"<ul> <li>fixing systemd related bug found in sunxi legacy 3.4.y kernels</li> </ul>"},{"location":"Release_Changelog/#v573-2019-01-29","title":"v5.73 (2019-01-29)","text":"<ul> <li>much faster armbian-install operations. Thanks to @dedalodaelus</li> <li>added support for @wireguard on all kernels higher than 3.10.y</li> <li>fixed drivers for popular DVB tuner S960 (all kernels)</li> <li>fixed bug in wireless drivers on Cubietruck, BananpiPRO, Bananapi+</li> <li>fixed AP mode on Orangepi PC+, Prime, One, .. when using kernel 4.19.y</li> <li>added prolific USB-to-USB bridges in mvebu-next/dev</li> <li>added nftables masquerade in mvebu64-next</li> <li>added MD raid support for SUNXI64</li> <li>upgrade bugfix for Helios4</li> <li>updated hostapd to 2.7</li> <li>fixed 1512MHz OPP on Renegade</li> <li>fixed DRM crashing for rockchip64</li> <li>mainline u-boot bumped to 2018.11 (update goes manually from armbian-install utility)</li> <li>added testing images for Orangepi RK3399 and Radxa Rockpi 4B</li> </ul>"},{"location":"Release_Changelog/#v572-2019-01-16","title":"v5.72 (2019-01-16)","text":"<ul> <li>added additional repository mirror (updated armbian-config)</li> <li>fixed Tinkerboard DTB in repository and images rebuild</li> </ul>"},{"location":"Release_Changelog/#v571-2019-01-16","title":"v5.71 (2019-01-16)","text":"<ul> <li>updated images for Odroid C2, Lepotato and Nanopik2-S905 due to this bug</li> </ul>"},{"location":"Release_Changelog/#v570-2019-01-12","title":"v5.70 (2019-01-12)","text":"<ul> <li>sunxi-next and sunxi64-next were moved from 4.14.y to 4.19.y (remake of all AW images)</li> <li>better DVFS on H3/H5/A64, enabled higher cpu speed.</li> <li>added overlay support for Tinkerboard/rockchip next and kernel upped to 4.19.y</li> <li>updated next kernel for Odroid XU4 to 4.19.y</li> <li>updated next kernel for Odroid C2, Lepotato and Nanopik2-S905 to 4.19.y with overlay support</li> <li>fixed poweroff on H5</li> <li>H5/A64 lost experimental status,</li> <li>upgraded images and upstream/bugfix kernel upgrade for Rock64, Renegade,</li> <li>u-boot update is moved from automated to manual (armbian-config) to minimize boot related troubles</li> <li>added two repository mirrors: China and France (armbian-config -&gt; Personal -&gt; Mirror)</li> <li>changed switching to alternative kernels from armbian-config. It is possible to select a direct version and it only replaces kernel (safer)</li> <li>first official build for Olimex Teres</li> <li>mainline kernel builds for: Pine64, Pine64so, Olinuxino A64, OrangepiWin</li> <li>added more download variants for Rock64, Renegade, Tritium H3&amp;H5</li> <li>updated images for Z28PRO, Bananapi PRO, Espressobin, Olimex Micro, Lime, Udoo, Bananapi M2, Bananapi M2U,</li> </ul>"},{"location":"Release_Changelog/#v568-2018-12-30","title":"v5.68 (2018-12-30)","text":"<ul> <li>updated Espressobin images, kernel updated to 4.19.y</li> </ul>"},{"location":"Release_Changelog/#v567-2018-11-26","title":"v5.67 (2018-11-26)","text":"<ul> <li>updated Helios4 images</li> <li>added experimental mainline kernel images for Pinebook and Pinebook 1080p</li> </ul>"},{"location":"Release_Changelog/#v567-2018-11-12","title":"v5.67 (2018-11-12)","text":"<ul> <li>updated images for Bananapi R2 with eMMC install support.</li> </ul>"},{"location":"Release_Changelog/#v566-2018-11-08","title":"v5.66 (2018-11-08)","text":"<ul> <li>added Mediatek MT7623 family.</li> <li>added images for Bananapi R2 with kernel 4.19.y without official support.</li> </ul>"},{"location":"Release_Changelog/#v566-2018-11-07","title":"v5.66 (2018-11-07)","text":"<ul> <li>removing Odroid C2 official support, drop its default 3.16.y kernel from build engine and merge with the meson64 family.</li> <li>attach meson64 dev to 4.19.y</li> <li>drop Udoo Neo completly, drop Udoo Quad default and dev kernel.</li> <li>Odroid XU4: drop kernel 3.10.y, default branch is upgraded to offical 4.14.y, next becomes vanilla 4.19.y</li> </ul>"},{"location":"Release_Changelog/#v565-2018-11-06","title":"v5.65 (2018-11-06)","text":"<ul> <li>Cubox-i/Hummigboard: drop kernel 3.14.y and move 4.14.y to default, next becomes 4.19.y, dev 4.19.y with a mainline u-boot</li> </ul>"},{"location":"Release_Changelog/#v564-2018-10-09","title":"v5.64 (2018-10-09)","text":"<ul> <li>updated images and packages for Helios4.</li> <li>added images for Nanopi Neo4.</li> </ul>"},{"location":"Release_Changelog/#v563-2018-10-08","title":"v5.63 (2018-10-08)","text":"<ul> <li>updated images for Helios4 with SPI booting support.</li> <li>updated armbian-config. Added advanced ZSH shell install with most used plugins and tmux.</li> </ul>"},{"location":"Release_Changelog/#v562-2018-10-01","title":"v5.62 (2018-10-01)","text":"<ul> <li>updated armbian-config</li> </ul>"},{"location":"Release_Changelog/#v561-2018-09-26","title":"v5.61 (2018-09-26)","text":"<ul> <li>updated armbian-config,</li> <li>fixed Chromium on Debian builds with a workaround. We are overwriting package with last known working one. It will show some error on startup which is safe to ignore. This workaround will fade out with Chromium upstream update.</li> </ul>"},{"location":"Release_Changelog/#v560-2018-09-19","title":"v5.60 (2018-09-19)","text":"<p>Changes overview:</p> <p>General:</p> <ul> <li>Ubuntu Xenial was replaced with Bionic unless kernel was too old for the change,</li> <li>Debian Jessie becomes EOL and its building is not maintained anymore while you will still receive kernel updates,</li> <li>Emergency swap file creation is disabled by default since we use compressed memory (ZRAM) as an alternative,</li> <li><code>vm.swappiness</code> has been changed from 0 to 100 (if you run databases on your board you might want to revert this change in <code>/etc/sysctl.conf</code>),</li> <li>RAM logging also uses ZRAM now and rotates logs automagically,</li> <li>all images were rebuilt, except boards for which support ended,</li> <li>significantly lighter - browser only - desktop images (&lt; 1.5G),</li> <li>fixed hanging on headers installation,</li> <li>install boot script (BSP package) if not present. This fixes upgrade or kernel switching problems,</li> <li>Proper bind mount directory when installing to SATA/USB and booting from SD,</li> <li>update for wireless drivers 8812/11/14AU, 8188EU and AUFS,</li> <li>Bugfix when a temperature is not present or readings are invalid,</li> <li>Also showing bridge IP addresses in MOTD,</li> <li>storing package list compressed - saves 50-70Mb,</li> <li>enlarging automated apt-get update and purge intervals,</li> <li>smaller overhead for CLI images,</li> <li>improved alternative kernel switching,</li> <li>stop setting Google\u2019s DNS server as default for privacy reasons.</li> </ul> <p>Family:</p> <ul> <li>sunxi and sunxi64, u-boot was bumped to 2018.05, NEXT branch was updated to the latest 4.14.y, DEV is attached to 4.18.y + fixed overlay support,</li> <li>mvebu64, default BSP kernel was upgraded to 4.14.y, NEXT to 4.18.y,</li> <li>odroidc1, experimental NEXT kernel branch was attached to 4.18.y,</li> <li>odroidc2 kernel was merged with meson64 on the source level,</li> <li>meson64 u-boot was pushed to 2018.05, a default was updated to the latest 4.14.y, NEXT to 4.18.y,</li> <li>rk3288, u-boot was pushed to 2018.05, legacy kernel cleaned and fixed after upstream troubles, NEXT branch was updated to the latest 4.14.y,</li> <li>rockchip64, rk3399 was split into rk3399 for Friendly ARM boards and rockchip64 for Rock64 and RockPro, Ayufan repository. Merging is postponed for the future,</li> <li>s5p6818 family support added NEXT branch was updated to the latest 4.14.y,</li> <li>mvebu, NEXT branch was updated to latest 4.14.y, DEV attached to 4.18.y,</li> <li>fixed randomly failing X server on imx6 family,</li> </ul> <p>Board:</p> <ul> <li>added WIP support for Firefly RK3399, Lime A64, Renegade, Rockpro64, Olimex Teres</li> <li>added experimental images for Bananapi M3 and Cubietruck+,</li> <li>adeed support for: Tinkerboard S, Rock64, Orangepi Zero Plus, Nanopi Neo Core2, Nanopi M4,</li> <li>added NEO 1.1 regulator overlay,</li> <li>added Helios4 device tree with FAN control for modern kernel,</li> <li>enabled SPI access on Espressobin,</li> <li>updated SPI boot firmware on Espressobin (18.09.1) with many fixes and support for booting from USB, SATA, eMMC or SD,</li> <li>added Tinkerboard S DC-IN voltage to armbianmonitor,</li> <li>fixed network interface initialization,</li> <li>fixed clock drift on Bananapi boards,</li> <li>enabled concurrent AP/STA mode on Tinkerboard,</li> <li>improved support for NanoPi Fire 3 (added SPU1705, DVFS, thermal tables, etc.),</li> <li>fixed network crashing on high load. Affected: Odroid C1/C2, Le Potato kernel 4.18.y,</li> <li>fixed wireless, eMMC and Bluetooth on (unsupported) Z28 PRO and changed boot order,</li> <li>fixed eMMC install on NanoPC T3+ and Docker dependencies on Fire3, M3, NanoPC T3+,</li> <li>added eMMC and DVFS support on Espressobin mainline kernel,</li> <li>ported Tinkerboard UMS to modern u-boot,</li> <li>enabled 1392 MHz cpufreq OPP on all RK3328 devices,</li> <li>enabled 1992/1512MHz cpufreq OPP on all RK3399 devices,</li> <li>added eMMC to OlinuXino A64 kernel and u-boot,</li> <li>added Sunvell R69 CSC target,</li> <li>OrangepiWin: fixed BT,</li> <li>fixed ethernet on (unsupported) Bananapi M64.</li> </ul> <p>Build script:</p> <ul> <li>changed recommended build host to Bionic, Xenial still supported for everything except building Bionic images,</li> <li>added support for burning image directly to SD card when your build is done by using Etcher for CLI,</li> <li>added support for making LUKS encrypted root images, parameters: CRYPTROOT_ENABLE=yes, CRYPTROOT_PASSPHRASE=unlockpass,</li> <li>fixed building under Docker, bumped to Bionic host,</li> <li>added building Bionic and block building it for images with too old kernels,</li> <li>added multibranch support (LIB_TAG).</li> </ul> <p>Infrastructure:</p> <ul> <li>build machine main SSD and memory upgrade, switched from bare metal Ubuntu Xenial to fully optimsed Debian KVM server, free build capacity is avaliable for any armbian related activity upon request,</li> <li>download server drive capacity and download speed upgrade, IPV6,</li> <li>geo load balancing for repository and download server is under testing,</li> <li>improved repository management. Possibility to add packages via Github,</li> <li>introducing new internal parameter, example: BUILD_ALL=\u201dyes\u201d REBUILD_IMAGES=\u201dbananapi,udoo,rock64\u201d to specify which images need rebuilding,</li> <li>main torrent server cleanup, removed deprecated images,</li> <li>creating report https://beta.armbian.com/buildlogs/report.html when building all kernels. Prepared to include simple per board testing report where exists armbian/testings.</li> </ul> <p>Known bugs:</p> <ul> <li>modern kernel support on A64 boards is mainly broken.</li> </ul>"},{"location":"Release_Changelog/#v559-2018-08-18","title":"v5.59 (2018-08-18)","text":"<ul> <li>rebuilt images for Espressobin with kernel 4.18.y, Nanopc T4</li> </ul>"},{"location":"Release_Changelog/#v558-2018-08-13","title":"v5.58 (2018-08-13)","text":"<ul> <li>rebuilt images for Bananapi, Bananapi Pro, Bananapi+, Odroid C2, Odroid XU4</li> <li>updated repository for Odroid C2/XU4, changed NEXT from 4.9.y to 4.14.y</li> </ul>"},{"location":"Release_Changelog/#v558-2018-08-13_1","title":"v5.58 (2018-08-13)","text":"<ul> <li>rebuilt images for Bananapi, Bananapi Pro, Bananapi+</li> </ul>"},{"location":"Release_Changelog/#v557-2018-08-11","title":"v5.57 (2018-08-11)","text":"<ul> <li>added Bionic desktop and Stretch CLI images for RK3399 powered Nanopc T4</li> </ul>"},{"location":"Release_Changelog/#v556-2018-08-10","title":"v5.56 (2018-08-10)","text":"<ul> <li>rebuilt images for Pinebook. Added Bionic build</li> </ul>"},{"location":"Release_Changelog/#v555-2018-08-09","title":"v5.55 (2018-08-09)","text":"<ul> <li>rebuilt images for Orangepi One+, Orangepi Lite 2 and Pine H64. Enabled USB3, network, THS, DVFS, higher frequencies, HDMI on 4.18.y DEV branch images.</li> </ul>"},{"location":"Release_Changelog/#v555-2018-08-03","title":"v5.55 (2018-08-03)","text":"<ul> <li>added Stretch and Bionic mainline kernel images for Odroid C1 (testing),</li> <li>rebuilt images for Bananapi M3 (fixed ethernet)</li> </ul>"},{"location":"Release_Changelog/#v554-2018-07-25","title":"v5.54 (2018-07-25)","text":"<ul> <li>updated images for Odroid C2, Nanopi M3, Nanopi Fire 3 and NanoPC T3+, Espressobin, Cubox-i/HB and Le potato</li> <li>added preview images without end user support for Bananapi M3,Cubietruck+ and Bananapi M2 Berry.</li> </ul>"},{"location":"Release_Changelog/#v553-2018-07-23","title":"v5.53 (2018-07-23)","text":"<ul> <li>Z28PRO images updated. Fixed wireless and Bluetooth</li> <li>FriendlyARM Nanopi K2 S905 images updated. Fixed ethernet problems.</li> <li>FriendlyARM Nanopi K1+ images updated. Fixed HDMI out and wireless</li> </ul>"},{"location":"Release_Changelog/#v551-2018-07-04","title":"v5.51 (2018-07-04)","text":"<ul> <li>Helios4 Stretch and Bionic images update</li> </ul>"},{"location":"Release_Changelog/#v550-2018-06-28","title":"v5.50 (2018-06-28)","text":"<ul> <li>Espressobin images rebuild and repository update, default 4.4.138, next 4.17.3, dev 4.18.RC, hardware crypto support in 4.17.y, zram and zswap</li> <li>Odroid C2 bugfix update</li> </ul>"},{"location":"Release_Changelog/#v549-2018-06-28","title":"v5.49 (2018-06-28)","text":"<ul> <li>Amlogic Meson64 family (Odroid C2, Lepotato and FriendlyARM K2 S905) were merged into one kernel. Default images comes with kernel 4.14.52, next with 4.17.3 and DEV with 4.18.RC, updated boot scripts, implemented latest kernel bug fixes</li> <li>updated kernels, desktop packages and armbian config on the stable repository (apt update &amp; upgrade)</li> </ul>"},{"location":"Release_Changelog/#v548-2018-06-26","title":"v5.48 (2018-06-26)","text":"<ul> <li>added nightly images for Odroid C2 with 4.16.y (NEXT) and 4.18.y (DEV) and hopefully fixed ethernet driver</li> </ul>"},{"location":"Release_Changelog/#v547-2018-06-22","title":"v5.47 (2018-06-22)","text":"<ul> <li>Odroid C2 images rebuild. Legacy kernel was upgraded to 3.16.57, next to 4.14.51, u-boot to 2018.05</li> <li>Added Tritium H5</li> </ul>"},{"location":"Release_Changelog/#v546-2018-06-20","title":"v5.46 (2018-06-20)","text":"<ul> <li>Added Olimex Teres nightly builds</li> <li>Added FriendlyARM Nanopi K1 plus</li> </ul>"},{"location":"Release_Changelog/#v546-2018-06-06","title":"v5.46 (2018-06-06)","text":"<ul> <li>Added Orange Pi Lite 2 and One plus nightly builds</li> </ul>"},{"location":"Release_Changelog/#v545-2018-05-23","title":"v5.45 (2018-05-23)","text":"<ul> <li>Orangepi Zero+ images rebuild</li> </ul>"},{"location":"Release_Changelog/#v544-2018-05-10","title":"v5.44 (2018-05-10)","text":"<ul> <li>Espressobin images were rebuilt and moved under stable. Kernel 4.14.40, Stretch, Xenial and Bionic. Fixed bootloader, ath10 wireless card support</li> <li>added initial Bionic storage to the main apt repository</li> <li>Cubox-i / Hummingboard bugfix update to 4.16.y and images rebuild</li> <li>Odroid C2 images rebuild</li> </ul>"},{"location":"Release_Changelog/#v541-2018-02-10","title":"v5.41 (2018-02-10)","text":"<ul> <li>fixed LED driver on Helios4</li> <li>bugfix update on sunxi/sunxi64 kernel. Updated to 4.14.18</li> <li>kernel update for MVEBU next (4.14.18 and default 4.4.115) for Clearfog and Helios4. Upstream fixes,AUFS and Realtek 881yAU drivers update</li> </ul>"},{"location":"Release_Changelog/#v540-2018-02-05","title":"v5.40 (2018-02-05)","text":"<ul> <li>fixed eMMC support on Odroid C2 NEXT, kernel 4.14.y</li> <li>updated PWM driver on Helios4</li> <li>kernel update for MVEBU next (Clearfog, Helios4)</li> </ul>"},{"location":"Release_Changelog/#v538-2018-01-29","title":"v5.38 (2018-01-29)","text":"<ul> <li>updated all images</li> <li>added H3/H5 testing images with kernel 4.14.y</li> <li>added Nanopi M3/T3+/Fire testing image</li> <li>fixed Bluetooth on Orangepi Win</li> <li>main repository update with recent kernel on all NEXT builds</li> </ul>"},{"location":"Release_Changelog/#v537-2018-01-23","title":"v5.37 (2018-01-23)","text":"<ul> <li>bugfix release</li> <li>armbianmonitor -u fix</li> <li>setting cronjob permissions</li> <li>replace broken u-boot packages on A20 boards</li> <li>updated utilities: hostapd, sunxi-tools, armbian-config</li> <li>updated images: Bananapi, PRO, M2, BeelinkX2, Clearfog,Cubieboard2, Cubietruck, Cubox-i/HB, Espressobin, Helios4</li> </ul>"},{"location":"Release_Changelog/#v536-2017-12-03","title":"v5.36 (2017-12-03)","text":"<ul> <li>bugfix release</li> </ul>"},{"location":"Release_Changelog/#v535-2017-11-25","title":"v5.35 (2017-11-25)","text":"<ul> <li>mainline kernel updated to 4.13.y</li> <li>mainline u-boot updated to v2017.09</li> <li>added new sunxi Device Tree overlays, fixed and improved old overlays</li> <li>Micro-USB g_serial console is enabled by default on most small Allwiner based boards</li> <li>Olimex Lime2 and Micro: merging eMMC and normal versions</li> <li>Odroid C2: next and dev branches migrated to mainline u-boot</li> <li>Odroid XU4: added dev branch, next branch migrated to mainline u-boot</li> <li>Clearfog: added dev branch with mainline u-boot</li> <li>added supports for 7\u201d RPi display to Tinkerboard with legacy kernel</li> <li>All mainline kernels: added Realtek 8811AU/8812AU/8814AU USB wireless driver with monitor mode and frame injection</li> <li>All boards: added kernel source packages to the repository (Package names <code>linux-source-${BRANCH}-${LINUXFAMILY}</code>, i.e. <code>linux-source-sunxi-next</code>)</li> <li>Kernel headers are no longer installed by default to new images</li> <li>Additional out of tree drivers and USB Redirector are no longer installed by default to new images</li> <li>Switching from emergency swap to zram on new Ubuntu Xenial images</li> <li>New hardware support (stable/supported images): NanoPi Duo, Orange Pi R1, Pinebook</li> <li>New hardware support (experimental): Le Potato, NanoPi NEO 2, Orange Pi Zero Plus, Orange Pi Zero Plus 2 (H5)</li> <li>sunxi mainline u-boot: reenabled USB keyboard support and disabled stopping the boot sequence with any key - autoboot now can be aborted with  <p>Desktop images:</p> <ul> <li>xterm was replaced with full featured xfce terminal,</li> <li>added memory profile caching for Chromium,</li> <li>added OpenVPN connector,</li> <li>shortcuts to armbian-config, support and donate were moved to menu,</li> <li>default icon theme was changed to lighter one (Numix),</li> <li>fixed login greeter theme,</li> <li>changed wallpaper.</li> <li>changed CMA handling on Allwinner legacy kernels</li> </ul> <p>armbian-config:</p> <ul> <li>was splitted from board support packages to a new package <code>armbian-config</code></li> <li>managing board hardware configurations, hotspot, Bluetooth, SSH server</li> <li>freezing/unfreezing kernel upgrade</li> <li>switching between stable and beta builds,</li> <li>switching between alternative kernels,</li> <li>installing/uninstalling kernel headers,</li> <li>changing timezone, locales, hostname,</li> <li>running diagnostic tools,</li> <li>enabling/disabling RDP server,</li> <li>3rd party software installer: Samba, OMV, Pi hole, Transmission, \u2026</li> </ul> <p>Build script:</p> <ul> <li>added Debian Stretch</li> <li>most tweaks moved from inline files to separate files in board support package</li> <li>firmware blobs moved to a separate repository</li> <li>disabled distcc in extra software compilation process due to toolchain compatibility issues</li> </ul> <ul> <li>Known problems</li> </ul> <ul> <li>Allwinner A20/sun7i legacy boards. Changed CMA settings prevents playing video. You need to add cma=96M to kernel command line</li> </ul>"},{"location":"Release_Changelog/#v534-2017-10-18","title":"v5.34 (2017-10-18)","text":"<ul> <li>bugfix Odroid XU4/HC1 image rebuild due to broken USB install on kernel 4.9.x</li> <li>added Le Potato and Orange Pi Zero testing image (mainline kernel)</li> <li>Tinkerboard, MiQi and Pinebook images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v533-2017-09-24","title":"v5.33 (2017-09-24)","text":"<ul> <li>Odroid XU4/HC1 images were rebuilt.</li> </ul>"},{"location":"Release_Changelog/#v533-2017-09-21","title":"v5.33 (2017-09-21)","text":"<ul> <li>Tinkerboard and MiQi images were rebuilt. Rockchip legacy kernel was updated to 4.4.88 and mainline (NEXT) to 4.13.3.</li> </ul>"},{"location":"Release_Changelog/#v532-2017-06-23","title":"v5.32 (2017-06-23)","text":"<ul> <li>bugfix release due to broken crypto functions on kernel 4.11.x</li> </ul>"},{"location":"Release_Changelog/#v531-2017-06-15","title":"v5.31 (2017-06-15)","text":"<ul> <li>bugfix release due to network failure on some A10 / A20 boards</li> </ul> <p>End of support notice</p> <p>Following boards are no longer receiving support and updates since this version:</p> <ul> <li>Cubieboard (Allwinner A10) - not enough hardware samples to maintain support</li> <li>Lamobo R1 (Allwinner A20) - hardware design flaws, poor software support for the onboard switch</li> <li>Olimex Lime A10</li> </ul>"},{"location":"Release_Changelog/#v530-2017-06-14","title":"v5.30 (2017-06-14)","text":"<ul> <li>mainline kernel updated to 4.11</li> <li>mainline u-boot updated to v2017.05</li> <li>Firefox was replaced with Chromium (desktop images)</li> <li>sunxi mainline configuration: added Device Tree overlays support (new images only)</li> <li>sunxi mainline configuration: added <code>armbian-add-overlay</code> helper for compiling and activating DT overlays (new images only)</li> <li>log2ram: fixed saving <code>/var/log</code> contents on shutdown</li> <li>new hardware support (stable/supported images): Xunlong Orange Pi Zero Plus 2 (H3), ASUS TinkerBoard, MiQi</li> <li>reworked package updates MOTD script to speed up the login process</li> <li>added config file <code>/etc/default/armbian-motd</code> for disabling MOTD components</li> <li>added <code>armbian-config</code> dialog-based configuration program (WIP)</li> <li>Banana Pi M2: fixed HDMI video output</li> <li>Clearfog: adjusted temperature readout</li> <li>i.MX6 mainline: enabled support for HDMI audio and PCIe bus</li> </ul> <p>End of support notice</p> <p>Following boards are no longer receiving support and updates since this version:</p> <ul> <li>Orange Pi (Allwinner A20) - no hardware samples, out of stock</li> <li>Orange Pi Mini (Allwinner A20) - no hardware samples, out of stock</li> <li>LeMaker Guitar (Actions S500)</li> <li>Roseapple Pi (Actions S500)</li> </ul>"},{"location":"Release_Changelog/#v526-v527-2017-02-24","title":"v5.26, v5.27 (2017-02-24)","text":"<ul> <li>security update for most kernels (packages only)</li> <li>fixes for hostapd configuration</li> </ul>"},{"location":"Release_Changelog/#v525-2017-02-02","title":"v5.25 (2017-02-02)","text":"<ul> <li>armbian-install expanded functionality: you can partition destination and choose file-system type: ext2, ext3, ext4 and BTRFS (BTRFS requires kernel 4.4+)</li> <li>added new boards: Clearfog Base, Lime2 eMMC, Lime A33, NanoPi M1+, OrangePi Zero, OrangePi PC2 (mainline only, experimental)</li> <li>new default kernel for Clearfog(s), changed kernel family to \u201cmvebu\u201d to avoid conflicts</li> <li>disabled wireless power management by default to improve performance with certain drivers</li> <li>added wireless drivers to mainline kernels: OrangePi Zero, Neo Air</li> <li>implemented initrd loading support for all boards</li> <li>moved all images to single ext4 partition scheme</li> <li>changed default wallpaper, startup icon, shadows to windows on desktop builds</li> <li>Firefox web cache moved to memory</li> <li>added g_serial driver to boards without a network connector, working on both kernel (Opi Zero,Opi Lite,FA Neo Air)</li> <li>added \u201cSoftware boutique\u201d application installer on desktop builds (currently not working properly on arm64)</li> <li>added per board patching option</li> <li>added u-boot video driver and boot logo to H3 based boards</li> <li>added simplefb video driver (HDMI only) to mainline H3 kernel</li> <li>updated MALI driver on H3 platform, fixed problems on 2GB boards</li> <li>changed Ethernet switch driver on Lamobo R1 to DSA based one (mainline kernel)</li> <li>fixed soft cursor (CLI) for H3 legacy and Odroid C2</li> <li>expand and adjust multiple kernel configurations based on user requests</li> <li>adjusted sunxi boot script to support booting in SPI flash + USB storage scenario (w/o the SD card)</li> <li>dropped support for Debian Wheezy and Ubuntu Trusty releases</li> <li>sunxi mainline kernel was updated to 4.9.x, some dev kernels to 4.10</li> <li>added log2ram (Ramlog alternative) to default installation</li> <li>changed first run logic, disabled forced automatic reboot</li> <li>changed new user account creation logic, disabled forced reboot on user creation failure</li> </ul>"},{"location":"Release_Changelog/#v524","title":"v5.24","text":"<ul> <li>this version is not released, it was used for the nightly or user-built images</li> </ul>"},{"location":"Release_Changelog/#v523-2016-10-23","title":"v5.23 (2016-10-23)","text":"<ul> <li>fixed bug in armbian-install</li> <li>fixed u-boot update bug on Allwinner platform</li> </ul> <p>Known problems:</p> <ul> <li>Lamobo R1 fails to boot upon upgrade</li> </ul>"},{"location":"Release_Changelog/#v522-2016-10-22","title":"v5.22 (2016-10-22)","text":"<ul> <li>fixed eMMC install on Odroid C2</li> <li>firmware package was splitted into minimal (default) and full versions</li> <li>patched Dirty COW exploit on all kernels</li> <li>added Odroid XU4 mainline kernel image</li> <li>added Olimex A33 mainline kernel image</li> <li>added Overlay FS for Cubox, Udoo and Udoo Neo</li> <li>booting problems fixed on more boards</li> <li>updated wireless driver on M2+ (dhd)</li> <li>updated driver for OV5640 on sun8i default kernel</li> <li>sunxi-next kernel version updated to 4.8.4</li> <li>BananaPi M1+ now uses upstream DTB file <code>sun7i-a20-bananapi-m1-plus.dtb</code>, boot script adjusting may be required for existing images</li> </ul> <p>Desktop images:</p> <ul> <li>prebuilt mpv and FFmpeg were removed in favor of providing only configuration files</li> <li>fixed an issue with video brightness on A10/A20 based boards</li> </ul> <p>Build script:</p> <ul> <li>DEBUG_MODE was renamed to CREATE_PATCHES</li> <li>GLshim was moved to a private directory, it can be activated for selected applications by changing <code>LD_LIBRARY_PATH</code></li> </ul> <p>Known problems:</p> <ul> <li>eMMC install fails (will be fixed in bugfix update)</li> <li>H3 development kernel (4.8.4) update fails to boot</li> <li>C2 upgrade hangs on compiling headers (Jessie)</li> </ul>"},{"location":"Release_Changelog/#v520-2016-09-16","title":"v5.20 (2016-09-16)","text":"<ul> <li>added FriendlyARM Neo legacy and mainline images (experimental)</li> <li>added Orange Pi PC+ mainline kernel (experimental)</li> <li>added Pine64 / Pine64+ images with legacy kernel</li> <li>added UUID support for NAND/SATA/USB installer</li> <li>added desktop images for Cubox(s) / Hummingboard(s) with mainline kernel</li> <li>enabled MIDI sequencer and snd-rawmidi-seq in H3 legacy kernel</li> <li>added H3 consumption tool to control board consumtion level on legacy kernel</li> <li>fixed and enabled Bluetooth on Cubietruck and Cubox(s) / Hummigboard(s) desktop, both kernels</li> <li>masked p2p0 wifi direct device on Bluetooth legacy kernel</li> <li>Odroid C1/C2 upgrade fail fixed</li> <li>wireless enabled by default on Banana Pi PRO</li> <li>added new screen resolutions to H3 boards with legacy kernel</li> <li>DeviceTree Overlay ConfigFS interface for H3 mainline kernel</li> <li>update of mainline u-boot to 2016.09 should fix boot failures on H3 boards with eMMC</li> <li>disabled USB keyboard support in mainline u-boot should fix boot failures with connected USB devices</li> </ul> <p>Desktop images:</p> <ul> <li>WICD was replaced with NetworkManager</li> <li>ALSA was replaced with PulseAudio</li> <li>sunxi boards: GLshim was added to desktop images with Mali support (except for Orange Pi Plus and Orange Pi Plus 2e)</li> <li>sunxi boards: prebuilt mpv now supports OSD and subtitles, activated by setting environment variable <code>VDPAU_OSD=1</code></li> </ul> <p>Build script:</p> <ul> <li>complete desktop building rework - now packages are built from sources</li> <li>added Lime 2 eMMC as build target (WIP)</li> <li>added Pine64 / Pine64+ mainline (dev) target (experimental)</li> <li>added FriendlyArm Neo as build target</li> <li>fixed MT7601 wifi driver building</li> <li>github download rework</li> <li>external toolchain rework</li> </ul> <p>Added additional packages, not installed by default:</p> <ul> <li>hostapd-realtek: replacement for hostapd with support for several Realtek Wi-Fi adapters</li> <li>fswebcam-gc2035: replacement for fswebcam with support for GC2035 camera driver for H3 based boards</li> <li>guvcview: replacement for stock guvcview with support for H3-based Orange Pi CMOS cameras</li> </ul> <p>Known problems:</p> <ul> <li>Mali OpenGL ES does not work on H3 boards with 2GB RAM (Orange Pi Plus 2, Orange Pi Plus 2e)</li> <li>Hardware video decoding on A10/A20 based boards produces dark video</li> <li>Some applications that depend on livav libraries (i.e. minidlna) may not work on Jessie images</li> </ul>"},{"location":"Release_Changelog/#v517-2016-07-07","title":"v5.17 (2016-07-07)","text":"<ul> <li>bugfix release on some boards.</li> </ul>"},{"location":"Release_Changelog/#v516-2016-07-05","title":"v5.16 (2016-07-05)","text":"<ul> <li>bugfix release. In 5.15 we accidentaly overwrote default network settings. Check /etc/network/interfaces if you use advanced network settings or fixed ip.</li> <li>small changes.</li> </ul>"},{"location":"Release_Changelog/#v515-2016-07-01","title":"v5.15 (2016-07-01)","text":"<ul> <li>Added improved camera driver for Xunlong\u2019s cheap 2MP GC2035 camera</li> <li>Improved throttling/DRAM settings for the new 3 overheating H3 devices (BPi M2+, NanoPi M1, Beelink X2)</li> <li>Added official support for Beelink X2, NanoPi M1, Banana Pi M2+</li> <li>Improved console output (serial + display)</li> <li>Finally got rid of (broken) board auto detection. We do not ship any more one image for several devices that tries to detect/fix things on 1st boot but provide one dedicated image per board (Plus and Plus 2 and both NanoPi M1 variants being handled as the same device since only size of DRAM/eMMC differs)</li> <li>Tried to improve user experience with better/unified led handling (light directly after boot, communicate booting states through blinking)</li> <li>Improve partitioning and filesystem resize on 1st boot making it easier to clone every installation media afterwards</li> <li>fully support installation on eMMC on all H3 devices (<code>u-boot</code> and <code>armbian-install.sh</code> fixes)</li> <li>Improved performance/thermal/throttling behaviour on all H3 boards (especially newer Oranges)</li> <li>Prevent HDMI screen artefacts (disabling interfering TV Out by default)</li> <li>Enhanced 8189ETV driver for older Oranges</li> <li>Added support for OPi Lite, PC Plus and Plus 2E including new 8189FTV Wi-Fi (client, AP and monitoring mode, added fix for random MAC address)</li> <li>Added in-kernel corekeeper patch (bringing back killed CPU cores after heavy overheating situations when thermal situation is ok again)</li> <li>Added TV Out patch for Orange Pi PC</li> <li>Further improve driver compilation due to improved kernel headers scripts compilation</li> <li>Initrd support</li> <li>increased kernel version to 3.4.112</li> <li>Exchanged whole kernel source tree to newer BSP variant, cleaned up sources, rebased all +100 patches (fixed display issues and kswapd bug, new and more performant GPU driver, increase Mali400MP2 clock to 600MHz)</li> <li>Added RTL2832U drivers to kernel (DVB-T)</li> <li>Fixed Docker on Odroid XU4</li> <li>Added overlay fs to Clearfog and Odroid XU4</li> <li>Many minor fixes</li> </ul>"},{"location":"Release_Changelog/#v514-2016-06-14","title":"v5.14 (2016-06-14)","text":"<ul> <li>all images rebuilt, most of them were manually tested</li> <li>added Beelink X2 image</li> <li>Cubox / Hummingboard kernel upgrade to 3.14.72 and 4.6.2</li> <li>Trusty was replaced with Xenial</li> </ul>"},{"location":"Release_Changelog/#v512-2016-05-31","title":"v5.12 (2016-05-31)","text":"<ul> <li>updated C1 images</li> <li>added wifi driver for new Oranges (modprobe 8189fs)</li> <li>added Orange Pi Lite, PC Plus and Plus 2E images</li> </ul>"},{"location":"Release_Changelog/#v511-2016-05-24","title":"v5.11 (2016-05-24)","text":"<ul> <li>Various bug fixes</li> <li>new working images for Actions Semi S500 boards</li> </ul>"},{"location":"Release_Changelog/#v510-2016-05-01","title":"v5.10 (2016-05-01)","text":"<p>Images:</p> <ul> <li>all 3.10+ kernels are Docker ready</li> <li>all A10/A20/H3 comes with HW accelerated video playback in desktop build</li> <li>fixed root exploit on H3 boards</li> <li>fixed kswapd 100% bug on H3 boards</li> <li>fixed SPDIF / I2S audio driver in legacy kernel</li> <li>fixed Udoo Neo wireless</li> <li>fixed slow SD cards boot</li> <li>fixed Allwinner SS driver</li> <li>fixed bluetooth on Cubietruck, both kernels</li> <li>fixed wireless driver on H3 boards</li> <li>fixed R1 switch driver</li> <li>kernel for Allwinner boards was upgraded to 3.4.112 &amp; 4.5.2</li> <li>kernel for iMx6 boards was upgraded to 3.14.67 &amp; 4.5.2</li> <li>kernel for Armada (Clearfog) was upgraded to 3.10.101 &amp; 4.5.2</li> <li>kernel for Udoo boards was updated to 3.14.67 &amp; 4.4.8</li> <li>kernel for Guitar (Lemaker) was upgraded to 3.10.101</li> <li>kernel for H3/sun8i legacy come from new Allwinner updated source (friendlyarm)</li> <li>added support for Olimex Lime2 eMMC</li> <li>increased MALI clockspeed on sun8i/legacy</li> <li>added Armbianmonitor</li> <li>added Odroid C1, C2(arm64), Nanopi M1, Banana M2+, Pcduino 2 and Pcduino 3. CLI and desktop</li> <li>added wifi radar to desktop</li> <li>added preview mainline kernel images for H3 boards (4.6.RC1)</li> <li>added initrd creation on all Allwinner images</li> <li>added Hummigboard 2 with working PCI and onboard wireless with legacy kernel 3.14.65</li> <li>added eMMC installer for H3</li> <li>added support for IFB and net scheduling for sun7i-legacy</li> <li>added ax88179_178a USB 3.0 Ethernet driver for sun7i-legacy</li> <li>hostapd comes as separate package (armbian-hostapd)</li> <li>changed first boot procedure and force user creation</li> <li>verbose / no verbose boot works almost on all boards</li> <li>enabled I2S on sun8i</li> <li>removed Debian Wheezy from auto build</li> <li>installing headers autocompile scripts</li> <li>all images come compressed with 7zip</li> </ul> <p>Build script:</p> <ul> <li>GCC 5 support for mainline and allwinner legacy</li> <li>RAW images are not compressed by default</li> <li>added arm64 building support</li> <li>added docker as host</li> <li>Added Belink X2 (H3 based media player), and Roseapple (S500) as WIP target</li> <li>introducted CLI_TARGET per board</li> <li>prepared Xenial target</li> <li>fixed USB redirector building on all kernels</li> <li>support for Xenial as a build host is 95% ready.</li> <li>implemented automatic toolchain selection</li> <li>come cleanup, configurations are subfoldered</li> <li>extended_deboostrap becomes default</li> </ul> <p>Known bugs:</p> <ul> <li>Udoo Neo reboots takes a while, 1min+</li> <li>headers within sun8i needs some fixing</li> <li>H3 board autodetection fail under certain conditions</li> </ul>"},{"location":"Release_Changelog/#v506-2016-03-18","title":"v5.06 (2016-03-18)","text":"<ul> <li>increase kernel version to 3.4.111</li> <li>headers auto creation while install (eases kernel/driver compilation)</li> <li>improved SD card partitioning to help old/slow cards with wear leveling and garbage collection</li> <li>Possible to use Ubuntu Xenial Xerus as target</li> <li>changed behaviour of board leds (green == power, red == warning)</li> <li>speed improvements for 1st automated reboot</li> <li>Integrates OverlayFS backport</li> </ul>"},{"location":"Release_Changelog/#v505-2016-03-08","title":"v5.05 (2016-03-08)","text":"<ul> <li>Auto detection for the Orange Pi 2 does work now</li> <li>Mali acceleration works for all users not only root</li> <li>verbose boot logging on 1st boot and after crashes (you can toggle verbose logging using <code>sudo armbianmonitor -b</code>)</li> <li>more WiFi dongles supported due to backported firmware loader patch</li> <li>all 3 USB ports on Orange Pi One (Lite) available (2 of them need soldering)</li> <li>I2S possible on all Orange Pis (compare with the mini tutorial since you need to tweak script.bin)</li> <li>default display resolution set to 720p60 to fix possible overscan issues on 1st boot</li> <li>HW accelerated video decoding works for most formats</li> <li>Booting from eMMC on OPi Plus now possible</li> <li>Udoo quad images upgraded to 4.4.4</li> </ul>"},{"location":"Release_Changelog/#v504-2016-03-01","title":"v5.04 (2016-03-01)","text":"<ul> <li>HDMI/DVI works (bug in boot.cmd settings)</li> <li>Reboot issues fixed (bug in fex settings)</li> <li>1-Wire useable (we chose to stay compatible to loboris\u2019 images so the data pin is 37 by default. You\u2019re able to change this in the fex file)</li> <li>changing display resolution and choosing between HDMI and DVI is now possible with the included h3disp tool (should also work in the stand-alone version with Debian based OS images from loboris/Xunlong). Use <code>sudo h3disp</code> in a terminal to get the idea.</li> <li>Ethernet issues fixed (combination of kernel and fex fixes)</li> <li>USB-to-SATA bridge on the Orange Pi Plus works</li> <li>stability problems on Orange Pi One fixed (due to undervoltage based on wrong fex settings)</li> <li>problems with 2 USB ports on the PC fixed (wrong kernel config)</li> <li>Mali400MP acceleration (EGL/GLES) works now</li> <li>suspend to RAM and resume by power button works now (consumption less than 0.4W without peripherals)</li> <li>Enforce user account creation before starting the GUI</li> <li>USB and Ethernet IRQs distributed nicely accross CPU cores</li> <li>Full HDMI colour-range adjustable/accessible through h3disp utility</li> <li>already useable as stable headless/server board</li> <li>rebuilt Cubieboard 1 &amp; 2 with 3.4.110 and 4.4.3</li> <li>fixed Bluetooth on Cubietruck + rebuild with 3.4.110 and 4.4.3</li> <li>all new images has no login policy: forced user generation</li> </ul>"},{"location":"Release_Changelog/#v503-2016-02-20","title":"v5.03 (2016-02-20)","text":"<ul> <li>H3 images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v502-2016-02-18","title":"v5.02 (2016-02-18)","text":"<ul> <li>H3 images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v501-2016-02-17","title":"v5.01 (2016-02-17)","text":"<ul> <li>Bugfix update for Allwinner boards</li> <li>Update for H3 based boards</li> </ul>"},{"location":"Release_Changelog/#v500-2016-02-12","title":"v5.00 (2016-02-12)","text":"<ul> <li>mainline kernel for Allwinner based boards upgraded to 4.4.1</li> <li>Allwinner audio driver playback and capture on kernel 4.4.1, UAS, USB OTG, battery readings,</li> <li>added Marvel Armada kernel 3.10.96, 4.4.1 and patches for changing mPCI to SATA</li> <li>added Cubox / Hummingboard kernel 4.4.1 (serial console only)</li> <li>firstrun does autoreboot only if needed: wheezy and some legacy kernels.</li> <li>added motd to /etc/updated.motd \u2026 redesign, added battery info for Allwinner boards, bugfix, coloring</li> <li>fixed temperature reading on Cubox / Hummingboard legacy kernel</li> <li>fixed FB turbo building on Allwinner</li> <li>fixed NAND install on A10 boards (Legacy kernel only)</li> <li>fixed USB boot, added PWM on mainline</li> <li>fixed Banana PRO/+ onboard wireless on mainline kernel - running with normal Banana DT.</li> <li>readded USB sound</li> <li>added A13 Olimex SOM</li> <li>added LIRC GPIO receive and send driver for legacy Allwinner</li> <li>added LED MMC activity to mainline kernels for Cubietruck and Cubieboard A10</li> <li>build script: option to build images with F2FS root filesystem for Allwinner boards</li> <li>build script: added alternative kernel for Lemaker Guitar (NEXT), Cubox (DEV)</li> </ul>"},{"location":"Release_Changelog/#v481-2015-12-28","title":"v4.81 (2015-12-28)","text":"<ul> <li>complete build script rework</li> <li>new development kernel package linux-image-dev-sunxi (4.4RC6) for Allwinner boards</li> <li>added Lemaker Guitar, kernel 3.10.55</li> <li>added Odroid XU3/4, kernel 3.10.94 and mainline 4.2.8</li> <li>mainline kernel for Allwinner based boards upgraded to 4.3.3</li> <li>Udoo mainline upgraded to 4.2.8, legacy to 3.14.58</li> <li>cubox / hummingboard upgraded to 3.14.58, added mainline kernel 4.4</li> <li>fixed Jessie RTC bug, systemd default on Jessie images</li> </ul>"},{"location":"Release_Changelog/#v470-2015-11-30","title":"v4.70 (2015-11-30)","text":"<ul> <li>Bugfix update(apt-get update &amp;&amp; apt-get upgrade)</li> <li>small changes and fixes</li> </ul>"},{"location":"Release_Changelog/#v46-2015-11-24","title":"v4.6 (2015-11-24)","text":"<ul> <li>Update only (apt-get update &amp;&amp; apt-get upgrade)</li> <li>mainline kernel for Allwinner based boards upgraded to 4.2.6</li> <li>Legacy kernel for Allwinner based boards upgraded to 3.4.110</li> <li>added new board: Udoo Neo</li> <li>added USB printer, CAN, CMA, ZSWAP, USB video class, CDROM fs, sensor classs, \u2026 to Allwinner mainline kernel</li> <li>armbian-install scripts rewrite. Now it\u2019s possible to install to any partition.</li> <li>fixed nand install for Allwinner A10 based boards: Cubieboard 1 / Lime A10</li> <li>universal upgrade script bugfix / rewrite.</li> <li>8 channel HDMI support for legacy Allwinner kernel</li> <li>unattended upgrade fixed</li> <li>sunxi tools fixed</li> <li>added two new options to build script: keep kernel config and use_ccache</li> <li>added kernel version to motd</li> </ul>"},{"location":"Release_Changelog/#v45-2015-10-14","title":"v4.5 (2015-10-14)","text":"<ul> <li>mainline kernel upgraded to 4.2.3 for Allwinner based boards</li> <li>legacy kernel for Allwinner compiled from new sources (linux-sunxi)</li> <li>udoo mainline upgraded to 4.2.3</li> <li>cubox / hummingboard upgraded to 3.14.54</li> <li>changed kernel naming: A10 = linux-image-sun4i, A20 = linux-image-sun7i</li> <li>new boards: Banana M2, Orange+(A31S), Cubieboard 1, Cubieboard 2 Dual SD, Lime A10</li> <li>fixed Udoo legacy wireless problems</li> <li>fixed Jessie boot problems by disabling systemd. It\u2019s possible to re-enable within boot scripts</li> <li>added ramlog to Jessie because we don\u2019t have systemd anymore</li> <li>changed wireless driver for Cubietruck and Banana PRO (now it\u2019s ap6210)</li> <li>added ZRAM to mainline kernel</li> <li>fixed dvbsky modules</li> </ul> <p>and a bunch of small fixes.</p>"},{"location":"Release_Changelog/#v44-2015-10-01","title":"v4.4 (2015-10-01)","text":"<p>Images:</p> <ul> <li>mainline kernel upgrade to 4.2.2 (Allwinner, Udoo Quad),</li> <li>legacy kernel upgraded to 3.4.109 (Allwinner),</li> <li>added I2C support and bunch of multimedia modules (DVB) (mainline Allwinner),</li> <li>Udoo quad images with fixed legacy kernel 3.14.28,</li> <li>Cubox and Hummingboard kernel upgrade to 3.14.53,</li> <li>brcmfmac driver fixes for mainline kernel (Banana PRO / Cubietruck)</li> <li>performance tweak: choosing a closest Debian mirror (Debian images)</li> <li>added Astrometa DVB firmware and dvb-tools</li> <li>added Nikkov SPDIF / I2S recent patch (legacy Allwinner)</li> <li>added patch for rtl8192cu: Add missing case in rtl92cu_get_hw_reg (Lamobo R1)</li> <li>bigger NAND boot partition on install</li> <li>install script bug fixes</li> </ul> <p>Script:</p> <ul> <li>force apt-get update on older rootfs cache,</li> <li>image harden manipulation security,</li> <li>packages NAND/FAT/same version install faling fixed,</li> <li>image shrinking function rework,</li> <li>better packages installation install checking,</li> <li>added Debian keys to suppress warnings in debootstrap process,</li> <li>added fancy progress bars,</li> <li>added whiptail downloading prior to usage (bugfix).</li> </ul>"},{"location":"Release_Changelog/#v43-2015-09-17","title":"v4.3 (2015-09-17)","text":"<ul> <li>kernel 4.2 for Allwinner based boards</li> <li>kernel 4.2 for Udoo Quad</li> <li>walk-around if ethernet is not detected on some boards due to RTC not set(?)</li> <li>update is done (semi) automatic if you are using Armbian 4.2. You only need to issue command: apt-get update &amp;&amp; apt-get upgrade. If you are coming from older system, check Documentation</li> <li>U-boot on R1 is now updated to latest stable version (2015.07)</li> <li>Fixed AW SOM. Working with latest u-boot but you need to build image by yourself.</li> <li>Enabled whole USB net and HID section in kernel for Allwinner boards v4.2</li> <li>Fixed upgrade script \u2013 only some minor bugs remains.</li> <li>Fixes to build script that it\u2019s working under Ubuntu 15.04</li> <li>Adding Bananapi Wireless driver (ap6210) back to legacy kernel</li> <li>Udoo official kernel (3.14.28) not updated due too many troubles.</li> </ul>"},{"location":"Release_Changelog/#v42-2015-09-01","title":"v4.2 (2015-09-01)","text":"<p>Images:</p> <ul> <li>Upgraded NAND / SATA installer. Possible to install to SATA/NAND boot in one step.</li> <li>Easy kernel switching between old 3.4 and 4.x</li> <li>Automatic kernel updating (to disable comment armbian repo /etc/apt/sources.list)</li> <li>Allwinner boards share one 4.x kernel and two 3.4</li> <li>All boards share the same revision number</li> <li>One minimal Ubuntu Desktop per board (Wicd, Firefox, Word)</li> <li>u-boot v2015.07 for most boards</li> <li>Aufs file system support</li> <li>kernel 4.1.6 and 3.4.108</li> <li>Added Orangepi Mini, Cubieboard 1 (4.x only), Udoo with official kernel</li> <li>Repository for Wheezy, Jessie and Trusty</li> <li>enabled USB audio in kernel 4.x</li> <li>kernel headers fixed. No need to rebuild when you update the kernel.</li> <li>fixed boot scripts that can load from FAT partition too</li> <li>removed Cubox binnary repository because of troubles</li> <li>Docker support (kernel 4.x). Already here for a while / forget to mention.</li> <li>nodm change default login</li> </ul> <p>Build script:</p> <ul> <li>changed structure: sources now in folder sources, output is what we produce, deb in one folder</li> <li>expanded desktop part</li> <li>possible to build all images at once, create package repository</li> <li>SD card initial size is 4Gb, variable transfered into configuration.sh</li> <li>Avaliable board list is now created from file configuration.sh</li> <li>Fixed image shrinking problem</li> <li>Patching part rework</li> <li>Using first FAT boot partition now fixes boot scripts</li> <li>Uboot TAG moved to configuration.sh and differs for some boards</li> <li>new variables for source branches. Only too remove errors when checking out</li> </ul>"},{"location":"Release_Changelog/#v41-2015-08-05","title":"v4.1 (2015-08-05)","text":"<ul> <li>Added desktop image</li> <li>U-Boot 2015.07 with many new features</li> <li>Added auto system update via repository apt.armbian.com</li> <li>Root password change is initialized at first boot.</li> <li>3.4.108 kernel fixes, 4.1.4 Allwinner Security System</li> </ul>"},{"location":"Release_Changelog/#v40-2015-07-12","title":"v4.0 (2015-07-12)","text":"<ul> <li>Fixed stability issues, temperature display in 4.x</li> <li>Kernel upgrades to 3.4.108 and 4.1.2</li> </ul>"},{"location":"Release_Changelog/#v39-2015-06-11","title":"v3.9 (2015-06-11)","text":"<ul> <li>Bugfix release</li> <li>Kernel 4.0.5 traffic control support</li> <li>SATA / USB install fixed on kernel 4.x</li> <li>Added 256Mb emergency swap area, created automatically @first boot</li> </ul>"},{"location":"Release_Changelog/#v38-2015-05-21","title":"v3.8 (2015-05-21)","text":"<ul> <li>Bugfix release: Cubietruck images successfully booted on Cubietruck. I waited for automatic reboot than tested remote login.</li> <li>Kernel 4.0.4 added support for power on/off button</li> <li>Both: Jessie fixed, Ethernet init fixed (uboot)</li> <li>armbian.com introduction</li> </ul>"},{"location":"Release_Changelog/#v37-2015-05-14","title":"v3.7 (2015-05-14)","text":"<ul> <li>Kernel 4.0.3 some new functionality</li> <li>Kernel 3.4.107 added sunxi display manager to change FB on demand</li> <li>Both: Ubuntu and jessie install errors fixed, removed busybox-syslogd and changed to default logger due to problems in Jessie and Ubuntu, apt-get upgrade fixed, documentations update, Uboot fixed to 2015.4 \u2013 no more from dev branch</li> <li>Build script rework - image size shrink to actual size, possible to have fat boot partition on SD card, several script bug fixes</li> </ul>"},{"location":"Release_Changelog/#v36-2015-04-29","title":"v3.6 (2015-04-29)","text":"<ul> <li>Kernel 3.19.6</li> <li>Kernel 3.4.107 with better BT loading solution</li> </ul>"},{"location":"Release_Changelog/#v35-2015-04-18","title":"v3.5 (2015-04-18)","text":"<ul> <li>Kernel 3.19.4: fixed AP mode, fixed USB, added 8192CU module</li> <li>Common: apt-get upgrade ready but not enabled yet, serial console fixed, fixed hostapd under jessie, easy kernel switching, latest patched hostapd for best performance \u2013 normal and for realtek adaptors, auto IO scheduler script</li> <li>Build script: everything packed as DEB</li> </ul>"},{"location":"Release_Changelog/#v34-2015-03-28","title":"v3.4 (2015-03-28)","text":"<ul> <li>Kernel 3.19.3: docker support, apple hid, pmp, nfsd, sata peformance fix</li> <li>Kernel 3.4.106: pmp, a20_tp - soc temp sensor</li> <li>Common: console setup fixed, headers bugfix, nand install fix</li> <li>Build script: kernel build only, custom packets install, hardware accelerated desktop build as option</li> </ul>"},{"location":"Release_Changelog/#v33-2015-02-28","title":"v3.3 (2015-02-28)","text":"<ul> <li>Kernel 3.19.0: many new functionality and fixes.</li> <li>Bugfixes: CT wireless works in all kernels</li> </ul>"},{"location":"Release_Changelog/#v32-2015-01-24","title":"v3.2 (2015-01-24)","text":"<ul> <li>Possible to compile external modules on both kernels</li> <li>Kernel 3.19.0 RC5</li> <li>Bugfixes: install script, headers, bashrc, spi</li> </ul>"},{"location":"Release_Changelog/#v31-2015-01-16","title":"v3.1 (2015-01-16)","text":"<ul> <li>Kernel 3.19.0 RC4</li> <li>Added Cubieboard 1 images</li> <li>Dualboot for CB2 and CT dropped due to u-boot change. Now separate images.</li> <li>New user friendly SATA + USB installer, also on mainline</li> </ul>"},{"location":"Release_Changelog/#v30-2014-12-29","title":"v3.0 (2014-12-29)","text":"<ul> <li>Kernel 3.18.1 for mainline image</li> <li>Added Ubuntu Trusty (14.04 LTS) image</li> <li>Bugfixes: auto packages update</li> </ul>"},{"location":"Release_Changelog/#v29-2014-12-03","title":"v2.9 (2014-12-03)","text":"<ul> <li>Kernel 3.4.105 with new MALI driver and other fixes</li> <li>Added: Jessie image</li> <li>Major build script rewrite - much faster image building</li> <li>Fixed: failed MIN/MAX settings</li> </ul>"},{"location":"Release_Changelog/#v28-2014-10-17","title":"v2.8 (2014-10-17)","text":"<ul> <li>Added: ondemand governor, fhandle, squashfs and btrfs</li> <li>Removed: bootsplash, lvm, version numbering in issue</li> <li>Fixed: custom scripts, Jessie upgrade</li> <li>Disabled: BT firmware loading, enable back with: insserv brcm40183-patch</li> <li>Added working driver for RT 8188C, 8192C</li> </ul>"},{"location":"Release_Changelog/#v27-2014-10-01","title":"v2.7 (2014-10-01)","text":"<ul> <li>Kernel 3.4.104</li> <li>Automatic Debian system updates</li> <li>VGA output is now default but if HDMI is attached at first boot than it switch to HDMI for good. After first restart!</li> <li>Fixed NAND install script. /boot is mounted by default. Kernel upgrade is now the same as on SD systems.</li> <li>Cubieboard2 - disabled Cubietruck dedicated scripts (BT firmware, LED disable)</li> <li>Added network bonding and configuration for \u201cnotebook\u201d mode (/etc/network/interfaces.bonding)</li> <li>IR receiver is preconfigured with default driver and LG remote (/etc/lirc/lircd.conf), advanced driver is present but disabled</li> <li>Added SPI and LVM functionality</li> <li>Added Debian logo boot splash image</li> <li>Added build essentials package</li> </ul>"},{"location":"Release_Changelog/#v26-2014-08-22","title":"v2.6 (2014-08-22)","text":"<ul> <li>Kernel 3.4.103 and 3.17.0-RC1</li> <li>Added GPIO patch (only for 3.4.103)</li> </ul>"},{"location":"Release_Changelog/#v25-2014-08-02","title":"v2.5 (2014-08-02)","text":"<ul> <li>Kernel 3.4.101 and 3.16.0-RC4</li> <li>major build script rewrite</li> </ul>"},{"location":"Release_Changelog/#v24-2014-07-11","title":"v2.4 (2014-07-11)","text":"<ul> <li>Kernel 3.4.98</li> <li>default root password (1234) expires at first login</li> <li>build script rewrite, now 100% non-interactive process, time zone as config option</li> <li>bug fixes: removed non-existing links in /lib/modules</li> </ul>"},{"location":"Release_Changelog/#v23-2014-07-02","title":"v2.3 (2014-07-02)","text":"<ul> <li>Kernel 3.4.96</li> <li>cpuinfo serial number added</li> <li>bug fixes: stability issues - downclocked to factory defaults, root SSH login enabled in Jessie, dedicated core for eth0 fix</li> <li>disp_vsync kernel patch</li> </ul>"},{"location":"Release_Changelog/#v22-2014-06-26","title":"v2.2 (2014-06-26)","text":"<ul> <li>Kernel 3.4.94</li> <li>Added Jessie distro image</li> <li>Updated hostapd, bashrc, build script</li> <li>bug fixes: disabled upgrade and best mirror search @firstboot, bluetooth enabler fix</li> <li>MD5 hash image protection</li> </ul>"},{"location":"Release_Changelog/#v21-2014-06-13","title":"v2.1 (2014-06-13)","text":"<ul> <li>Kernel 3.4.93</li> <li>Onboard Bluetooth finally works</li> <li>Small performance fix</li> <li>Allwinner Security System cryptographic accelerator</li> </ul>"},{"location":"Release_Changelog/#v20-2014-06-02","title":"v2.0 (2014-06-02)","text":"<ul> <li>Kernel 3.4.91 with many fixes</li> <li>Cubieboard 2 stability issues fix</li> <li>eth0 interrupts are using dedicated core</li> <li>Global bashrc /etc/bash.bashrc</li> <li>Verbose output and package upgrade @ first run</li> </ul>"},{"location":"Release_Changelog/#v19-2014-04-27","title":"v1.9 (2014-04-27)","text":"<ul> <li>Kernel headers included</li> <li>Clustering support</li> <li>Advanced\u00a0IR driver with RAW RX and TX</li> <li>Bluetooth ready\u00a0(working only with supported USB devices)</li> <li>Bugfixes: VLAN, login script, build script</li> <li>New packages: lirc, bluetooth</li> </ul>"},{"location":"Release_Changelog/#v18-2014-03-27","title":"v1.8 (2014-03-27)","text":"<ul> <li>Kernel 3.4.79</li> <li>Alsa I2S patch\u00a0+ basic ALSA utils</li> <li>Performance tweaks: CPU O.C. to 1.2Ghz, IO scheduler NOOP for SD, CFQ for sda, journal data writeback enabled</li> <li>Avaliable memory = 2000MB</li> <li>Minimized console output at boot</li> <li>MAC address from chip ID, manual optional</li> <li>Latest (Access point) hostapd, 2.1 final release</li> <li>Login script shows current CPU temp, hard drive temp &amp; actual free memory</li> <li>Fastest Debian mirror auto selection @first boot</li> <li>New packages: alsa-utils netselect-apt sysfsutils hddtemp bc</li> </ul>"},{"location":"Release_Changelog/#v17-2014-02-26","title":"v1.7 (2014-02-26)","text":"<ul> <li>Flash media performance tweaks, reduced writings, tmp &amp; logging to RAM with ramlog app \u2013 sync logs on shutdown</li> <li>SATA install script</li> <li>Dynamic MOTD: Cubieboard / Cubietruck</li> <li>Disabled Debian logo at startup</li> <li>New packages: figlet toilet screen hdparm libfuse2 ntfs-3g bash-completion</li> </ul>"},{"location":"Release_Changelog/#v16-2014-02-09","title":"v1.6 (2014-02-09)","text":"<ul> <li>Added support for Cubieboard 2</li> <li>Build script creates separate images for VGA and HDMI</li> <li>NAND install script added support for Cubieboard 2</li> </ul>"},{"location":"Release_Changelog/#v152-2014-02-07","title":"v1.52 (2014-02-07)","text":"<ul> <li>Various kernel tweaks, more modules enabled</li> <li>Root filesystem can be moved to USB drive</li> <li>Bugfixes: NAND install script</li> </ul>"},{"location":"Release_Changelog/#v15-2014-01-22","title":"v1.5 (2014-01-22)","text":"<ul> <li>Hotspot Wifi Access Point / Hostapd 2.1</li> <li>Bugfixes: MAC creation script, SSH keys creation, removed double packages, \u2026</li> <li>Graphics desktop environment upgrade ready</li> </ul>"},{"location":"Release_Changelog/#v14-2014-01-12","title":"v1.4 (2014-01-12)","text":"<ul> <li>Patwood\u2019s kernel 3.4.75+ with many features</li> <li>Optimized CPU frequency scaling 480-1010Mhz with interactive governor</li> <li>NAND install script included</li> <li>Cubietruck MOTD</li> <li>USB redirector\u00a0\u2013 for sharing USB over TCP/IP</li> </ul>"},{"location":"Release_Changelog/#v13-2014-01-03","title":"v1.3 (2014-01-03)","text":"<ul> <li>CPU frequency scaling 30-1000Mhz</li> <li>Patch for gpio</li> </ul>"},{"location":"Release_Changelog/#v123-2014-01-01","title":"v1.23 (2014-01-01)","text":"<ul> <li>added HDMI version</li> <li>added\u00a0sunxi-tools</li> <li>build.sh transfered to\u00a0Github repository</li> <li>disabled LED blinking</li> </ul>"},{"location":"Release_Changelog/#v12-2013-12-26","title":"v1.2 (2013-12-26)","text":"<ul> <li>changed kernel and hardware config repository</li> <li>kernel 3.4.61+</li> <li>wi-fi working</li> <li>updated manual how-to</li> </ul>"},{"location":"Release_Changelog/#v10-2013-12-24","title":"v1.0 (2013-12-24)","text":"<ul> <li>total memory available is 2G (disabled memory for GPU by default)</li> <li>gigabit ethernet is fully operational</li> <li>sata driver enabled</li> <li>root filesystem autoresize</li> <li>MAC address fixed at first boot</li> <li>Kernel 3.4.75</li> <li>root password=1234</li> <li>Bugs: wifi and BT not working</li> </ul>"},{"location":"User-Guide_Advanced-Features/","title":"Advanced Features","text":""},{"location":"User-Guide_Advanced-Features/#how-to-switch-kernels","title":"How to switch kernels?","text":"<p>Check this for more info.</p>"},{"location":"User-Guide_Advanced-Features/#how-to-troubleshoot","title":"How to troubleshoot?","text":""},{"location":"User-Guide_Advanced-Features/#how-to-unbrick-the-system","title":"How to unbrick the system?","text":"<p>Both of above headings have been moved to a new page and expanded upon: Recovery</p>"},{"location":"User-Guide_Advanced-Features/#how-to-build-a-wireless-driver","title":"How to build a wireless driver?","text":"<p>Install and recreate kernel headers scripts (optional)</p> Text Only<pre><code>armbian-config -&gt; install kernel headers\nexit\n\ncd /usr/src/linux-headers-$(uname -r)\nmake scripts\n</code></pre> <p>Go back to root directory and fetch sources (working example, use <code>ARCH=arm64</code> on 64bit system)</p> Text Only<pre><code>cd\nexport KSRC=\"/usr/src/linux-headers-$(uname -r)\"\ngit clone https://github.com/pvaret/rtl8192cu-fixes.git\ncd rtl8192cu-fixes\nmake -C \"$KSRC\" M=\"$PWD\" ARCH=arm\n</code></pre> <p>Refer to Linux Kernel Documentations: Building External Modules for more information.</p> <p>Load driver for test</p> Text Only<pre><code>insmod 8192cu.ko\n</code></pre> <p>Check <code>dmesg</code> and the last entry will be:</p> Text Only<pre><code>usbcore: registered new interface driver rtl8192cu\n</code></pre> <p>Plug the USB wireless adaptor and issue a command:</p> Text Only<pre><code>iwconfig wlan0\n</code></pre> <p>You should see this:</p> Text Only<pre><code>wlan0   unassociated  Nickname:\"&lt;WIFI@REALTEK&gt;\"\n        Mode:Auto  Frequency=2.412 GHz  Access Point: Not-Associated\n        Sensitivity:0/0\n        Retry:off   RTS thr:off   Fragment thr:off\n        Encryption key:off\n        Power Management:off\n        Link Quality=0/100  Signal level=0 dBm  Noise level=0 dBm\n        Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n        Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n</code></pre> <p>Check which wireless stations / routers are in range</p> Text Only<pre><code>iwlist wlan0 scan | grep ESSID\n</code></pre>"},{"location":"User-Guide_Advanced-Features/#how-to-run-docker","title":"How to run Docker?","text":"<p>Docker works reliably with the distribution-provided builds. It is as simple as <code>apt-get install docker.io</code>. If you prefer to use the latest Docker builds provided directly by Docker, please follow the guide below. Though if you run into trouble using those please revert back to distribution binaries before complaining.  </p> <p>Preinstallation requirements:</p> <ul> <li>Armbian 20.08.17 or newer with Kernel 3.10 or higher</li> <li>Debian Buster (might work elsewhere with some modifications)</li> <li>root access</li> </ul> <p>This method is based on Docker Debian installation documentation. Execute this as root:</p> Bash<pre><code>apt-get remove docker docker-engine docker.io containerd runc\napt-get install ca-certificates curl gnupg lsb-release\nmkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\napt update\napt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> <p>Test if Docker works correctly:</p> Bash<pre><code>docker run hello-world\n</code></pre> <p>If you get that kind of output, then Docker install went fine:</p> Bash<pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre> <p>If you would like to use Docker as a non-root user, you should now consider adding your user to the <code>docker</code> group with something like:</p> Bash<pre><code>usermod -aG docker your-user\n</code></pre> <p>You will have to log out, and log in once more in order to be able to run Docker without being root.</p> <p>Let\u2019s try a last test to see if a Docker container can be seen outside of your Armbian machine:</p> Bash<pre><code>docker run -d -p 80:80 hypriot/rpi-busybox-httpd\n</code></pre> <p>\u2026 and point the browser of any device in the same network to <code>http://&lt;IP OF YOUR DEVICE&gt;/</code></p> <p>More info in this forum topic</p>"},{"location":"User-Guide_Advanced-Features/#how-to-set-wireless-access-point","title":"How to set wireless access point?","text":"<p>There are two different HostAP daemons. One is default and the other one is for some Realtek wifi cards. Both have their own basic configurations and both are patched to gain maximum performances.</p> <p>Sources: igorpecovnik/hostapd</p> <p>Default binary and configuration location:</p> Text Only<pre><code>/usr/sbin/hostapd\n/etc/hostapd.conf\n</code></pre> <p>Realtek binary and configuration location:</p> Text Only<pre><code>/usr/sbin/hostapd-rt\n/etc/hostapd.conf-rt\n</code></pre> <p>Since its hard to define when to use which you always try both combinations in case of troubles. To start AP automatically:</p> <ol> <li>Edit /etc/init.d/hostapd and add/alter location of your conf file DAEMON_CONF=/etc/hostapd.conf and binary DAEMON_SBIN=/usr/sbin/hostapd</li> <li>Copy /etc/network/interfaces.hostapd to /etc/network/interfaces</li> <li>Reboot</li> <li>Predefined network name: \u201cBOARD NAME\u201d password: 12345678</li> <li>To change parameters, edit /etc/hostapd.conf BTW: You can get WPAPSK the long blob from wpa_passphrase YOURNAME YOURPASS</li> </ol>"},{"location":"User-Guide_Advanced-Features/#how-to-connect-ir-remote","title":"How to connect IR remote?","text":"<p>Required conditions:</p> <ul> <li>IR hardware</li> <li>loaded driver</li> </ul> <p>Get your remote configuration (lircd.conf) or learn.</p> <p>You are going to need the list of all possible commands which you can map to your IR remote keys:</p> Text Only<pre><code>irrecord --list-namespace\n</code></pre> <p>To start with learning process you need to delete old config:</p> Text Only<pre><code>rm /etc/lircd.conf\n</code></pre> <p>Then start the process with:</p> Text Only<pre><code>irrecord --driver=default --device=/dev/lirc0 /etc/lircd.conf\n</code></pre> <p>And finally start your service when done with learning:</p> Text Only<pre><code>service lirc start\n</code></pre> <p>Test your remote:</p> Text Only<pre><code>irw /dev/lircd\n</code></pre>"},{"location":"User-Guide_Advanced-Features/#outdated","title":"Outdated","text":""},{"location":"User-Guide_Advanced-Features/#how-to-freeze-your-filesystem-outdated","title":"How to freeze your filesystem? (outdated)","text":"<p>In certain situations it is desirable to have a virtual read-only root filesystem. This prevents any changes from occurring on the root filesystem that may alter system behavior and it allows a simple reboot to restore a system to its clean state.</p> <p>You need an ODROID XU4 or Allwinner A10, A20 or H3 board with legacy kernel where we added support for overlayfs. Works only on Ubuntu Xenial. Login as root and execute:</p> Text Only<pre><code>apt-get install overlayroot\necho 'overlayroot=\"tmpfs\"' &gt;&gt; /etc/overlayroot.conf\nreboot\n</code></pre> <p>After your system boots up it will always remain as is. If you want to make any permanent changes, you need to run:</p> Text Only<pre><code>overlayroot-chroot\n</code></pre> <p>Changes inside this will be preserved.</p>"},{"location":"User-Guide_Armbian-Config/","title":"Important!","text":"<p>Following instructions are valid for next generation of Armbian config utility which is due for integration in Armbian v24.11. Until then please follow this installation instructions to test it out:</p> <p>armbian/configng?tab=readme-ov-file#add--install-from-development-repository</p>"},{"location":"User-Guide_Armbian-Config/#armbian-configuration-utility-next-generation","title":"Armbian Configuration Utility (Next Generation)","text":"<p>Utility for configuring your board, adjusting services, and installing applications. It comes with Armbian by default.</p> <p>To start the Armbian configuration utility, use the following command: Text Only<pre><code>sudo armbian-config\n</code></pre></p>"},{"location":"User-Guide_Armbian-Config/#system","title":"System","text":"<ul> <li>S01 - Enable Armbian kernel/firmware upgrades</li> <li>S02 - Disable Armbian kernel upgrades</li> <li>S03 - Edit the boot environment</li> <li>S04 - Install Linux headers</li> <li>S05 - Remove Linux headers</li> <li>S06 - Install to internal storage</li> <li>S07.1 - Manage SSH login options</li> <li>S17 - Change shell system wide to BASH</li> <li>S18 - Change shell system wide to ZSH</li> <li>S19 - Switch to rolling release</li> <li>S20 - Switch to stable release</li> <li>S21 - Enable read only filesystem</li> <li>S22 - Disable read only filesystem</li> <li>S23 - Adjust welcome screen (motd)</li> <li>S24 - Install alternative kernels</li> <li>S25 - Distribution upgrades</li> <li>S28 - Manage device tree overlays</li> </ul>"},{"location":"User-Guide_Armbian-Config/#network","title":"Network","text":"<ul> <li>N01 - Configure network interfaces</li> <li>N15 - Install Bluetooth support</li> <li>N16 - Remove Bluetooth support</li> <li>N17 - Bluetooth Discover</li> <li>N18 - Toggle system IPv6/IPv4 internet protocol</li> </ul>"},{"location":"User-Guide_Armbian-Config/#localisation","title":"Localisation","text":"<ul> <li>L00 - Change Global timezone (WIP)</li> <li>L01 - Change Locales reconfigure the language and character set</li> <li>L02 - Change Keyboard layout</li> <li>L03 - Change APT mirrors</li> <li>L04 - Change System Hostname</li> </ul>"},{"location":"User-Guide_Armbian-Config/#software","title":"Software","text":"<ul> <li>Desktops - Install Desktop Environments</li> <li>Netconfig - Network tools</li> <li>DevTools - Development</li> <li>Benchy - System benchmaking and diagnostics</li> <li>Containers - Containerlization and Virtual Machines</li> <li>Media - Media Servers and Editors</li> <li>Management - Remote Management tools</li> </ul>"},{"location":"User-Guide_Armbian-Config/#help","title":"Help","text":"<ul> <li>H00 - About This system. (WIP)</li> <li>H02 - List of Config function(WIP)</li> </ul>"},{"location":"User-Guide_Armbian-Config/#install","title":"Install","text":"<p>Armbian installation Text Only<pre><code>sudo apt install armbian-config\n</code></pre></p> <p>3rd party Debian based distributions Text Only<pre><code>{\n    sudo wget https://apt.armbian.com/armbian.key -O key\n    sudo gpg --dearmor &lt; key | sudo tee /usr/share/keyrings/armbian.gpg &gt; /dev/null\n    sudo chmod go+r /usr/share/keyrings/armbian.gpg\n    sudo echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/armbian.gpg] http://apt.armbian.com $(lsb_release -cs) main  $(lsb_release -cs)-utils  $(lsb_release -cs)-desktop\" | sudo tee /etc/apt/sources.list.d/armbian.list\n    sudo apt update\n    sudo apt install armbian-config\n}\n</code></pre></p>"},{"location":"User-Guide_Armbian-Config/#cli-options","title":"CLI options","text":"<p>Command line options.</p> <p>Use: Text Only<pre><code>armbian-config --help\n</code></pre></p> <p>Outputs: Text Only<pre><code>  System - System wide and admin settings (x86_64)\n    --cmd S01 - Enable Armbian kernel/firmware upgrades\n    --cmd S02 - Disable Armbian kernel upgrades\n    --cmd S03 - Edit the boot environment\n    --cmd S04 - Install Linux headers\n    --cmd S05 - Remove Linux headers\n    --cmd S06 - Install to internal storage\n    S07.1 - Manage SSH login options\n    --cmd S07 - Disable root login\n    --cmd S08 - Enable root login\n    --cmd S09 - Disable password login\n    --cmd S10 - Enable password login\n    --cmd S11 - Disable Public key authentication login\n    --cmd S12 - Enable Public key authentication login\n    --cmd S13 - Disable OTP authentication\n    --cmd S14 - Enable OTP authentication\n    --cmd S15 - Generate new OTP authentication QR code\n    --cmd S16 - Show OTP authentication QR code\n    --cmd S30 - Disable last login banner\n    --cmd S31 - Enable last login banner\n    --cmd S17 - Change shell system wide to BASH\n    --cmd S18 - Change shell system wide to ZSH\n    --cmd S19 - Switch to rolling release\n    --cmd S20 - Switch to stable release\n    --cmd S21 - Enable read only filesystem\n    --cmd S22 - Disable read only filesystem\n    --cmd S23 - Adjust welcome screen (motd)\n    --cmd S24 - Install alternative kernels\n    S25 - Distribution upgrades\n    --cmd S26 - Upgrade to latest stable / LTS\n    --cmd S27 - Upgrade to rolling unstable\n    --cmd S28 - Manage device tree overlays\n\n  Network - Fixed and wireless network settings (eth0)\n    N01 - Configure network interfaces\n    --cmd N02 - Add / change interface\n    --cmd N03 - Revert to Armbian defaults\n    --cmd N04 - Show configuration\n    --cmd N06 - Show active status\n    --cmd N15 - Install Bluetooth support\n    --cmd N16 - Remove Bluetooth support\n    --cmd N17 - Bluetooth Discover\n    --cmd N18 - Toggle system IPv6/IPv4 internet protocol\n\n  Localisation - Localisation (C.UTF-8)\n    --cmd L00 - Change Global timezone (WIP)\n    --cmd L01 - Change Locales reconfigure the language and character set\n    --cmd L02 - Change Keyboard layout\n    --cmd L03 - Change APT mirrors\n    --cmd L04 - Change System Hostname\n\n  Software - Run/Install 3rd party applications (Update the package lists.)\n    Desktops - Install Desktop Environments\n    --cmd SW02 - Install XFCE desktop\n    --cmd SW03 - Install Gnome desktop\n    --cmd SW04 - Install i3-wm desktop\n    --cmd SW05 - Install Cinnamon desktop\n    --cmd SW06 - Install kde-neon desktop\n    Netconfig - Network tools\n    --cmd SW08 - Install realtime console network usage monitor (nload)\n    --cmd SW09 - Remove realtime console network usage monitor (nload)\n    --cmd SW10 - Install bandwidth measuring tool (iperf3)\n    --cmd SW11 - Remove bandwidth measuring tool (iperf3)\n    --cmd SW12 - Install IP LAN monitor (iptraf-ng)\n    --cmd SW13 - Remove IP LAN monitor (iptraf-ng)\n    --cmd SW14 - Install hostname broadcast via mDNS (avahi-daemon)\n    --cmd SW15 - Remove hostname broadcast via mDNS (avahi-daemon)\n    DevTools - Development\n    --cmd SW17 - Install tools for cloning and managing repositories (git)\n    --cmd SW18 - Remove tools for cloning and managing repositories (git)\n    --cmd Benchy - System benchmaking and diagnostics\n    Containers - Containerlization and Virtual Machines\n    --cmd SW25 - Install Docker Minimal\n    --cmd SW26 - Install Docker Engine\n    --cmd SW27 - Remove Docker\n    --cmd SW28 - Purge all Docker images, containers, and volumes\n    Media - Media Servers and Editors\n    --cmd SW21 - Install Plex Media server\n    --cmd SW22 - Remove Plex Media server\n    --cmd SW23 - Install Emby server\n    --cmd SW24 - Remove Emby server\n    Management - Remote Management tools\n    --cmd M00 - Install Cockpit web-based management tool\n    --cmd M01 - Purge Cockpit web-based management tool\n    --cmd M02 - Start Cockpit Service\n    --cmd M03 - Stop Cockpit Service\n\n  Help - About this app\n    --cmd H00 - About This system. (WIP)\n    --cmd H02 - List of Config function(WIP)\n</code></pre></p>"},{"location":"User-Guide_Armbian-Config/#legacy-options","title":"Legacy options","text":"<p>Backward Compatible options.</p> <p>Use: Text Only<pre><code>armbian-config main=Help\n</code></pre></p> <p>Outputs: Text Only<pre><code>Legacy Options (Backward Compatible)\nPlease use 'armbian-config --help' for more information.\n\nUsage:  armbian-configng main=[arguments] selection=[options]\n\n    armbian-configng main=System selection=Headers          -  Install headers:\n    armbian-configng main=System selection=Headers_remove   -  Remove headers:\n</code></pre></p>"},{"location":"User-Guide_Armbian-Config/#development","title":"Development","text":"<p>Development is divided into three sections:</p> <p>Click for more info:</p> Jobs / JSON Object  A list of the jobs defined in the Jobs file. Text Only<pre><code>### S01\n\nEnable Armbian kernel/firmware upgrades\n\nJobs:\n</code></pre> armbian_fw_manipulate unhold Text Only<pre><code>### S02\n\nDisable Armbian kernel upgrades\n\nJobs:\n</code></pre> armbian_fw_manipulate hold Text Only<pre><code>### S03\n\nEdit the boot environment\n\nJobs:\n</code></pre> nano /boot/armbianEnv.txt Text Only<pre><code>### S04\n\nInstall Linux headers\n\nJobs:\n</code></pre> Headers_install Text Only<pre><code>### S05\n\nRemove Linux headers\n\nJobs:\n</code></pre> Headers_remove Text Only<pre><code>### S06\n\nInstall to internal storage\n\nJobs:\n</code></pre> armbian-install Text Only<pre><code>### S07.1\n\nManage SSH login options\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### S17\n\nChange shell system wide to BASH\n\nJobs:\n</code></pre> export BASHLOCATION=$(grep /bash$ /etc/shells | tail -1) sed -i \"s|^SHELL=.*|SHELL=${BASHLOCATION}|\" /etc/default/useradd sed -i \"s|^DSHELL=.*|DSHELL=${BASHLOCATION}|\" /etc/adduser.conf apt_install_wrapper apt-get -y purge armbian-zsh zsh-common zsh tmux update_skel awk -F'[/:]' '{if ($3 &gt;= 1000 &amp;&amp; $3 != 65534 || $3 == 0) print $1}' /etc/passwd | xargs -L1 chsh -s $(grep /bash$ /etc/shells | tail -1) Text Only<pre><code>### S18\n\nChange shell system wide to ZSH\n\nJobs:\n</code></pre> export ZSHLOCATION=$(grep /zsh$ /etc/shells | tail -1) sed -i \"s|^SHELL=.*|SHELL=${ZSHLOCATION}|\" /etc/default/useradd sed -i \"s|^DSHELL=.*|DSHELL=${ZSHLOCATION}|\" /etc/adduser.conf apt_install_wrapper apt-get -y install armbian-zsh zsh-common zsh tmux update_skel awk -F'[/:]' '{if ($3 &gt;= 1000 &amp;&amp; $3 != 65534 || $3 == 0) print $1}' /etc/passwd | xargs -L1 chsh -s $(grep /zsh$ /etc/shells | tail -1) Text Only<pre><code>### S19\n\nSwitch to rolling release\n\nJobs:\n</code></pre> set_rolling Text Only<pre><code>### S20\n\nSwitch to stable release\n\nJobs:\n</code></pre> set_stable Text Only<pre><code>### S21\n\nEnable read only filesystem\n\nJobs:\n</code></pre> manage_overlayfs enable Text Only<pre><code>### S22\n\nDisable read only filesystem\n\nJobs:\n</code></pre> manage_overlayfs disable Text Only<pre><code>### S23\n\nAdjust welcome screen (motd)\n\nJobs:\n</code></pre> adjust_motd Text Only<pre><code>### S24\n\nInstall alternative kernels\n\nJobs:\n</code></pre> switch_kernels Text Only<pre><code>### S25\n\nDistribution upgrades\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### S28\n\nManage device tree overlays\n\nJobs:\n</code></pre> manage_dtoverlays Text Only<pre><code>### N01\n\nConfigure network interfaces\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### N15\n\nInstall Bluetooth support\n\nJobs:\n</code></pre> see_current_apt  debconf-apt-progress -- apt-get -y install bluetooth bluez bluez-tools check_if_installed xserver-xorg &amp;&amp; debconf-apt-progress -- apt-get -y --no-install-recommends install pulseaudio-module-bluetooth blueman Text Only<pre><code>### N16\n\nRemove Bluetooth support\n\nJobs:\n</code></pre> see_current_apt  debconf-apt-progress -- apt-get -y remove bluetooth bluez bluez-tools check_if_installed xserver-xorg &amp;&amp; debconf-apt-progress -- apt-get -y remove pulseaudio-module-bluetooth blueman debconf-apt-progress -- apt -y -qq autoremove Text Only<pre><code>### N17\n\nBluetooth Discover\n\nJobs:\n</code></pre> connect_bt_interface Text Only<pre><code>### N18\n\nToggle system IPv6/IPv4 internet protocol\n\nJobs:\n</code></pre> toggle_ipv6 | show_infobox Text Only<pre><code>### L00\n\nChange Global timezone (WIP)\n\nJobs:\n</code></pre> dpkg-reconfigure tzdata Text Only<pre><code>### L01\n\nChange Locales reconfigure the language and character set\n\nJobs:\n</code></pre> dpkg-reconfigure locales source /etc/default/locale ; sed -i \"s/^LANGUAGE=.*/LANGUAGE=$LANG/\" /etc/default/locale export LANGUAGE=$LANG Text Only<pre><code>### L02\n\nChange Keyboard layout\n\nJobs:\n</code></pre> dpkg-reconfigure keyboard-configuration ; setupcon  update-initramfs -u Text Only<pre><code>### L03\n\nChange APT mirrors\n\nJobs:\n</code></pre> get_user_continue \"This is only a frontend test\" process_input Text Only<pre><code>### L04\n\nChange System Hostname\n\nJobs:\n</code></pre> change_system_hostname Text Only<pre><code>### Desktops\n\nInstall Desktop Environments\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### Netconfig\n\nNetwork tools\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### DevTools\n\nDevelopment\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### Benchy\n\nSystem benchmaking and diagnostics\n\nJobs:\n</code></pre> see_monitoring Text Only<pre><code>### Containers\n\nContainerlization and Virtual Machines\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### Media\n\nMedia Servers and Editors\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### Management\n\nRemote Management tools\n\nJobs:\n</code></pre> No commands available Text Only<pre><code>### H00\n\nAbout This system. (WIP)\n\nJobs:\n</code></pre> show_message &lt;&lt;&lt; \"This app is to help execute procedures to configure your system  Some options may not work on manually modified systems\" Text Only<pre><code>### H02\n\nList of Config function(WIP)\n\nJobs:\n</code></pre> show_message &lt;&lt;&lt; see_use Text Only<pre><code>\n</code></pre> Jobs API / Helper Functions  These helper functions facilitate various operations related to job management, such as creation, updating, deletion, and listing of jobs, acting as a practical API for developers.  | Description | Example | Credit | |:----------- | ------- |:------:| | Generate a Help message legacy cli commands. | see_cli_legacy | Joey Turner  | Run time variables Migrated procedures from Armbian config. | set_runtime_variables | Igor Pecovnik  | Toggle SSH lastlog | toggle_ssh_lastlog | tearran  | Set Armbian to rolling release | set_rolling | Tearran  | Generate this markdown table of all module_options | see_function_table_md | Joey Turner  | Switching to alternative kernels |  | Igor  | Set Armbian root filesystem to read only | manage_overlayfs enable|disable | igorpecovnik  | Display a menu from pipe | show_menu &lt;&lt;&lt; armbianmonitor -h  ;  | Joey Turner  | Build the main menu from a object | generate_top_menu 'json_data' | Joey Turner  | Migrated procedures from Armbian config. | is_package_manager_running | Igor Pecovnik  | Migrated procedures from Armbian config. | check_desktop | Igor Pecovnik  | Generate Document files. | generate_readme | Joey Turner  |  |  | Igor Pecovnik  | Needed by generate_menu |  | Joey Turner  | Display a Yes/No dialog box and process continue/exit | get_user_continue 'Do you wish to continue?' process_input | Joey Turner  | Display a message box | show_message &lt;&lt;&lt; 'hello world'  | Joey Turner  | Migrated procedures from Armbian config. | connect_bt_interface | Igor Pecovnik  | Menu for armbianmonitor features | see_monitoring | Joey Turner  | Enable/disable device tree overlays | manage_dtoverlays | Gunjan Gupta  | Show or generate QR code for Google OTP | qr_code generate | Igor Pecovnik  | Check if kernel headers are installed | are_headers_installed | Gunjan Gupta  | Check when apt list was last updated and suggest updating or update | see_current_apt || see_current_apt update | Joey Turner  | Migrated procedures from Armbian config. | check_if_installed nano | Igor Pecovnik  | Generate 'Armbian CPU logo' SVG for document file. | generate_svg | Joey Turner  | Remove Linux headers | Headers_remove | Joey Turner  | Update submenu descriptions based on conditions | update_submenu_data | Joey Turner  | sanitize input cli | sanitize_input |   | Check if a domain is reachable via IPv4 and IPv6 | check_ip_version google.com | Joey Turner  | Migrated procedures from Armbian config. | set_header_remove | Igor Pecovnik  | Generate a submenu from a parent_id | generate_menu 'parent_id' | Tearran  | Generate a markdown list json objects using jq. | see_jq_menu_list | Joey Turner  | Generate jobs from JSON file. | generate_jobs_from_json | Joey Turner  | Install kernel headers | is_package_manager_running | Joey Turner  | Toggle IPv6 on or off | toggle_ipv6 | Joey Turner  | Adjust welcome screen (motd) |  | igorpecovnik  | Generate JSON-like object file. | generate_json | Joey Turner  | Install DE | install_de | Igor Pecovnik  | Install wrapper | apt_install_wrapper apt-get -y purge armbian-zsh | igorpecovnik  | Netplan wrapper | network_config | Igor Pecovnik  | Change the background color of the terminal or dialog box | set_colors 0-7 | Joey Turner  | Serve the edit and debug server. | serve_doc | Joey Turner  | Update JSON data with system information | update_json_data | Joey Turner  | pipeline strings to an infobox  | show_infobox &lt;&lt;&lt; 'hello world' ;  | Joey Turner  | Stop hostapd, clean config | default_wireless_network_config | Igor Pecovnik  | Parse json to get list of desired menu or submenu items | parse_menu_items 'menu_options_array' | Gunjan Gupta  | Show the usage of the functions. | see_use | Joey Turner  | Generate a Help message for cli commands. | see_cmd_list [catagory] | Joey Turner  | Revert network config back to Armbian defaults | default_network_config | Igor Pecovnik  | freeze/unhold/reinstall armbian related packages. | armbian_fw_manipulate unhold|freeze|reinstall | Igor Pecovnik  | Check the internet connection with fallback DNS | see_ping | Joey Turner  | Upgrade to next stable or rolling release | release_upgrade stable verify | Igor Pecovnik  | Install docker from a repo using apt | install_docker engine | Kat Schwarz  | change_system_hostname | change_system_hostname | igorpecovnik  | Set Armbian to stable release | set_stable | Tearran  | Secure version of get_user_continue | get_user_continue_secure 'Do you wish to continue?' process_input | Joey Turner     Runtime / Board Statuses  (WIP)  This section outlines the runtime environment to check configurations and statuses for dynamically managing jobs based on JSON data.  (WIP)"},{"location":"User-Guide_Armbian-Config/#testing-and-contributing","title":"Testing and contributing","text":"Get Development  Install the dependencies: Text Only<pre><code>sudo apt install git jq whiptail\n</code></pre>  Get Development and contribute: Text Only<pre><code>{\ngit clone https://github.com/armbian/configng\ncd configng\n./armbian-configng --help\n}\n</code></pre>  Install and test Development deb: Text Only<pre><code>{\n    sudo apt install whiptail\n    latest_release=$(curl -s https://api.github.com/repos/armbian/configng/releases/latest)\n    deb_url=$(echo \"$latest_release\" | jq -r '.assets[] | select(.name | endswith(\".deb\")) | .browser_download_url')\n    curl -LO \"$deb_url\"\n    deb_file=$(echo \"$deb_url\" | awk -F\"/\" '{print $NF}')\n    sudo dpkg -i \"$deb_file\"\n    sudo dpkg --configure -a\n    sudo apt --fix-broken install\n}\n</code></pre>"},{"location":"User-Guide_Armbian_overlays/","title":"Device Tree overlays","text":"<p>Most in-circuit and GPIO based interfaces (SPI, I2C, I2S, UART, \u2026) don\u2019t have a mechanism for detecting and identifying devices connected to the bus, so Linux kernel has to be told explicitly about the device and its configuration details.</p> <p>While Device Tree is a way of describing hardware configuration to the kernel, Device Tree overlays are a way for modifying the DT in order to provide the kernel and kernel drivers with details about external devices or to activate interfaces disabled by default.</p> <p>Note: from the Linux kernel maintainer perspective all unused in-circuit type interfaces that use GPIO pins should be disabled by default and all pins on pin headers or soldering pads will be configured as standard GPIOs.</p> <p>Note: from the Linux kernel maintainer perspective all dedicated interfaces like USB, Ethernet or analog audio that are wired to soldering pads or a pin headers instead of specialized sockets (like USB socket, Ethernet socket or 3.5mm jack) will be left disabled by default.</p>"},{"location":"User-Guide_Armbian_overlays/#armbian-specific-notes","title":"Armbian specific notes","text":"<ul> <li>DT overlays are a Work-in-Progress (WIP) feature, present only in certain images.</li> <li>Please note that different SoCs will have different sets of available overlays.</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#quick-start","title":"Quick start","text":"<ol> <li>Check the <code>README.&lt;soc-id&gt;-overlays</code> in <code>/boot/dtb/overlay/</code> (32-bit SoCs) or <code>/boot/dtb/allwinner/overlay/</code> (64-bit SoCs) for a list of provided overlays, their required and optional parameters</li> <li>Add names of overlays you want to activate to <code>overlays=</code> line in <code>/boot/armbianEnv.txt</code>, separated with spaces</li> <li>Add required parameters with their values to <code>/boot/armbianEnv.txt</code>, one per line</li> <li>Add optional parameters with their values to <code>/boot/armbianEnv.txt</code> if you want to change the default value, one per line</li> <li>If you didn\u2019t find the required overlay or want to change one of provided overlays, refer to \u201cUsing custom overlays\u201d section</li> <li>Reboot</li> </ol>"},{"location":"User-Guide_Armbian_overlays/#using-custom-overlays","title":"Using custom overlays","text":"<ol> <li>Check here for some example overlays</li> <li>Copy or create your overlay file (with <code>.dts</code> extension) on the device</li> <li>Change I2C or SPI bus number, GPIO and pinctrl pins, <code>compatible</code> string to match your SoC if necessary</li> <li>Compile and activate the overlay by running <code>armbian-add-overlay &lt;overlay_file.dts&gt;</code> as root, i.e. <code>sudo armbian-add-overlay sht15.dts</code></li> <li>Reboot</li> </ol>"},{"location":"User-Guide_Armbian_overlays/#armbianenvtxt-entries-reference","title":"armbianEnv.txt entries reference","text":"<ul> <li><code>overlay_prefix</code> - prefix for the DT and overlay file names, set at OS image creation time</li> <li><code>overlays</code> - list of overlays to activate from kernel directory</li> <li><code>user_overlays</code> - list of overlays to activate from <code>/boot/overlay-user/</code> directory</li> <li><code>param_*</code> - overlay parameters</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#kernel-provided-vs-user-provided-overlays","title":"Kernel provided vs user provided overlays","text":"<p>Overlays can be loaded from 2 locations:</p> <ul> <li><code>/boot/dtb/overlay/</code> (<code>/boot/dtb/allwinner/overlay/</code> for 64-bit SoCs) - kernel provided overlays</li> <li><code>/boot/overlay-user/</code> - user provided overlays</li> </ul> <p>Main differences between these locations:</p> <ul> <li>Kernel provided overlays are updated with the kernel packages, any changes to this directory (including new files) will be lost on kernel upgrade</li> <li>Kernel provided directory may contain overlays for different SoCs, so overlay file name pattern will be <code>&lt;prefix&gt;-&lt;name&gt;</code>, for example <code>sun8i-h3-i2c0.dtbo</code>, where <code>sun8i-h3</code> is the prefix and <code>i2c0</code> is the name</li> <li>Kernel provided overlays are activated by the overlay name (i.e. <code>i2c0</code>), and the prefix is set at OS image creation time</li> <li>User provided overlays directory is empty by default and is meant for storing and using user created overlays that are not present in the kernel packages or modified stock overlays</li> <li>User provided overlays are activated by the file name (excluding the extension), i.e. for file <code>adafruit13m.dtbo</code> overlay name would be <code>adafruit13m</code></li> </ul>"},{"location":"User-Guide_Armbian_overlays/#activation","title":"Activation","text":"<p>DT overlays are activated by editing u-boot environment file <code>/boot/armbianEnv.txt</code></p> <ul> <li>Kernel provided overlays are activated by adding a name to the <code>overlays</code> variable</li> <li>User provided overlays are activated by adding a name to the <code>user_overlays</code> variable</li> <li>No more than one <code>overlays</code> line and one <code>user_overlays</code> line can be present in the environment file</li> <li>Multiple names should be separated by space</li> <li>If activated overlays have parameters marked as \u201cRequired\u201d, those parameters have to be set to proper values</li> <li>Reboot is required for any changes to take effect</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#overlay-parameters","title":"Overlay parameters","text":"<p>Some overlays have additional parameters that can be set.</p> <p>Parameters marked as \u201cRequired\u201d have to be set if overlay with these parameters is activated, other parameters are not mandatory if default value is suitable.</p> <p>Parameters are set by adding their name and value to <code>/boot/armbianEnv.txt</code>, each parameter should be added on a new line.</p> <p>Please refer to <code>README.&lt;SoC_prefix&gt;-overlays</code> files in <code>/boot/dtb/overlay/</code> (<code>/boot/dtb/allwinner/overlay/</code> for 64-bit SoCs) directory for supported parameters, i.e. <code>README.sun8i-h3-overlays</code> for H3 based boards.</p> <p>Parameters of type <code>pin</code> require special format:</p> <ul> <li>Value consists of a letter <code>P</code>, a letter that signifies the pin bank and a number of the pin in the bank</li> <li>Letters should be upper case</li> <li>Numbers should not contain leading zeros</li> <li>Examples: good - <code>PA9</code>, <code>PG12</code>; bad - <code>pa2</code>, <code>PG08</code></li> </ul>"},{"location":"User-Guide_Armbian_overlays/#overlay-bus-selection","title":"Overlay bus selection","text":"<p>SoCs may contain multiple bus controllers of the same type, i.e. Allwinner H3 contains 2 SPI controllers and Allwinner A20 contains 4 SPI controllers.</p> <p>Please refer to your board documentation and schematic to determine what pins are wired to the pin headers and thus what bus number should be used in each case.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-pinmux-conflicts","title":"Overlay pinmux conflicts","text":"<p>Some controllers may share the SoC pins in some configurations. For example on Allwinner H3 UART 3 and SPI 1 use the same pins - <code>PA13</code>, <code>PA14</code>, <code>PA15</code>, <code>PA16</code>. In this case activating both UART 3 and SPI 1 would result in a conflict, and on practice only one interface (either SPI or UART) will be accessible on these pins.</p> <p>Please check the SoC specific README, board schematic, SoC datasheet or other documentation if you are unsure about possible conflicts if activating multiple overlays for the controllers that use shared (muxed) pins.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-device-endpoint-conflicts","title":"Overlay device endpoint conflicts","text":"<p>Overlays for devices that use addresses or similar mechanisms (i.e. SPI chip selects) can\u2019t be activated simultaneously if addresses (chip selects) are identical.</p> <p>For example A20 SPI controller 1 has only one hardware chip select, so <code>spi-spidev</code> and <code>spi-jedec-nor</code> overlays cannot be activated both if they would use the same bus number and chip select.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-compatibility","title":"Overlay compatibility","text":"<p>Device Tree overlays for different platforms and SoCs are not directly compatible. This, for example, means that overlays for H3 may need some changes to work on A20, and that Raspberry Pi overlays will need adjustments in order to be used on Allwinner based boards.</p> <p>Rework may include changing labels, references (phandles) and pinconf bindings.</p>"},{"location":"User-Guide_Armbian_overlays/#notes-regarding-spi-and-i2s-overlays","title":"Notes regarding SPI and I2S overlays","text":"<p>Activating a device on SPI or I2S bus may require more than one overlay. In case a bus overlay like <code>spi0</code> or <code>i2s0</code> exist for the target SoC they need to be activated in addition to a slave device overlay (provided or custom/user-made). Please note that these overlays (<code>spi0</code>, <code>i2s0</code>) do not enable any slave devices (like spidev or I2S codec). In some cases it might be necessary to change <code>param_spidev_spi_bus</code> to <code>1</code>.</p>"},{"location":"User-Guide_Armbian_overlays/#debugging","title":"Debugging","text":"<p>As overlays and overlay parameters are applied by the u-boot, it is impossible to get any debugging information (such as error messages) from the OS.</p> <p>Serial console on UART 0 is required to debug DT overlay related problems.</p>"},{"location":"User-Guide_Armbian_overlays/#example-bootarmbianenvtxt-contents","title":"Example <code>/boot/armbianEnv.txt</code> contents:","text":"Text Only<pre><code>verbosity=1\nconsole=serial\noverlay_prefix=sun8i-h3\nrootdev=UUID=bd0ded76-1188-4b52-a20a-64f326c1f193\nrootfstype=ext4\noverlays=w1-gpio uart1 i2c0 spi-spidev\nparam_w1_pin=PA20\nparam_w1_pin_int_pullup=1\nparam_uart1_rtscts=1\nparam_spidev_spi_bus=0\n</code></pre>"},{"location":"User-Guide_Armbian_overlays/#example-of-serial-console-log-when-using-several-overlays","title":"Example of serial console log when using several overlays:","text":"Text Only<pre><code>## Executing script at 43100000\nU-boot loaded from SD\nBoot script loaded from mmc\n265 bytes read in 182 ms (1000 Bytes/s)\n5074230 bytes read in 532 ms (9.1 MiB/s)\n5702664 bytes read in 579 ms (9.4 MiB/s)\nFound mainline kernel configuration\n32724 bytes read in 269 ms (118.2 KiB/s)\n882 bytes read in 277 ms (2.9 KiB/s)\nApplying kernel provided DT overlay sun8i-h3-w1-gpio.dtbo\n506 bytes read in 326 ms (1000 Bytes/s)\nApplying kernel provided DT overlay sun8i-h3-uart1.dtbo\n374 bytes read in 377 ms (0 Bytes/s)\nApplying kernel provided DT overlay sun8i-h3-i2c0.dtbo\n788 bytes read in 347 ms (2 KiB/s)\nApplying kernel provided DT overlay sun8i-h3-spi-spidev.dtbo\n4327 bytes read in 268 ms (15.6 KiB/s)\nApplying kernel provided DT fixup script (sun8i-h3-fixup.scr)\n## Executing script at 44000000\ntmp_bank=A\ntmp_pin=20\n## Loading init Ramdisk from Legacy Image at 43300000 ...\n   Image Name:   uInitrd\n   Image Type:   ARM Linux RAMDisk Image (gzip compressed)\n   Data Size:    5074166 Bytes = 4.8 MiB\n   Load Address: 00000000\n   Entry Point:  00000000\n   Verifying Checksum ... OK\n## Flattened Device Tree blob at 43000000\n   Booting using the fdt blob at 0x43000000\n   reserving fdt memory region: addr=43000000 size=9000\n   Loading Ramdisk to 49b29000, end 49fffcf6 ... OK\n   Loading Device Tree to 49b1d000, end 49b28fff ... OK\n\nStarting kernel ...\n</code></pre>"},{"location":"User-Guide_Basic-Troubleshooting/","title":"Hardware troubleshooting guide","text":"<p>First aid video guide:</p> <p>If you are experiencing at least one of these problems:</p> <ul> <li>board does not boot</li> <li>board freezes, crashes or reboots randomly or when connecting USB devices</li> <li>plugged in USB devices are not detected (not listed in <code>lsusb</code> output)</li> <li>error changing the root password at first boot (Authentication token manipulation error)</li> <li>error installing or updating packages due to read-only file system</li> </ul> <p>and you are using a stable Armbian image, then most likely you have one of two common problems - powering issue or SD card issue.</p> <p>Note that</p> <ul> <li>\u201cI know that my power supply is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip powering related diagnostics</li> <li>\u201cI know that my SD card is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip storage related diagnostics</li> <li>undervoltage can cause symptoms related to SD card problems such as filesystem corruptions and data loss, so powering has to be checked first</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#powering-notes","title":"Powering notes","text":"<ul> <li>Most boards, even ones fitted with PMIC (power management integrated circuit) do not have any measures to react to undervoltage that could prevent instability</li> <li>It does not matter what voltage your power supply outputs, it matters what voltage will reach the onboard voltage regulators</li> <li>Peak power consumption of popular boards can vary from 0.9A at 5V (H3 based Orange Pi PC) to 1.7A at 5V (RK3288 based Tinkerboard), both without any attached peripherials like USB devices</li> <li>Due to the Ohm\u2019s law voltage drop due to cable and connector resistance will be proportional to the electric current, so most of the time problems will be experienced at current spikes caused by CPU load or peripherials like spinning up HDDs</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#power-supply","title":"Power supply","text":"<ul> <li>Cheap phone chargers may not provide the current listed on their label, especially for long time periods</li> <li>Some cheap phone chargers don\u2019t have proper feedback based stabilization, so output voltage may change depending on load</li> <li>Power supplies will degrade over time (especially when working 24/7)</li> <li>Some problems like degraded output filtering capacitors cannot be diagnosed even with a multimeter because of the non-linear voltage form</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#cable","title":"Cable","text":"<ul> <li>The longer and thinner the cable - the higher its resistance - the greater the voltage drop will be under load</li> <li>Even thick looking cable can have thin wires inside, so do not trust the outside cable diameter</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#connector","title":"Connector","text":"<ul> <li>MicroUSB connector is rated for the maximum current of 1.8A, but even this number cannot be guaranteed. Trying to pass larger current (even momentarily) may result in a voltage dropping below USB specifications</li> <li>Most of the boards can also be powered through GPIO pins. This can be used to bypass the microUSB connector and thus to improve stability</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-notes","title":"SD card notes","text":"<ul> <li>A SD card is a complex storage device with an embedded controller that processes read, erase and write operations, wear leveling, error and corruption detection, but it does not provide any diagnostic protocols like S.M.A.R.T.</li> <li>SD cards will degrade over time and may fail in the end in different ways - become completely or partially read-only or cause a silent data corruption</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-brand","title":"SD card brand","text":"<ul> <li>Based on current prices and performance tests done by Armbian users Samsung Evo, Samsung Evo Plus and Sandisk Ultra cards are recommended</li> <li>Other good alternatives may be added to this page in the future</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-size-and-speed-class","title":"SD card size and speed class","text":"<ul> <li>SD card speed class and size does not influence the reliability directly, but larger size means larger amount of lifetime data written, even if you are using 10-20% of the cards space</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#sd-card-testing","title":"SD card testing","text":"<ul> <li>There are many fake SD card around. eBay and Amazon Marketplace are notorious for selling fakes, but sometimes even reputable retailers get fooled.</li> <li>Most commonly low capacity cards will be reprogrammed to appear as bigger, but any files written beyond the true capacity will be lost or corrupted.</li> <li>We recommend to always test the capacity of each new SD cards using f3.</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#writing-images-to-the-sd-card","title":"Writing images to the SD card","text":"<ul> <li>If you wrote an image to the card it does not mean that it was written successfully without any errors</li> <li>so always verify images after write using some tools like balenaEtcher which is currently the only popular and cross-platform tool that does mandatory verify on write (more lightweight alternatives may be added to this page in the future)</li> <li>\u201cCheck for bad blocks\u201d function available in some tools is mostly useless when dealing with SD cards</li> <li>Note that balenaEtcher verifies only 1-2GB that are occupied by the initial unresized image, it does not verify the whole SD card</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#network","title":"Network","text":""},{"location":"User-Guide_Basic-Troubleshooting/#mac-address-conflicts","title":"MAC Address Conflicts","text":"<p>If you experience strange network problems, especially if you are running several of these SOC-boards with the same operating system, then the problems may be sourced by not having a real hardware MAC address. The operating systems try to generate a hardware MAC address from the CPUid, but what if that SOC has no CPUid either?</p> <p>Then you have to do it manually. Depending on system and network installation, there are several possibilities:</p> <ul> <li>the preferred way: change <code>/boot/armbianEnv.txt</code> and add a line:Text Only<pre><code>  ethaddr=XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul> <p>but that file is interpreted by u-boot, which happens early in boot process, but not every u-boot is able to read that file.</p> <ul> <li>next possibility to set mac-address is changing network configuration. On systems with ifupdown you can do that by changing <code>/etc/network/interfaces</code>. Add these lines:Text Only<pre><code>  auto eth0\n  iface eth0 inet dhcp\n      hwaddress ether XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul> <ul> <li>if the above does not work, then your network is probably controlled by Network-manager . In directory <code>/etc/Networkmanager/system-connections</code> is a file <code>Wired connection 1.nmconnection</code>. Change entry cloned-mac-address of group [ethernet] :Text Only<pre><code>  [connection]\n  id=Wired connection 1\n  type=ethernet\n\n  [ethernet]\n  cloned-mac-address=XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#video","title":"Video","text":""},{"location":"User-Guide_Basic-Troubleshooting/#no-screen-on-4k-resolution","title":"No Screen on 4k Resolution","text":"<p>Some combination of boards/kernel versions does not support 4k resolution. This may cause black screen on connecting the board to 4k resolution devices. A workaround to solve this without changing the kernel is forcing the video mode to 1080p. Add this directive to the <code>/boot/armbianEnv.txt</code> and reboot your system:</p> Text Only<pre><code>extraargs=video=HDMI-A-1:1920x1080@60\n</code></pre> <ul> <li>Despite of this config, some apps may try to use 4k resolution, example: Retroarch. In this case you have to change app configuration to use the 1080p resolution.</li> </ul> <ul> <li>To edit files without video you could connect to the board using ssh. Other option is mount the sd card in another device.</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#configuration","title":"Configuration","text":"<ul> <li>Some boards require the setup of the correct device tree file or they will not boot. Check the board specific documentation for details.</li> </ul>"},{"location":"User-Guide_Basic-Troubleshooting/#how-to-report-bugs-properly","title":"How to report bugs properly","text":"<ul> <li>Follow instructions on https://armbian.com/bugs/</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/","title":"Support Definitions, Criteria and Relationships","text":""},{"location":"User-Guide_Board-Support-Rules/#overview","title":"Overview","text":"<p>Support statuses:</p> <ul> <li>Standard support</li> <li>Staging</li> <li>Community maintained</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#gold-and-platinum-support","title":"Gold and Platinum Support","text":"<p>Gold and Platinum support is reserved for business relationships with the Armbian project and is out of the scope of this document. Please contact us for more information.</p>"},{"location":"User-Guide_Board-Support-Rules/#standard-support","title":"Standard Support","text":""},{"location":"User-Guide_Board-Support-Rules/#benefits-provided-for-a-standard-supported-sbc","title":"Benefits provided for a Standard Supported SBC","text":"<ul> <li>Armbian will publish and distribute \u201cstable\u201d images through its mirror network (behind automated closest mirror selection)</li> <li>Armbian will publish and distribute \u201crolling\u201d images (on GitHub and individual download page)</li> <li>best-effort support to SBC maintainer to assure compatiblity within the Armbian Build Framework</li> <li>best-effort team\u2019s unique expertise to assist maintainer with general challenges</li> <li>best-effort automated testing for basic hardware functionality</li> <li>best-effort compensation will be provided to maintainer from the \u201cArmbian Community Fund\u201d [1] [2] [3]</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#criteria-for-supported","title":"Criteria for Supported","text":"<p>For a SBC to be considered supported:</p> <ul> <li>must be beneficial to the Armbian project</li> <li>Armbian team must confirm and agree upon all supported boards statuses</li> <li>a named individual as \u201cmaintainer\u201d with GitHub ID must be preset in the BOARD_MAINTAINER within Board Configuration File</li> <li>a named individual must commit to providing \u201cbest effort\u201d support for their SBC on the Armbian forums</li> <li>maintainer must participate in the Release Process</li> <li>maintainer must sign-off that device has been tested, is stable, and ready for release during release process</li> <li>maintainer must have physical access to the SBC they are supporting</li> <li>maintainer can operate under pseudonym but must reveal his identity to Armbian management</li> <li>maintainer should attend developers meetings held every Wednesday 7:00 PM CET</li> <li>when whole support burden is carried by maintainer and Armbian team, it will be labelled as \u201cPro bono\u201d</li> </ul> <p>Additional Caveats:</p> <ul> <li>if the burden placed on the maintainer and Armbian team is too high, crowdfunding campaign success will decide support</li> <li>supported is not applied to a \u201cboard family\u201d or group of related SBCs. It is per board</li> <li>a maintainer can support multiple devices but must satisfy all requirements above per SBC</li> <li>any individual can be a maintainer for a standard support SBC</li> <li>missed major release will result in immediate forfeit of \u201cArmbian Standard support\u201d status and demotion to \u201cCommunity maintained\u201d status unless Armbian team grants exemption</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#community-maintained","title":"Community maintained","text":"<p>Community maintained devices are not under active supervision or development. Support status is unknown to Armbian team. It represents combined former CSC (community supported configuration) and EOS (end of support). Can be removed from Armbian code base at any time. Left as a courtesy in case a community member wants to attempt to resurrect maintenance.</p> <p>Community maintained SBCs are exclusively supported by the community.</p>"},{"location":"User-Guide_Board-Support-Rules/#caveats-for-community-maintained-sbc","title":"Caveats for Community maintained SBC","text":"<ul> <li>Armbian will publish and distribute images through its mirror network</li> <li>Armbian will publish and distribute rolling images </li> <li>periodic packages are built and published into Armbian\u2019s apt repository</li> <li>images are untested and Armbian team won\u2019t respond on troubles or apply any fixes.</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#requirements-for-community-support","title":"Requirements for Community Support","text":"<ul> <li>patch or component does not break Armbian Build Framework</li> <li>patch or component does not break build of supported boards or other CSCs</li> <li>pull requests needs community review. Armbian team will not review any code related to community supported SBC</li> <li>generally considered to \u201cwork most of the time\u201d</li> <li>generally considered to recieve periodic maintenance from community and upstream</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#staging-work-in-progress","title":"Staging - Work in progress","text":"<p>WIP status is for when a maintainer has commited to a SBC, but is not ready to ship stable images.</p> <p>Benefits of Community Supported SBCs apply to WIP.</p>"},{"location":"User-Guide_Board-Support-Rules/#additional-benefits-provided-for-a-staging-status","title":"Additional Benefits provided for a Staging status","text":"<ul> <li>periodic / nightly CLI images are published by Armbian</li> <li>best-effort support to SBC maintainer to assure compatiblity within the Armbian Build Framework</li> <li>best-effort team\u2019s unique expertise to assist maintainer with general challenges</li> <li>eligible for promotion to Standard Support</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#criteria-for-wip-status","title":"Criteria for WIP status","text":"<ul> <li>must satisfy standard support criteria</li> <li>must show active development</li> </ul>"},{"location":"User-Guide_FAQ/","title":"Frequently asked questions","text":"<p>This information is mainly for new/inexperienced users but could be useful for others too.</p>"},{"location":"User-Guide_FAQ/#is-armbian-an-operating-system","title":"Is Armbian an operating system?","text":"<p>Not per se.  Armbian is a build framework that allows users to create ready-to-use images with working kernels in variable userspace configurations for various single board computers (SBCs).</p> <p>We do provide various prebuilt images for some boards, but mostly for users convenience.</p>"},{"location":"User-Guide_FAQ/#why-i-cannot-simply-shove-a-random-image-into-my-board-to-work-like-on-my-pc","title":"Why I cannot simply shove a random image into my board to work like on my PC?","text":"<p>x86 architecture always has a traditional BIOS or UEFI.  This provides a standard framework for operating systems to interact with the hardware.  Most SBCs do not.  ARM is improving the situation with ARM Server Ready and ARM System Ready certificates, but most SBC vendors are not yet incentivized to meet these standards.</p> <p>Without such standards, many vendors quickly fork low-level bootloaders such as u-boot and make the bare minimum modifications needed.</p> <p>Great reference here</p>"},{"location":"User-Guide_FAQ/#why-is-armbian-constantly-asking-for-money-free-software-should-be-free","title":"Why is Armbian constantly asking for money?  Free software should be free.","text":"<p>Making free licence software also requires best people, expensive infrastructure, tooling.  It has as much or more costs as proprietary while generating no income from the licence.</p> <p>tl;dr: We are asking for help that developers and project maintainers do not lose their generosity and humanity which are the driving force that generates a value.  For all of us!  A great deal of our work represent a big pressure on our very limited private resources.  We ask you to share that burden with us.</p>"},{"location":"User-Guide_FAQ/#development-time","title":"Development time","text":"<p>We are covering a large swath of diverse, custom designed ARM hardware in ways, extents, and under conditions nobody else does.  Keeping this service up, keeping these low end hardware functional is laborious.  When releases are approaching and a lot of testing and fixing is going on, this gets up, stress intensifies.  This means we have to invest let\u2019s say at least 3.000 - 4.000 EUR of our time on top of fixed costs into this service every day just to keep it up.  Without developing any serious features users wish to have.  Fulfilling many of these wishes would easily cost tens of thousands in development time, which we don\u2019t have and which we can\u2019t get back due to it being free software.  Nobody needs to buy licence for using it, and yet only a few people decide to respect the time and attention they are receiving from developers on forums. </p>"},{"location":"User-Guide_FAQ/#infrastructure-and-operations","title":"Infrastructure and operations","text":"<p>We have to maintain our infrastructure where biggest costs are - once again - people\u2019s time, followed by electricity, then hardware itself.  Often we get free hardware and very rare break even with electricity costs and with people that would maintain this for us.  A new sponsored board usually brings us more costs then benefits \u2013 since benefit is anyway public.</p>"},{"location":"User-Guide_FAQ/#support-time","title":"Support time","text":"<p>The software is given, released free.  However support, development, and documentation costs time, effort, hardware and technical ability, which incurs costs.</p> <p>Each question that is directed towards our team is generating opportunity costs and taking away from development time.  Some we are happy to cover, but not all.  Especially when it goes for repetitive questions and demands.</p> <p>Questions associated with missing features represent another hit and miss for us.  Complicated and critical upstream functions are missing (like video acceleration within a web browser, supporting a board that had very poor initial support and no community backing, etc.).  This functionality is unique to hardware and implementing is extremely labor intensive and requires unique expertise.  Our team is 10-15 volunteers that maintain this project during their own time.  We cannot cover the job of Google Chromium team, Collabora, ARM, Rockchip and other vendors which have not provided sufficient support for their products.</p> <p>All our work is done in public and we provide all sources which we are changing in the process.  All our work is patent free and released under a free licence so anyone can re-use it further.  The scale of SBCs Armbian supports is hard to beat, and consequently our work is repackaged and reused by other projects and vendors.  Unfortunately the burden of support is often directed to us, while they focus on revenue.</p>"},{"location":"User-Guide_FAQ/#why-does-hardware-feature-xy-work-in-old-kernel-but-not-in-more-recent-one","title":"Why does hardware feature XY work in old kernel but not in more recent one?","text":"<p>Vendors develop hardware specific support on fixed (usually old LTS) kernel and U-Boot fork and only do minimal adjustments to make board features work.  Besides the fact that those adjustments are almost never pushed back to mainline they usually do not update their sources (if available at all) and pre-made kernels/boot loaders as well.</p> <p>Armbian moves things forward and follows mainline kernel as much as possible, to provide both its features as well as security updates.  The downside is that some features do not work since nobody ported specific drivers to recent mainline, and they can also break.  Armbian can only afford to do brief testing of images and check if basic functions (boot-up, network, USB, etc.) work due to lack of both human and financial resources.</p>"},{"location":"User-Guide_FAQ/#what-does-wipeoscsc-mean","title":"What does WIP/EOS/CSC mean?","text":"<ul> <li>WIP: Work In Progress: Basic functions can be tested but not ready for production yet.</li> <li>CSC: Community Supported Configuration: Community contributed support.  No official support from Armbian development team.</li> <li>EOS: End of life: Support ended.</li> </ul>"},{"location":"User-Guide_FAQ/#i-have-no-technical-knowledge-how-can-i-help","title":"I have no technical knowledge.  How can I help?","text":"<p>We need many different profiles of people to run this project and just about any help is appreciated, not just help on development.  Since otherwise developers have to fix web pages, developers have to run projects, developers have to seek for money, developers have to maintain servers, developers have to maintain forum, developers have to moderate forums, developers have to maintain infrastructure, developers have to maintain relations with partners, developers have to waste time on repeated support question, developers have to deal with \u201ccustomers\u201d, \u2026</p>"},{"location":"User-Guide_FAQ/#why-are-old-stable-distributions-like-ubuntu-focal-or-debian-buster-not-supported","title":"Why are old-stable distributions like Ubuntu Focal or Debian Buster not supported?","text":"<p>The Armbian project has very limited human and financial resources so it can focus on a few up-to-date operating system releases only. Currently supported userspaces from Debian and Ubuntu (latest only).</p>"},{"location":"User-Guide_FAQ/#i-have-a-tv-box-or-tablet-from-insert-random-vendor-can-i-use-armbian-on-it","title":"I have a TV Box or tablet from &lt;insert random vendor&gt;. Can I use Armbian on it?","text":"<p>No.</p> <p>However some community members are commited to tinkering with these devices.  They discuss their findings in a dedicated space in our forums. Take note that there is no support from the Armbian development team whatsoever. General advice: Do not buy (cheap) tv boxes!</p>"},{"location":"User-Guide_FAQ/#why-does-armbian-not-support-tables-or-tv-boxes-in-general-the-market-is-huge","title":"Why does Armbian not support tables or TV boxes in general? The market is huge!","text":"<p>There are some manufacturers who produce better quality than the others.  In general they provide more or less accurate schematics and they have some engineers that are available for general public and you can ask them things here and there.  Most of them try to keep up with the highest standards of hardware development. With proper documentation and minimal support, costs of software development are significantly lower. This is especially important, because we waste our precious private time to secure proper hardware functioning through the time.</p> <p>However, in vast majority of cases, TV boxes are lacking any documentation.  There are frequent changes of components without notice whatsoever, boot mechanisms are closed source and almost all Armbian builds that exist in the wild are unofficial community hacks.  Market is huge but since public does not have interest in covering of support - which in this case is even bigger - involvement in providing support is simply insane and stupid.  It only eats our personal time and finances.</p>"},{"location":"User-Guide_FAQ/#there-is-a-new-board-on-the-market-will-armbian-officially-support-it","title":"There is a new board on the market. Will Armbian officially support it?","text":"<p>Maybe. It depends on things like available documentation from both the vendor as well as SoC manufacturer, production samples to play with, available BSP and last but certainly not least human resources. To say a Maintainer within the Armbian development team to agree taking care. Also if vendors decide to support Armbian there is certainly a higher chance to get it fully supported.</p>"},{"location":"User-Guide_FAQ/#how-can-i-compile-my-own-kernel","title":"How can I compile my own kernel?","text":"<p>Normally on Debian or Ubuntu you would do something like <code>sudo apt-get build-dep linux linux-image-$(uname -r)</code>. However Armbian\u2019s way of building kernel images is slightly different than the standard distribution method. The best way is to follow the procedures in the Developer Guide.</p>"},{"location":"User-Guide_FAQ/#why-i-cannot-choose-a-specific-kernel-version-5115-for-example","title":"Why I cannot choose a specific kernel version (5.11.5 for example)?","text":"<p>Each kernel Armbian offers has a custom patchset on top which would be impossible to maintain compatibility to each and every kernel version out there.  Therefore the choice is usually limited to up to three branches: legacy, current and edge.  Depending on board/family the versions behind these branches may differ.  You can lookup them in the source code.</p>"},{"location":"User-Guide_FAQ/#can-i-upgrade-my-userspace-flavor-like-bullseye-to-bookworm-or-jammy-to-noble","title":"Can I upgrade my userspace flavor, like Bullseye to Bookworm or Jammy to Noble?","text":"<p>Note: Upgrading the Armbian core packages like kernel, firmware and boot loader and the chosen userspace are independent processes. Former is simply done with <code>apt update &amp;&amp; apt upgrade</code>.  </p> <p>Armbian does not offer a standardized way nor do we encourage users to upgrade their userspace, like Focal to Jammy, Jammy to Noble, Bullseye to Bookworm, Bookworm to Trixie. We would love to do that but the reason why we cannot is simply the lack of ressources in time and devices to test such upgrades in various random scenarios.</p> <p>You can try to upgrade your userspace by following official ways from Debian/Ubuntu but make sure to freeze your firmware packages via <code>armbian-config</code> beforehand. Also please do not blame/complain (at) Armbian if something goes wrong or have other issues with an upgraded system.</p>"},{"location":"User-Guide_FAQ/#where-do-i-ship-a-board-so-that-armbian-will-add-support","title":"Where do I ship a board so that Armbian will add support?","text":"<p>Unless you have an existing arrangement with the Armbian, you will need to contact Armbian for a paid engagement. You may also add support by yourself if criteria is satisfied. See Board Support Rules for further information.</p>"},{"location":"User-Guide_FAQ/#what-wifi-adapters-will-most-likely-work-out-of-the-box","title":"What WiFi adapters will most likely work out of the box?","text":"<p>Check here.</p>"},{"location":"User-Guide_FAQ/#i-cannot-find-armbian-config-on-my-device","title":"I cannot find <code>armbian-config</code> on my device.","text":"<p>If you are using a <code>minimal</code> variant this tool is not pre-installed. However you can simply install it via <code>sudo apt update &amp;&amp; sudo apt install armbian-config</code> which will also handle all necessary dependencies. If you are not using an <code>minimal</code> image and the tool is still missing make sure your image is genuine.</p>"},{"location":"User-Guide_FAQ/#why-keeps-one-of-the-leds-flashing-twice-over-and-over-like-a-heartbeat-is-there-something-wrong","title":"Why keeps one of the leds flashing twice over and over like a heartbeat? Is there something wrong?","text":"<p>Absolutely not. Quite the contrary. This behaviour is called <code>heartbeat trigger</code> and is controlled by the kernel. When the load increases the flashing speed will increase as well. If the flashing stops the kernel either froze or were unloaded by either reboot or shutdown. Unhappy? Keep reading below :-)</p>"},{"location":"User-Guide_FAQ/#can-this-behaviour-adjusteddisabled","title":"Can this behaviour adjusted/disabled?","text":"<p>Maybe. Some boards have certain functions hard-wired to the onboard leds. Others allow to control the led functions from userspace. Try to find <code>trigger</code> files for the leds in <code>/sys</code>. Example for an Orange Pi One: Text Only<pre><code>root@orangepione:~# find /sys/devices -name trigger | grep led\n/sys/devices/platform/leds/leds/orangepi:red:status/trigger\n/sys/devices/platform/leds/leds/orangepi:green:pwr/trigger\n</code></pre> Use <code>cat</code> on the <code>trigger</code> file to both check its current behaviour, which is highlighted with [brackets], and which functions are supported. Then use <code>echo</code> to adjust the behaviour. Example for disabling a led:  Text Only<pre><code>root@orangepione:~# cat /sys/devices/platform/leds/leds/orangepi:red:status/trigger\nnone rc-feedback kbd-scrolllock kbd-numlock kbd-capslock kbd-kanalock kbd-shiftlock kbd-altgrlock kbd-ctrllock kbd-altlock kbd-shiftllock kbd-shiftrlock kbd-ctrlllock kbd-ctrlrlock usbport disk-activity disk-read disk-write ide-disk mtd nand-disk [heartbeat] cpu cpu0 cpu1 cpu2 cpu3 activity default-on panic mmc0 rfkill-any rfkill-none 0.1:01:link 0.1:01:100Mbps 0.1:01:10Mbps\nroot@orangepione:~# echo none &gt; /sys/devices/platform/leds/leds/orangepi:red:status/trigger\n</code></pre></p>"},{"location":"User-Guide_FAQ/#why-is-there-no-image-for-board-with-bookwormjammynobletrixie-and-minimalclignomekdexfce-with-vendorlegacycurrentedge-kernel","title":"Why is there no image for [board] with [Bookworm/Jammy/Noble/Trixie] and [Minimal/CLI/Gnome/KDE/Xfce] with [vendor/legacy/current/edge] kernel?","text":"<p>It would be VERY ressource intensive and just insane to pre-create and provide images for all possible combination of kernels, userspaces and desktops/CLI for all available boards and last but not least provide support for them. We simply cannot afford doing this since our ressources in both human and financial are limited. Therefore we provide a small selection for each board only. However with the Armbian build framework it is very easy and convenient to create an image of your desire by yourself. If there is enough public interest for a certain combination we may occasionally adjust our build targets.</p>"},{"location":"User-Guide_Fine-Tuning/","title":"How to customize keyboard, time zone?","text":"<ul> <li>Attention: The preferred method to change most of this stuff is by using the interactive armbian-config tool which is shipped with all Armbian images.</li> </ul>"},{"location":"User-Guide_Fine-Tuning/#keyboard","title":"Keyboard:","text":"Text Only<pre><code>dpkg-reconfigure keyboard-configuration\n</code></pre> <p>In some cases, e.g. when your keyboard standard is not available in previous command, you may also need to set your keymap config:</p> Text Only<pre><code># Check your actual keymap config\nlocalectl status | grep -i keymap\n\n# Set the desired keymap config. Example below to 'br-abnt2'\nlocalectl set-keymap br-abnt2\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#system-language","title":"System language:","text":"Text Only<pre><code># Debian --&gt; https://wiki.debian.org/ChangeLanguage\ndpkg-reconfigure locales\n# Ubuntu --&gt; https://help.ubuntu.com/community/Locale\nupdate-locale LANG=[options] &amp;&amp; dpkg-reconfigure locales\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#console-font-codepage","title":"Console font, codepage:","text":"Text Only<pre><code>dpkg-reconfigure console-setup\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#time-zone","title":"Time zone:","text":"Text Only<pre><code>dpkg-reconfigure tzdata\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#sound-output","title":"Sound output:","text":"Text Only<pre><code># Check the available sound output options:\npacmd list-sinks | less\n# The default will be marked with \"*\"\n# Press \"q\" to close\n\n\n# Define the new default sound output\npacmd set-default-sink &lt;NAME-OF-DESIRED-OPTION&gt;\n</code></pre> <p>The name of HDMI sound output may change accordingly to the device. If you don\u2019t wanna deal with different names you can:</p> Text Only<pre><code>pacmd set-default-sink $(pactl list short sinks | grep -i 'hdmi' | awk '{print $2}')\n</code></pre> <p>The command to define the default sound output is not persistent, to make it persistent add it to the file <code>~/.bashrc</code></p>"},{"location":"User-Guide_Fine-Tuning/#screen-resolution-on-other-boards","title":"Screen resolution on other boards:","text":"Text Only<pre><code>nano /boot/boot.cmd\n\n# example:\n# change example from\n# disp.screen0_output_mode=1920x1080p60\n# to\n# disp.screen0_output_mode=1280x720p60\n\nmkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#screen-resolution-within-xorg","title":"Screen resolution within Xorg","text":"<ul> <li>Thanks to user @maxlinux2000 in this forum post.</li> </ul> <p>Find matching HDMI output:</p> Text Only<pre><code>xrandr --listmonitors\n</code></pre> <p>Calculate VESA CVT mode lines (example for 1440x900)</p> Text Only<pre><code>cvt 1440 900\n</code></pre> <p>Sample output:</p> Text Only<pre><code>1440x900 59.89 Hz (CVT 1.30MA) hsync: 55.93 kHz; pclk: 106.50 MHz\nModeline \"1440x900_60.00\"  106.50  1440 1528 1672 1904  900 903 909 934 -hsync +vsync )\n</code></pre> <p>Create new mode (example):</p> Text Only<pre><code>xrandr --newmode \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync\n</code></pre> <p>Add resolution (example):</p> Text Only<pre><code>xrandr --addmode HDMI-1 1440x900_60.00\n</code></pre> <p>Set current resolution (example):</p> Text Only<pre><code>xrandr --output HDMI-1 --mode 1440x900_60.00\n</code></pre> <p>If it works as expected add it to Xorg by editing <code>/etc/X11/xorg.conf.d/40-monitor.conf</code> and add (example):</p> Text Only<pre><code>Section \"Monitor\"\nIdentifier \"HDMI-1\"\nModeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync\nOption \"PreferredMode\" \"1440x900\"\nEndSection\n</code></pre> <p>Restart Xorg or reboot</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-alter-cpu-frequency","title":"How to alter CPU frequency?","text":"<p>Some boards allow to adjust CPU speed</p> Text Only<pre><code>nano /etc/default/cpufrequtils\n</code></pre> <p>Alter min_speed or max_speed variable.</p> Text Only<pre><code>systemctl restart cpufrequtils\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#swap-for-experts","title":"Swap for experts","text":"<p>By default Armbian implements ZRAM (writing nothing to \u2018disk\u2019 but compressing memory pages in RAM) but in case you often run into out of memory errors and your device has some capable storage (e.g. a securely attached NVMe or SATA SSD) you might want to use ZSWAP instead.</p> <p>Check whether your kernel has zswap enabled (<code>dmesg | grep zswap</code> should output something) and if so create a swapfile or swap partition the traditional way, edit/uncomment <code>/etc/default/armbian-zram-config</code> so that it reads <code>SWAP=false</code>, reboot and you\u2019re done.</p> <p>Zswap performs a lot better than the combination of ZRAM and \u2018swap on disk\u2019 in parallel.</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-downgrade-a-package-via-apt","title":"How to downgrade a package via apt?","text":"<p>This is useful when you need to fall back to previous kernel version.</p> Text Only<pre><code>apt install linux-image-sun8i=5.13\n</code></pre> <p>This example is for H3 legacy kernel. Check this page for others.</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-toggle-boot-output","title":"How to toggle boot output?","text":"<p>Edit and change boot parameters in <code>/boot/boot.cmd</code> (not recommended) or variables in <code>/boot/armbianEnv.txt</code>:</p> Text Only<pre><code>- console=both\n+ console=serial\n</code></pre> <p>To disable console entirely (not recommended) set console to <code>none</code>.  </p> <p>Recompile boot.cmd to boot.scr if it was changed:</p> Text Only<pre><code>mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr\n</code></pre> <p>Reboot.</p> <p>Serial console on imx6 boards are ttymxc0 (Hummingboard, Cubox-i) or ttymxc1 (Udoo).</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-toggle-verbose-boot","title":"How to toggle verbose boot?","text":"<p>Using Armbian 5.05 to 5.20 you would need to touch/rm <code>/boot/.force-verbose</code> to increase boot verbosity. With more recent Armbian builds you would have to alter the <code>verbosity=</code> line in <code>/boot/armbianEnv.txt</code> (defaults to 1 which means less verbose, maximum value is 7).</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-provide-boot-logs-for-inspection","title":"How to provide boot logs for inspection?","text":"<p>When your SBC behaves strange first step is to check power supply and integrity of boot media (<code>armbianmonitor -c \"$HOME\"</code>). Then look into your kernel logs. We made a tool that grabs info and pastes it to an online pasteboard service. Please increase boot verbosity as shown above (<code>verbosity=7</code>), reboot and then run</p> Text Only<pre><code>sudo armbianmonitor -u\n</code></pre> <p>Copy and past URL of your log to the forum, mail, \u2026</p>"},{"location":"User-Guide_Fine-Tuning/#how-to-change-network-configuration","title":"How to change network configuration?","text":"<p>To get Wi-Fi working simply use <code>nmtui</code>, a simple console based UI for network-manager (an example how to set up an AP with network-manager can be found here). To deal with different Ethernet/Wi-Fi combinations there are six predefined configurations available, you can find them in those files:</p> Text Only<pre><code>/etc/network/interfaces.bonding\n/etc/network/interfaces.default\n/etc/network/interfaces.hostapd\n/etc/network/interfaces.network-manager\n/etc/network/interfaces.r1\n/etc/network/interfaces.r1switch\n</code></pre> <p>By default /etc/network/interfaces is a copy of /etc/network/interfaces.default</p> <ol> <li>BONDING: your network adapters are bonded in fail safe / \u201cnotebook\u201d way.</li> <li>DEFAULT: your network adapters are connected classical way.</li> <li>HOSTAPD: your network adapters are bridged together and bridge is connected to the network. This allows you to have your AP connected directly to your router.</li> <li>All interfaces are handled by network-manager (<code>nmtui</code>/<code>nmcli</code> or using the GUI)</li> <li>Router configuration for Lamobo R1 / Banana R1.</li> <li>Switch configuration for Lamobo R1 / Banana R1.</li> </ol> <p>You can switch configuration with copying.</p> Text Only<pre><code>cd /etc/network\ncp interfaces.x interfaces\n</code></pre> <p>(x = default,hostapd,bonding,r1)</p> <p>Then check / alter your interfaces:</p> Text Only<pre><code>nano /etc/network/interfaces\n</code></pre>"},{"location":"User-Guide_Fine-Tuning/#choosing-an-apt-mirror","title":"Choosing an apt mirror","text":"<p>Armbian has its own apt repository and mirrors for armbian-specific packages.  The default of <code>http://apt.armbian.com</code> is a round-robin to all mirrors.   If you are having trouble updating or slow speeds you may want to choose a specific mirror.</p> <p>Do the following:</p> <p>Assure <code>jq</code> is installed</p> <p><code>apt install -y jq</code></p> <p>Get a list of available mirrors from our <code>https://apt.armbian.com/mirrors</code> endpoint.</p> Bash<pre><code>curl -s http://apt.armbian.com/mirrors|jq\n</code></pre> <p>You will see a result set similar to this, listing mirrors by region: JSON<pre><code>{\n  \"AS\": [\n    \"https://mirrors.tuna.tsinghua.edu.cn/armbian/\",\n    \"https://minio.k-space.ee/armbian/apt/\"\n  ],\n  \"NA\": [\n    \"https://armbian.tnahosting.net/apt/\",\n    \"https://us.mirrors.fossho.st/armbian/apt/\"\n  ],\n  \"EU\": [\n    \"https://minio.k-space.ee/armbian/apt/\",\n    \"https://armbian.systemonachip.net/apt/\",\n    \"https://mirrors.netix.net/armbian/apt/\",\n    \"https://mirrors.dotsrc.org/armbian-apt/\",\n    \"https://armbian.hosthatch.com/apt/\"\n  ],\n  \"default\": [\n    \"https://armbian.tnahosting.net/apt/\",\n    \"https://us.mirrors.fossho.st/armbian/apt/\",\n    \"https://minio.k-space.ee/armbian/apt/\",\n    \"https://armbian.systemonachip.net/apt/\",\n    \"https://mirrors.netix.net/armbian/apt/\",\n    \"https://mirrors.dotsrc.org/armbian-apt/\",\n    \"https://armbian.hosthatch.com/apt/\"\n  ]\n}\n</code></pre></p> <p>Edit <code>/etc/apt/sources.list.d/armbian.list</code> and replace the url <code>http://apt.armbian.com</code> with your preferred mirror.</p>"},{"location":"User-Guide_Getting-Started/","title":"Armbian Quick Start Guide","text":"<p>New users</p> <p>Please, make sure you have:</p> <ul> <li>a proper power supply according to the board manufacturer requirements</li> <li>a reliable SD card (see below \u201cHow to prepare a SD card?\u201d)</li> </ul>"},{"location":"User-Guide_Getting-Started/#what-to-download","title":"What to download?","text":"<p>The download for each image consists of three separate files:</p> <ul> <li>.xz compressed image file</li> <li>.sha file for download verification (optional)</li> <li>.asc file for image authentication (optional)</li> </ul> <p>How to check download authenticity?</p> <p>All our images are digitally signed and therefore it is possible to check their authenticity.  You need to  issue these commands (Linux/macOS, you might need to install dependencies first, eg. <code>sudo apt-get install gnupg</code> on Debian/Ubuntu or <code>brew install gnupg</code> on macOS. on windows install the current simple gnupg Gnupg:</p> <p>Bash<pre><code># download public key from the database\ngpg --keyserver hkp://keyserver.ubuntu.com --recv-key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5\n\n  # perform verification \n  gpg --verify Armbian_5.18_Armada_Debian_jessie_3.10.94.img.xz.asc\n\n# proper response\ngpg: Signature made sob 09 jan 2016 15:01:03 CET using RSA key ID 9F0E78D5\ngpg: Good signature from \"Igor Pecovnik (Ljubljana, Slovenia) &lt;igor.++++++++++++@gmail.com&gt;\"\n\n  # wrong reponse. Not genuine Armbian image!\n  gpg: Signature made Sun 03 Jan 2016 11:46:25 AM CET using RSA key ID 9F0E78D5\n  gpg: BAD signature from \"Igor Pecovnik (Ljubljana, Slovenia) &lt;igor.++++++++++++@gmail.com&gt;\"\n</code></pre> It is safe to ignore the message <code>WARNING: This key is not certified with a trusted signature!</code>.</p> <p>How to check download integrity?</p> <p>Since it might happen that your download got somehow corrupted we integrate a checksum/hash for the image.  You can compare the image\u2019s SHA-256 hash with the one contained in the <code>sha256sum.sha</code> file. </p> <p>On Windows, you can download and use the QuickHash GUI and follow the instructions in the gui.</p> <p>while on Linux/macOS, in the directory in which you have downloaded the files ,you would do this</p> Bash<pre><code>  shasum -a 256 -c Armbian_*.img.sha\n  #good response\n  Armbian_5.35_Clearfogpro_Debian_stretch_next_4.13.16.img: OK\n</code></pre> <p>For each board we usually provide various image types:</p> <ul> <li>Minimal - lightweight CLI with bare minimum of packages</li> <li>Server - server variant with preinstalled standard utilities</li> <li>Desktop full featured desktop image</li> </ul> <p>For some boards we provide only minimal images due to their hardware limitations.</p>"},{"location":"User-Guide_Getting-Started/#debian-or-ubuntu","title":"Debian or Ubuntu?","text":"<p>If you have no special preferences that require specific versions, we recommend Ubuntu based Armbian.</p>"},{"location":"User-Guide_Getting-Started/#vendor-current","title":"Vendor, current?","text":"<p>In some cases we provide images with different firmware. They differ in level of hardware support. Focus into:</p> <ul> <li>vendor contains vendor provided kernel which usually has best hardware support while version can be outdated, containin less general fixes</li> <li>current is following latest mainline LTS kernel and is in most cases best choice</li> </ul> <p>And use those if they are the only one / for testings:</p> <ul> <li>edge is as the name implies cutting-edge fresh / development / latest stable. It is only automatically tested and can break at any time. Recommended for experienced users.</li> <li>legacy is old stable current kernel. Use if either current is not available or something does not work well with it.</li> </ul> <p>The level of kernel support however always depends on the board family. If in your specific case something does not work well, you are always free to try an image with an other kernel included or change kernel within armbian-config.</p>"},{"location":"User-Guide_Getting-Started/#rolling-releases","title":"Rolling releases?","text":"<p>Rolling releases are suitable for Linux enthusiasts who want cutting edge packages and have the skills to fix damage that a bad update might cause. If you want stability in a production environment or low headaches as a novice user, skip rolling releases. They are only at, build and ship, Debian testing / Arch / Manjaro / Suse Tumbleweed / Kali / Gentoo support quality level!</p> <pre><code>graph LR\n  A[Hardware] --&gt; B{Armbian kernel};\n  B --&gt;|legacy| C[\"rolling release\"];\n  B --&gt;|vendor| C[\"rolling release\"];\n  B --&gt;|current| C[\"rolling release\"];\n  B --&gt;|edge| C[\"rolling release\"];\n  B --&gt;|legacy| X[\"point release\"];\n  B --&gt;|vendor| X[\"point release\"];\n  B --&gt;|current| X[\"point release\"];\n  B --&gt;|edge| X[\"point release\"];\n\n\n  C ----&gt;|minimal| E[Debian or Ubuntu];\n  C ----&gt;|server| F[Debian or Ubuntu];\n  C ----&gt;|desktop| G[Debian or Ubuntu];\n\n  X ----&gt;|minimal| E[Debian or Ubuntu];\n  X ----&gt;|server| F[Debian or Ubuntu];\n  X ----&gt;|desktop| G[Debian or Ubuntu];</code></pre> <p>Danger</p> <p>Do not use rollling or edge images in a productive environment. Their purpose is testing and providing constructive feedback to developers.</p>"},{"location":"User-Guide_Getting-Started/#preparing-sd-card","title":"Preparing SD card?","text":"<p>Important note: Make sure you use a good, reliable and fast SD card. If you encounter boot or stability troubles in over 95 percent of the time it is either insufficient power supply or related to SD card (bad card, bad card reader, something went wrong when burning the image, card too slow to boot \u2013 \u2018Class 10\u2019 highly recommended!). Armbian can simply not run on unreliable hardware so checking your SD card with either F3 or H2testw is mandatory if you run in problems. Since counterfeit SD cards are still an issue checking with F3/H2testw directly after purchase is highly recommended.</p> <p>Write the .xz compressed image with a tool USBImager or balenaEtcher on all platforms since, unlike other tools, either can validate written data saving you from corrupted SD card contents.</p> <p>Also important</p> <p>Most SD cards are only optimised for sequential reads/writes as it is common with digital cameras. This is what the speed class is about. The SD Association defined Application Performance Class as a standard for random IO performance.</p> Application Performance Class Pictograph Miniumum Random Read Minimum Random Write Minimum Sustained (Seq. Write) Class 1 (A1) 1500 4k IOPS 500 4k IOPS 10MBytes/sec Class 2 (A2) 4000 4k IOPS 2000 4k IOPS 10MBytes/sec <p>We recommend at least A1 rated SD-Cards (A2 rated cards need yet lacking driver support and therefore show lower overall and especially random IO performance). For example:</p> <p> </p> <p>In case you chose an SD card that was already in use before please consider resetting it back to \u2018factory default\u2019 performance with SD Formatter before burning Armbian to it (explanation in the forum). Detailed information regarding \u2018factory default\u2019 SD card performance.</p>"},{"location":"User-Guide_Getting-Started/#how-to-boot","title":"How to boot?","text":"<p>Insert SD card into a slot and power the board. (First) boot (with DHCP) takes up to two minutes with a class 10 SD card and cheapest board.</p>"},{"location":"User-Guide_Getting-Started/#how-to-login","title":"How to login?","text":"<p>First boot will log you automatically on HDMI or serial console while for SSH login you need to login as root and use password 1234. You will be prompted to change this password. You will then be asked to create a normal user account that is sudo enabled (beware of default QWERTY keyboard settings at this stage). Please use this tool, to find your board IP address.</p> <p>In case you have no wired network connection and there is a wireless adaptor detected, it will prompt you to connect.</p> Text Only<pre><code>Welcome to Armbian!\n\nDocumentation: https://docs.armbian.com/ | Community support: https://forum.armbian.com/\n\nIP address:  Network connection timeout!\n\nCreate root password: ********\nRepeat root password: ********\n\nShell: BASH\n\nCreating a new user account. Press &lt;Ctrl-C&gt; to abort\n\nPlease provide a username (eg. your first name): jane\nCreate user (Jane) password: ********\nRepeat user (Jane) password: ********\n\nPlease provide your real name: Jane\n\nDear Jane, your account jane has been created and is sudo enabled.\nPlease use this account for your daily work from now on.\n\nInternet connection was not detected.\n\nConnect via wireless? [Y/n] y\n\nMultiple wireless adaptors detected. Choose primary:\n\n1        wlx00e032cxxx94\n2        wlx60fb00yyyc4a\n\nEnter a number of wireles adaptor: 1\n\nDetected wireless networks:\n\n1        NETWORK\n2        MY-WIFI\n3        Caatsanddogs\n\nEnter a number of SSID: 3\n\nEnter a password for MY-WIFI: password\n\nProbing internet connection (9)\n\nDetected timezone: Europe/Ljubljana\n\nSet user language based on your location? [Y/n] y\n\nGenerating locales: sl_SI.UTF-8\nroot@bananapim2pro:~#\n</code></pre>"},{"location":"User-Guide_Getting-Started/#how-to-install","title":"How to install?","text":"<p>Required condition for eMMC/SATA/USB/NVME:</p> <ul> <li>onboard eMMC storage</li> <li>attached SATA, NVME or USB storage</li> </ul> <p>Start the install script and follow the lead:</p> Text Only<pre><code>armbian-install\n</code></pre> <p>Armbian installer provides those scenarios:</p> <ul> <li>boot from SD, system on SATA / USB</li> <li>boot from eMMC / NAND, system on eMMC/NAND</li> <li>boot from eMMC / NAND, system on SATA / USB / NVME</li> <li>Boot from SPI - system on SATA, USB or NVMe</li> <li>Install/Update the bootloader on SD/eMMC</li> <li>Install/Update the bootloader on special eMMC partition</li> <li>Install/Update the bootloader on SPI Flash</li> <li>Install system to UEFI disk</li> </ul> <p>You can choose the following file system options:</p> <ul> <li>ext2,3,4</li> <li>btrfs</li> </ul>"},{"location":"User-Guide_Getting-Started/#how-to-update","title":"How to update?","text":""},{"location":"User-Guide_Getting-Started/#armbian-os","title":"Armbian OS?","text":"Text Only<pre><code>apt update\napt upgrade\n</code></pre> <p>Update process can take some time in case of using old &amp; cheap SD card and/or under heavy load.</p> <p>If the kernel was upgraded during this process you will be prompted to reboot at next login.</p>"},{"location":"User-Guide_Getting-Started/#boot-loader","title":"Boot loader?","text":"<p>First you need to update all packages described in a previous step. Then run:</p> Bash<pre><code>sudo armbian-install\n</code></pre> <p>Select:</p> <p>Install/Update the bootloader on SD/eMMC</p>"},{"location":"User-Guide_Getting-Started/#how-to-stay-safe","title":"How to stay safe?","text":"<p>Armbian provides firmware package freeze to give you an option to upgrade all packages but firmware. This prevents unplesant surprises on functionality regressions that comes with kernel upgrades. To enable / disable this feature, look for <code>Enable Armbian kernel/firmware upgrades / Disable Armbian kernel upgrades</code> within armbian-config.</p>"},{"location":"User-Guide_Getting-Started/#how-to-upgrade-a-distribution","title":"How to upgrade a distribution?","text":"<p>When a new userspace is out, we recommend to start with a fresh image. However, it is possible to upgrade, but the process is largerly in the domain of underlaying Debian or Ubuntu user space. However we provide experimental <code>Distribution upgrades</code> within armbian-config</p> <p>Danger</p> <p>Userspaces distribution upgrades are neither tested nor supported. Therefore Armbian cannot provide support if something goes wrong.  </p>"},{"location":"User-Guide_Getting-Started/#how-to-tune-hardware","title":"How to tune hardware?","text":"<p>Hardware configuration is available within armbian-config utility.</p>"},{"location":"User-Guide_Getting-Started/#how-to-report-bugs","title":"How to report bugs?","text":"<p>Follow bug reporting form available here and learn how to collect necessary information and where provide to put your report depending on type of issue. Reports lacking fundamental diagnostics are ignored.</p>"},{"location":"User-Guide_Networking/","title":"Networking","text":""},{"location":"User-Guide_Networking/#networking","title":"Networking","text":"<p>Armbian uses Netplan.io to describe networking configurations. Netplan is a utility to easily configure Linux networking, using a declarative approach. If you want to configure your network manually, it is as simple as editing and creating Netplan yaml files (see the yaml configuration reference at the Netplan docs).</p> <p>Netplan is used to configure networks on all Armbian images since Release 24.05, no matter if minimal, CLI or desktop, Debian or Ubuntu. However, the networking backends are different based on if you choose a minimal image or not. </p>"},{"location":"User-Guide_Networking/#minimal-images","title":"Minimal images","text":"<p>Netplan renderer: networkd</p> <p>Minimal images are using the <code>systemd-networkd</code> backend, which has a smaller footprint compared to <code>Network-Manager</code> which is used in all non-minimal images. <code>systemd-networkd</code> is a system daemon that manages network configurations. It detects and configures network devices as they appear; it can also create virtual network devices. This service is great for simple connections, but can also be useful to set up complex network configurations.</p>"},{"location":"User-Guide_Networking/#armbian-defaults","title":"Armbian defaults","text":"<p>All ethernet interfaces are configured for DHCP and will automatically receive an IP address from your router.</p> <p><code>/etc/netplan/10-dhcp-all-interfaces.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    all-eth-interfaces:\n      match:\n        name: \"e*\"\n      dhcp4: yes\n      dhcp6: yes\n      ipv6-privacy: yes\n</code></pre>"},{"location":"User-Guide_Networking/#configuration-examples","title":"Configuration examples","text":""},{"location":"User-Guide_Networking/#setting-a-fixed-ip-address","title":"Setting a fixed IP address","text":"<p>The following example configures a static IP <code>192.168.1.199</code> for the <code>eth0</code> interface. Please adjust as necessary.</p> <p>How to find your device\u2019s Ethernet interface?</p> <p>Use command:</p> <p>Bash<pre><code>ip addr\n</code></pre> It is usually something like <code>eth0</code>, <code>enp4s3</code> or <code>lan</code>.</p> <p><code>/etc/netplan/20-static-ip.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0: # Change this to your ethernet interface\n      addresses:\n      - 192.168.1.199/24\n      routes:\n      - to: default\n        via: 192.168.1.1\n      nameservers:\n       addresses:\n         - 9.9.9.9\n         - 1.1.1.1\n</code></pre> <p>See also the Netplan docs for reference.</p>"},{"location":"User-Guide_Networking/#connecting-to-wifi-network","title":"Connecting to WiFI network","text":"<p>It is recommended to make a separate config file for wireless network.</p> <p>Create the following file:</p> <p><code>sudo nano /etc/netplan/30-wifis-dhcp.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  wifis:\n    wlan0:\n      dhcp4: true\n      dhcp6: true\n      access-points:\n        \"Your-SSID\":\n          password: \"your-password\"\n</code></pre> <p>Replace <code>SSID</code> with the name of the network you want to connect to and <code>wlan0</code> with the wifi interface used on your system.</p> <p>How to find your device\u2019s WiFi interface?</p> <p>Use command:</p> <p>Bash<pre><code>ip addr\n</code></pre> It is usually something like <code>wlan0</code>, <code>wlo1</code> or <code>wlx12334c47dec3</code>.</p> <p>See also the Netplan docs for reference.</p>"},{"location":"User-Guide_Networking/#applying-your-configuration","title":"Applying your configuration","text":"<p>Once you are done configuring your network, it is time to test syntax and apply it.</p>"},{"location":"User-Guide_Networking/#fix-file-permissions","title":"Fix file permissions","text":"<p>According to the Netplan docs, the permissions must be restricted to the <code>root</code> user.</p> Bash<pre><code>sudo chmod 600 /etc/netplan/*.yaml\n</code></pre>"},{"location":"User-Guide_Networking/#test-syntax","title":"Test syntax","text":"<p>This will verify the syntax and test if your device can connect</p> Bash<pre><code>sudo netplan try\n</code></pre>"},{"location":"User-Guide_Networking/#apply-the-configuration","title":"Apply the configuration","text":"Bash<pre><code>sudo netplan apply\n</code></pre>"},{"location":"User-Guide_Networking/#cli-and-desktop-images","title":"CLI and desktop images","text":"<p>Netplan renderer: Network Manager</p> <p>Server CLI and desktop images are using the <code>Network-Manager</code> backend. You can use similar methods for configuring your network as with the <code>networkd</code> backend used on minimal images.</p>"},{"location":"User-Guide_Networking/#setting-a-fixed-ip-address_1","title":"Setting a fixed IP address","text":"<p>The following example configures a static IP <code>192.168.1.199</code> for the <code>eth0</code> interface. Please adjust the example to your likings.</p> <p>How to find your device\u2019s Ethernet interface?</p> <p>Use command:</p> <p>Bash<pre><code>ip addr\n</code></pre> It is usually something like <code>eth0</code>, <code>enp4s3</code> or <code>lan</code>.</p> <p><code>/etc/netplan/20-static-ip.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: NetworkManager # Different than 'networkd'\n  ethernets:\n    eth0: # Change this to your ethernet interface\n      addresses:\n      - 192.168.1.199/24\n      routes:\n      - to: default\n        via: 192.168.1.1\n      nameservers:\n       addresses:\n         - 9.9.9.9\n         - 1.1.1.1\n</code></pre> <p>See also the Netplan docs for reference.</p> <p>Alternatively, you can also use Network-Manager directly via the command line or GUI tools on your desktop:</p> Bash<pre><code>nmtui-edit eth0\n</code></pre> Display screenshot <p></p> <p>Replace <code>eth0</code> with the name of your Ethernet Interface.</p>"},{"location":"User-Guide_Networking/#connecting-to-wifi-network_1","title":"Connecting to WiFI network","text":"<p>For connecting to a wireless network, you can use the same method as mention above for use with <code>networkd</code> on minimal images. Just make sure to replace <code>renderer: networkd</code> with <code>renderer: NetworkManager</code>.</p> <p>Alternatively, you can also use Network-Manager directly via the command line or GUI tools on your desktop:</p> Bash<pre><code>nmtui-connect SSID\n</code></pre> Display screenshot <p></p> <p>Replace <code>SSID</code> with the name of your wireless network.</p>"},{"location":"User-Guide_Networking/#automatic-configuration","title":"Automatic configuration","text":"<p>It is possible to network configurations which are automatically applied when you first boot your device after flashing a fresh image by writing to the file <code>/root/.not_logged_in_yet</code> which is read at your first login.</p> <p>Mount your live image before your first boot and use this example for reference:</p> Text Only<pre><code># Set PRESET_NET_CHANGE_DEFAULTS to 1 to apply any network related settings below.\n\nPRESET_NET_CHANGE_DEFAULTS=\"1\"\n\n# Enable WiFi or Ethernet.\n# NB: If both are enabled, WiFi will take priority and Ethernet will be disabled.\n\nPRESET_NET_ETHERNET_ENABLED=1\nPRESET_NET_WIFI_ENABLED=1\n\n# Enter your WiFi credentials\n# SECURITY WARNING: Your wifi keys will be stored in plaintext, no encryption.\n\nPRESET_NET_WIFI_SSID='MySSID'\nPRESET_NET_WIFI_KEY='MyWiFiKEY'\n\n# Country code to properly adjust the WiFi for your country.\n\n# E.g. 'GB', 'US' or 'DE' (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nPRESET_NET_WIFI_COUNTRYCODE='GB'\n\n# If you want to use a static IP, you may set it here\n\nPRESET_NET_USE_STATIC=1\nPRESET_NET_STATIC_IP='192.168.0.100'\nPRESET_NET_STATIC_MASK='255.255.255.0'\nPRESET_NET_STATIC_GATEWAY='192.168.0.1'\nPRESET_NET_STATIC_DNS='9.9.9.9 1.1.1.1'\n</code></pre> <p>If you want to use first run automatic configuration at build time, check this GitHub pull request.</p> <p>In short:</p> <ol> <li>Copy the template with <code>cp extensions/preset-firstrun.sh userpatches/extensions/</code></li> <li>Edit the template <code>userpatches/extensions/preset-firstrun.sh</code> according to your situation</li> <li>Build your Armbian image using the additional parameter <code>ENABLE_EXTENSIONS=preset-firstrun</code></li> </ol> Tip <p>This method also creates a new user, sets passwords and more!</p>"},{"location":"User-Guide_Recovery/","title":"Recovery","text":"<p>Important: If you came here since you cannot get Armbian running on your board please keep in mind that in 95 percent of all cases it is either a faulty/fraud/counterfeit SD card or an insufficient power supply that is causing these sorts of does not work issues!</p> <p>The following are presented in (more or less) increasing levels of despair.  But keep heart!  :)  And proceed in order.</p>"},{"location":"User-Guide_Recovery/#u-boot-shell-access","title":"U-Boot Shell Access","text":"<p>If you broke the system you can try to get in this way.  You have to get to u-boot command prompt, using either a serial adapter or monitor and usb keyboard.</p> <ul> <li>Note: USB support in u-boot is currently not enabled on all H3 boards.</li> </ul> <p>After switching power on or rebooting, when u-boot loads up, press some key on the keyboard (or send some key presses via terminal) to abort default boot sequence and get to the command prompt:</p> Bash Session<pre><code>U-Boot SPL 2015.07-dirty (Oct 01 2015 - 15:05:21)\n...\nHit any key to stop autoboot:  0\nsunxi#\n</code></pre> <p>Enter the following commands, replacing root device path if necessary.</p> <ul> <li>Note: these are for booting with mainline kernel; check <code>boot.cmd</code> for your device for commands related to legacy kernel.</li> </ul> <p>For serial:</p> Bash Session<pre><code>sunxi# setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=ttyS0,115200\n</code></pre> <p>For monitor:</p> Bash Session<pre><code>sunxi# setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=tty1\n</code></pre> <p>Then:</p> Bash Session<pre><code>sunxi# ext4load mmc 0 0x49000000 /boot/dtb/${fdtfile}\nsunxi# ext4load mmc 0 0x46000000 /boot/zImage\nsunxi# env set fdt_high ffffffff\nsunxi# bootz 0x46000000 - 0x49000000\n</code></pre> <p>System should eventually boot to bash shell:</p> Bash Session<pre><code>root@host:/#\n</code></pre> <p>Now you can try to fix your broken system.</p>"},{"location":"User-Guide_Recovery/#replacing-boot","title":"Replacing /boot","text":"<p>When something goes terribly wrong and you are not able to boot the system (and cannot gain access via u-boot as outlined above), this is the way to proceed.  You will need some Debian based Linux machine where you can mount the failed SD card.  With this procedure you will reinstall the kernel and hardware settings.  In most cases this should be enough to unbrick the board.</p> <p>It is recommended to issue a filesystem check before mounting.  Replace <code>X</code> and <code>Y</code> below with your device and partition(s), respectively (if not a flash based device, it may even be <code>/dev/sdXY</code>, etc).</p> Bash Session<pre><code>/ # fsck /dev/mmcblkXpY -f\n</code></pre> <p>Mount the SD card.</p> Bash Session<pre><code>/ # cd /mnt\n/mnt # mkdir sdcard\n/mnt # mount /dev/mmcblkXpY /mnt/sdcard\n</code></pre> <p>Make another temporary directory somewhere else (in our example <code>~/tmp/recovery</code>) and download the Linux root, kernel, firmware and dtb packages for your board and currently used OS.</p> <ul> <li>Note: This example is only for Nanopi Neo 2 with Ubuntu Focal, current kernel (mainline) and Armbian 20.08.13 firmware.  Alter package names according to your device name, SOC-family, kernel and firmware version!</li> </ul> Bash Session<pre><code>/mnt $ cd\n~ $ mkdir -p tmp/recovery\n~ $ cd tmp/recovery\n\n(Root file system):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-focal-root-current-nanopineo2/linux-focal-root-current-nanopineo2_20.08.13_arm64.deb\n\n(Kernel):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-5.8.16-sunxi64/linux-image-current-sunxi64_20.08.13_arm64.deb\n\n(Firmware):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/a/armbian-firmware/armbian-firmware_20.08.13_all.deb\n\n(Device Tree Binary (DTB)):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-5.8.16-sunxi64/linux-dtb-current-sunxi64_20.08.13_arm64.deb\n</code></pre> <p>Extract all the Debian packages (<code>.deb</code> files) to the mounted sd card.</p> Bash Session<pre><code>~/tmp/recovery # for f in *.deb; do dpkg -x $f /mnt/sdcard; done\n</code></pre> <p>Navigate to <code>/mnt/sdcard/boot</code> and create symlinks:</p> Bash Session<pre><code>~/tmp/recovery # cd /mnt/sdcard/boot\n/mnt/sdcard/boot # ln -s vmlinuz-5.8.16-sunxi64 zImage\n/mnt/sdcard/boot # ln -s uInitrd-5.8.16-sunxi64 uInitrd\n/mnt/sdcard/boot # ln -s dtb-5.8.16 dtb\n</code></pre> <p>If you upgrade from some very old build, you might need to update your boot script.</p> <ul> <li>Note: The following example is for Allwinner boards.</li> </ul> <ul> <li>Note: You will need a <code>u-boot-tools</code> package on your host system.</li> </ul> Bash Session<pre><code>/mnt/sdcard/boot # wget https://raw.githubusercontent.com/armbian/build/master/config/bootscripts/boot-sunxi.cmd\n/mnt/sdcard/boot # mv boot-sunxi.cmd boot.cmd\n/mnt/sdcard/boot # mkimage -C none -A arm -T script -d boot.cmd boot.scr\n</code></pre> <p>Unmount SD card.</p> Bash Session<pre><code>/mnt/sdcard/boot # cd /\n/ # umount /mnt/sdcard\n</code></pre> <p>Move it to the board and power on.  Check serial output for errors if problems persist.</p>"},{"location":"User-Guide_Recovery/#flashing-boot-loader","title":"Flashing boot loader","text":"<p>Sometimes we need to flash boot loader from some other Linux. Attach an SD card reader with your SD card and proceed this way:</p> Bash Session<pre><code>/mnt $ cd\n~ $ mkdir -p tmp/recovery\n~ $ cd tmp/recovery\n~ $ wget https://imola.armbian.com/apt/pool/main/l/linux-u-boot-nanopineo2-current/linux-u-boot-current-nanopineo2_20.08.13_arm64.deb\n~ $ dpkg-deb -x linux-u-boot-current-nanopineo2_20.08.13_arm64.deb pack\n~ $ source pack/usr/lib/u-boot/platform_install.sh\n~ $ write_uboot_platform pack/usr/lib/linux-u-boot-nanopineo2-current /dev/XXX # replace XXX with the actual device /dev/sdb\n</code></pre> <p>Move it to the board and power on.  Check serial output for errors if problems persist.</p>"}]}